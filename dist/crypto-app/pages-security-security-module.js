(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pages-security-security-module"],{

/***/ "./src/app/pages/security/security.component.html":
/*!********************************************************!*\
  !*** ./src/app/pages/security/security.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-layout class=\"layout-container\">\n    <nb-layout-header class=\"flex flexCenter platformHeader\">\n        <app-header></app-header>\n    </nb-layout-header>\n    \n    <nb-layout-column class=\"flex fix-overflow p-3 px-md-3\">\n\n        <!--<div id=\"cover-spin\" style=\"display: block\" [hidden]=\"is_loader\" ></div>-->\n        <div class=\"row justify-content-center custom-padding\">\n            <div class=\"col-12\">\n                <div class=\"row\">\n                    <div class=\"col-12 col-sm-12 col-md-6 col-lg-5\">\n                        <div class=\"setting-width\">\n                            <div class=\"\">\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12\">\n                                        <div [nbSpinner]=\"loading\" class=\"ss_profile_box text-center\">\n                                            <div *ngIf=\"profileHeaderImg\" class=\"ss_img\">\n                                                <img [src]=\"profileHeaderImg\">\n                                            </div>\n                                            <div *ngIf=\"profileImg\" [ngStyle]=\"{'margin-top' : profileHeaderImg ?  '-30px' : '2vh'}\" class=\"ss_profile_images\">\n                                                <img [src]=\"profileImg\">\n                                            </div>\n                                            <h3>{{userDetails?.firstName}} {{userDetails?.lastName}}</h3>\n                                            <p class=\"email-address\">{{userDetails?.email}}</p>\n                                            <div class=\"row px-4\">\n                                                <div class=\"col-lg-6 col-sm-12 col-md-12\">\n                                                    <ul class=\"ss_profile_info\">\n                                                        <li>\n                                                            <span> Battle of WZRDS ID : </span>\n                                                            <span> {{userDetails?.firstName}} {{userDetails?.lastName}} </span>\n                                                        </li>\n                                                        <li>\n                                                            <span> Gender : </span>\n                                                            <span><a href=\"javascript:void()\" class=\"SS_input_edit\" (click)=\"changeGender()\"> {{(gender==1)?'Female':'Male'}} </a></span>\n                                                        </li>\n                                                        <li>\n                                                            <span> Birthday : </span>\n                                                            <span> {{userDetails?.birthday}} </span>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                                <div class=\"col-lg-6 col-sm-12 col-md-12\">\n                                                    <ul class=\"ss_profile_info\">\n                                                        <li>\n                                                            <span> Password :  </span>\n                                                            <span> <a href=\"javascript:void()\" style=\"\" class=\"SS_input_edit\" (click)=\"changePasswordShow()\">Change</a></span>\n                                                        </li>\n                                                        <li>\n                                                            <span> Location : </span>\n                                                            <span> <a href=\"javascript:void()\"  class=\"SS_input_edit\" (click)=\"changeLocationShow()\">{{location}}</a> </span>\n                                                        </li>\n                                                        <li>\n                                                            <span> Joined : </span>\n                                                            <span> {{userDetails?.dateCreated}} </span>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"setting-width\">\n                            <div class=\"\">\n                                <div class=\"px-4 pt-4 pos-relative\">\n                                    <div class=\"new-label-slant\">NEW</div>\n                                    <div class=\"row\">                                        \n                                        <div class=\"col-sm-9 col-9\">\n                                            <h5 class=\"text-light \"><span class=\"new-rel\">Two Factor Authentication</span></h5>\n                                        </div>\n                                        <div class=\"col-sm-3 col-3 ss_mobile_right_left text-sm-right pr-3 pr-md-5 pr-lg-4\">\n                                            <label class=\"switch\">\n                                                <input type=\"checkbox\" [(ngModel)]=\"is_2fa\">\n                                                <span class=\"slider round\"></span>\n                                            </label>\n                                        </div>\n                                    </div>\n                                    <p class=\"text-danger text-center\" style=\"width: 100%\">{{errorMsg}}</p>\n                                    <p class=\"text-success text-center\" style=\"width: 100%\">{{successMsg}}</p>\n                                </div>\n                                <div class=\"setting-content text-light\" *ngIf=\"is_2fa\">\n                                    <div class=\"setting-content-check d-flex\">\n                                        <div class=\"ss_radio_button\">\n                                            <input id=\"radio-1\" name=\"radio\" type=\"radio\"\n                                                   [checked]=\"(twoFAType==='sms')?true:false\" value=\"sms\"\n                                                   (change)=\"onSelectionChange('sms')\">\n                                            <label for=\"radio-1\" class=\"radio-label\"></label>\n                                        </div>\n                                        <div class=\"setting-content-text\">\n                                            <h5 class=\"d-inline-block mb-2 settings-title\">Text Message</h5>\n                                            <p>We'll send a code to your phone</p>\n                                            <div class=\"mt-3 ss_message_text_box\" *ngIf=\"twoFAType==='sms'\">\n                                                <select name=\"country_code\" class=\"contry-code text-light mb-1 col-3 mr-3\"\n                                                        [(ngModel)]=\"countryCode\">\n                                                    <option *ngFor=\"let con of countries\" value=\"{{con.code}}\"\n                                                            [selected]=\"(countryCode==con.code)?true:false\">{{con.name.split(' ')[0]}}{{con.code}}</option>\n                                                </select>\n                                                <input id=\"phone\" name=\"phone\" type=\"number\" [(ngModel)]=\"phoneNumber\"\n                                                    placeholder=\"Phone Number\" class=\"text-light ml-0 col-8\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"setting-content-check d-flex\">\n                                        <div class=\"ss_radio_button\">\n                                            <input id=\"radio-2\" name=\"radio\" type=\"radio\"\n                                                   [checked]=\"(twoFAType==='email')?true:false\" value=\"email\"\n                                                   (change)=\"onSelectionChange('email')\">\n                                            <label for=\"radio-2\" class=\"radio-label\"></label>\n                                        </div>\n                                        <div>\n                                            <h5 class=\"settings-title mb-2\">Email</h5>\n                                            <p class=\"mb-0\">We'll send a code to your account's e-mail address:</p>\n                                            <div class=\"email-address\">{{userDetails?.email}}</div>\n                                        </div>\n                                    </div>\n                                    <!-- <div class=\"setting-content-check d-flex\">\n                                        <div class=\"ss_radio_button\">\n                                            <input id=\"radio-3\" name=\"radio\" type=\"radio\"\n                                                   [checked]=\"(twoFAType==='google')?true:false\" value=\"google\"\n                                                   (change)=\"onSelectionChange('google')\">\n                                            <label for=\"radio-3\" class=\"radio-label\"></label>\n                                        </div>\n                                        <div>\n                                            <h5 class=\"settings-title mb-2\">Google Auth</h5>\n                                            <p>You can login with your Gmail account through our Authenticator App</p>\n                                        </div>\n                                    </div> -->\n                                    <div style=\"text-align:right;padding: 20px;\">\n                                        <button nbButton type=\"submit\" (click)=\"updateSettings()\" size=\"small\">Update Settings\n                                        </button>\n                                    </div>\n                                </div>\n                                <!-- <div style=\"text-align:right;padding: 20px;\">\n                                        <button nbButton type=\"submit\" (click)=\"updateSettings()\" size=\"small\">Update Settings\n                                        </button>\n                                </div> -->\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"col-lg-7 col-sm-12 col-md-6\">\n                        <div class=\"setting-width\">\n                            <div class=\"px-4 pt-4\">\n                                <div class=\"row\">\n                                    <div class=\"col-12 ss_min-height_plateform\">\n                                        <h5 class=\"text-light \">EVOLVE</h5>\n                                        <p>{{evolve?.description}} </p>\n                                        <p> Welcome to Version <b>{{evolve?.version}}</b> </p>\n                                        <div class=\"col-12 text-right s_group\">\n                                            <span>WZRD GROUP</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"setting-width\">\n                            <div class=\"px-4 pt-4\">\n                                <div class=\"row\">\n                                    <div class=\"col-12 ss_min-height_plateform\">\n                                        <h5 class=\"text-light \">PLATFORM UPDATES</h5>\n                                        <p>{{platform?.description}}</p>\n                                        <p>New Available Version: <b>{{platform?.version}}</b></p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"setting-width\">\n                            <div class=\"px-4 pt-4 pos-relative\">\n                                <div class=\"new-label-slant\">NEW</div>\n                                <div class=\"row\">\n                                    <div class=\"col-12 ss_min-height_plateform pb-4\">\n                                        <h5 class=\"text-light \"><span class=\"new-rel\">PLATFORM THEME</span></h5>\n                                        <p>Your current theme : WZRD THEME</p>\n                                       <div class=\"platform_ss row\">\n                                           <div class=\"col-lg-9\">\n                                               <h5>Select your WZRD Platform theme</h5>\n                                               <p class=\"mb-0\">Customize your home by selecting a theme below. Be sure to hit save after selecting one.</p>\n                                           </div>\n                                           <div class=\"col-lg-3 mt-auto\">\n                                               <!--[(ngModel)]=\"log.position\" (selectedChange)=\"selectedPosition($event)\"-->\n                                               <!-- <nb-select placeholder=\"Select Theme\" class=\"transparent order nb-select-position select_box_ss\" [(ngModel)]=\"theme_id\">\n                                                   <nb-option  *ngFor=\"let theme of themes\" [value]=\"theme.id\" (selectionChange)=\"updateTheme($event)\">{{theme.name}}</nb-option>\n                                                   <nb-option  *ngFor=\"let theme of ['WZRD THEME']\" value=\"WZRD THEME\">{{theme}}</nb-option>\n                                               </nb-select> -->\n                                               <div class=\"select-btn-width\"><button nbButton outline status=\"primary\" size=\"xsmall\" class=\"\"  (click)=\"showThemeSelector()\">MORE THEMES</button></div>\n                                           </div>\n                                           <div class=\"theme-picker-container\">\n                                               <div class=\"gridContainer-library\">\n                                                   <div class=\"grid-library\">\n                                                       <div *ngFor=\"let cast of themeOptions; let i = index;\" class=\"theme-square\" [ngClass]=\"{'hide': !showMoreThemes && i > 4}\">\n                                                           <!-- <div style=\"height: 100px; background: url(../assets/theme_tn/1.jpg)\"></div> -->\n                                                           <img src=\"{{cast.img}}\" (click)=\"changeTheme(cast.theme)\">\n                                                           <!-- <img src=\"{{cast.img}}\"/> -->\n                                                       </div>\n                                                   </div>\n                                               </div>\n                                               <div class=\"btn-container\">\n                                                    <div class=\"btn-width\"><button [disabled]=\"!themeClicked\" nbButton outline status=\"primary\" size=\"xsmall\" class=\"\" >SAVE</button></div>\n                                                    <!-- <div class=\"btn-width\"><button nbButton outline status=\"danger\" size=\"xsmall\" class=\"\" (click)=\"closeTheme()\">CANCEL</button></div> -->\n                                               </div>                                               \n                                           </div>\n                                       </div>\n                                        <!-- <div class=\"col-12 text-right s_group\">\n                                            <span>WZRD GROUP</span>\n                                        </div> -->                                        \n                                    </div>                                    \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Dolce2020! -->\n\n        <nb-card class=\"card-position\" *ngIf=\"isShowChangePass\">\n            <nb-card-header class=\"d-flex justify-content-between\">\n                Change Password\n            </nb-card-header>\n            <nb-card-body>\n                <p class=\"text-danger\" *ngIf=\"isError\">{{isError}}</p>\n                <form [formGroup]=\"changePassForm\">\n                    <div class=\"p-3\">\n                        <input nbInput type=\"password\" formControlName=\"currentPassword\"  placeholder=\"Current Password\"  tabindex=\"-1\">\n                    </div>\n                    <div class=\"p-3\">\n                        <input nbInput type=\"password\" formControlName=\"newPassword\" placeholder=\"New Password\"  tabindex=\"-1\">\n                    </div>\n                    <div class=\"p-3\">\n                        <button nbButton outline status=\"primary\" (click)=\"changePasswordSubmit()\" size=\"xsmall\" class=\"f-w\"  tabindex=\"1\"\n                               >{{isSubmit}}</button>\n                    </div>\n                    <div class=\"px-3\">\n                        <button nbButton outline status=\"danger\" size=\"xsmall\" class=\"f-w\"  (click)=\"changePasswordCancel()\">Cancel</button>\n                    </div>\n                </form>\n            </nb-card-body>\n        </nb-card>\n\n\n        <nb-card class=\"card-position\" *ngIf=\"isShowGender\">\n            <nb-card-header class=\"d-flex justify-content-between\">\n                Gender\n            </nb-card-header>\n            <nb-card-body>\n                <p class=\"text-danger\" *ngIf=\"isError\">{{isError}}</p>\n                <form [formGroup]=\"changeGenderForm\">\n                    <div class=\"p-3\">\n                        <nb-select placeholder=\"Select gender\" [(selected)]=\"gender\" formControlName=\"gender\">\n                            <nb-option [value]=\"2\" > Male </nb-option>\n                            <nb-option [value]=\"1\"> Female </nb-option>\n                        </nb-select>\n                    </div>\n                    <div class=\"p-3\">\n                        <button nbButton outline status=\"primary\" (click)=\"genderSubmit()\" size=\"xsmall\" class=\"f-w\"  tabindex=\"1\"\n                        >Submit</button>\n                    </div>\n                    <div class=\"px-3\">\n                        <button nbButton outline status=\"danger\" size=\"xsmall\" class=\"f-w\"  (click)=\"genderCancel()\">Cancel</button>\n                    </div>\n                </form>\n            </nb-card-body>\n        </nb-card>\n\n        <nb-card class=\"card-position\" *ngIf=\"isShowLocation\">\n            <nb-card-header class=\"d-flex justify-content-between\">\n                Country\n            </nb-card-header>\n            <nb-card-body>\n                <p class=\"text-danger\" *ngIf=\"isError\">{{isError}}</p>\n                <form [formGroup]=\"changeLocationForm\">\n                    <div class=\"my-0 location-select\">\n                        <nb-select  name=\"country\" placeholder=\"Country\" required formControlName=\"location\"  >\n                            <nb-option *ngFor=\"let location of locations\" [value]=\"location\">{{location}}</nb-option>\n                        </nb-select>\n                    </div>\n                    <div class=\"p-3\">\n                        <button nbButton outline status=\"primary\" (click)=\"changeLocationSubmit()\" size=\"xsmall\" class=\"f-w\"  tabindex=\"1\"\n                        >Submit</button>\n                    </div>\n                    <div class=\"px-3\">\n                        <button nbButton outline status=\"danger\" size=\"xsmall\" class=\"f-w\"  (click)=\"changeLocationCancel()\">Cancel</button>\n                    </div>\n                </form>\n            </nb-card-body>\n        </nb-card>\n\n    </nb-layout-column>\n    <nb-layout-footer class=\"footer-main\">\n            &copy; 2020 Powered by <a target=\"_blank\" class=\"wzrdgroup-link\" href=\"http://wzrdgroup.com/\">WZRD Group</a>\n          </nb-layout-footer>\n</nb-layout>\n\n"

/***/ }),

/***/ "./src/app/pages/security/security.component.scss":
/*!********************************************************!*\
  !*** ./src/app/pages/security/security.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host .platformHeader {\n  background: #ffffff; }\n.nb-theme-default :host .footer-main {\n  background: #ffffff;\n  text-align: left; }\n.nb-theme-default :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-default :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid; }\n.nb-theme-default :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-default :host [nbButton].btn-outline.btn-primary.hover {\n  background: !important; }\n.nb-theme-default :host nb-card {\n  box-shadow: 0 2px 12px 0 #dfe3eb; }\n.nb-theme-default :host [nbInput] {\n  border: 2px solid; }\n.nb-theme-default :host ::ng-deep button {\n  border: none; }\n.nb-theme-default :host .email-address {\n  font-weight: 500; }\n.nb-theme-default :host ::ng-deep nb-card.select.primary {\n  border: 2px solid;\n  color: #fff; }\n.nb-theme-default :host ::ng-deep .btn-primary {\n  width: 100% !important;\n  border: 2px solid; }\n.nb-theme-default :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-default :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid; }\n.nb-theme-default :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-default :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-default :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid; }\n.nb-theme-default :host .setting-width {\n  box-shadow: 0 8px 20px 0 0 2px 12px 0 #dfe3eb;\n  border: 0 solid; }\n.nb-theme-default :host .contry-code, .nb-theme-default :host .setting-content-text input {\n  border: 2px solid; }\n.nb-theme-default :host .title {\n  border-bottom: 1px solid; }\n.nb-theme-default :host input:focus + .slider {\n  box-shadow: 0 0 1px; }\n.nb-theme-default :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid; }\n.nb-theme-default :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid; }\n.nb-theme-default :host .wzrdgroup-link {\n  color: !important; }\n.nb-theme-default :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host body {\n  background: #2f296b; }\n.nb-theme-cosmic :host .platformHeader {\n  background: #3d3780; }\n.nb-theme-cosmic :host .footer-main {\n  background: #3d3780;\n  text-align: left; }\n.nb-theme-cosmic :host .slider {\n  background-color: #2f2879; }\n.nb-theme-cosmic :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-cosmic :host [nbButton].btn-primary, .nb-theme-cosmic :host .signin-btn, .nb-theme-cosmic :host [nbButton].btn-small {\n  background-color: #7659ff; }\n.nb-theme-cosmic :host [nbButton]:hover, .nb-theme-cosmic :host [nbButton].hover, .nb-theme-cosmic :host [nbButton].btn-primary:hover, .nb-theme-cosmic :host [nbButton].btn-primary.hover {\n  background-color: #836bff; }\n.nb-theme-cosmic :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-cosmic :host [nbButton].btn-outline.btn-primary.hover {\n  background: #836bff !important; }\n.nb-theme-cosmic :host nb-card-header {\n  border-bottom-color: #342e73; }\n.nb-theme-cosmic :host nb-card {\n  background: #3d3780;\n  box-shadow: 0 8px 20px 0 rgba(40, 37, 89, 0.6); }\n.nb-theme-cosmic :host [nbInput] {\n  background-color: #2f2879;\n  border: 2px solid #342e73; }\n.nb-theme-cosmic :host ::ng-deep button {\n  border: none; }\n.nb-theme-cosmic :host .email-address {\n  color: #a1a1e5;\n  font-weight: 500; }\n.nb-theme-cosmic :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #7659ff;\n  background-color: #3d3780;\n  color: #fff; }\n.nb-theme-cosmic :host ::ng-deep .btn-primary {\n  background-color: #7659ff;\n  width: 100% !important;\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host .setting-width {\n  background: #3d3780;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(40, 37, 89, 0.6);\n  border: 0 solid #3d3780; }\n.nb-theme-cosmic :host .contry-code, .nb-theme-cosmic :host .setting-content-text input {\n  background-color: #2f2879;\n  border: 2px solid #342e73; }\n.nb-theme-cosmic :host .title {\n  border-bottom: 1px solid #342e73; }\n.nb-theme-cosmic :host input:checked + .slider {\n  background-color: #914fef; }\n.nb-theme-cosmic :host input:focus + .slider {\n  box-shadow: 0 0 1px #914fef; }\n.nb-theme-cosmic :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #2f296b; }\n.nb-theme-cosmic :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #914fef;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #914fef; }\n.nb-theme-cosmic :host .wzrdgroup-link {\n  color: #d1d1ff !important; }\n.nb-theme-cosmic :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-armyCamo :host body {\n  background: #20434b; }\n.nb-theme-armyCamo :host .platformHeader {\n  background: #2c5c66; }\n.nb-theme-armyCamo :host .footer-main {\n  background: #2c5c66;\n  text-align: left; }\n.nb-theme-armyCamo :host .slider {\n  background-color: #244c55; }\n.nb-theme-armyCamo :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-armyCamo :host [nbButton].btn-primary, .nb-theme-armyCamo :host .signin-btn, .nb-theme-armyCamo :host [nbButton].btn-small {\n  background-color: #4d8793; }\n.nb-theme-armyCamo :host [nbButton]:hover, .nb-theme-armyCamo :host [nbButton].hover, .nb-theme-armyCamo :host [nbButton].btn-primary:hover, .nb-theme-armyCamo :host [nbButton].btn-primary.hover {\n  background-color: #6496a0; }\n.nb-theme-armyCamo :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #4d8793; }\n.nb-theme-armyCamo :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-armyCamo :host [nbButton].btn-outline.btn-primary.hover {\n  background: #6496a0 !important; }\n.nb-theme-armyCamo :host nb-card-header {\n  border-bottom-color: #20535e; }\n.nb-theme-armyCamo :host nb-card {\n  background: #2c5c66;\n  box-shadow: 0 8px 20px 0 rgba(22, 45, 50, 0.6); }\n.nb-theme-armyCamo :host [nbInput] {\n  background-color: #244c55;\n  border: 2px solid #20535e; }\n.nb-theme-armyCamo :host ::ng-deep button {\n  border: none; }\n.nb-theme-armyCamo :host .email-address {\n  color: #a4dae6;\n  font-weight: 500; }\n.nb-theme-armyCamo :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #4d8793;\n  background-color: #2c5c66;\n  color: #fff; }\n.nb-theme-armyCamo :host ::ng-deep .btn-primary {\n  background-color: #4d8793;\n  width: 100% !important;\n  border: 2px solid #4d8793; }\n.nb-theme-armyCamo :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-armyCamo :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #4d8793; }\n.nb-theme-armyCamo :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-armyCamo :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-armyCamo :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #4d8793; }\n.nb-theme-armyCamo :host .setting-width {\n  background: #2c5c66;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(22, 45, 50, 0.6);\n  border: 0 solid #2c5c66; }\n.nb-theme-armyCamo :host .contry-code, .nb-theme-armyCamo :host .setting-content-text input {\n  background-color: #244c55;\n  border: 2px solid #20535e; }\n.nb-theme-armyCamo :host .title {\n  border-bottom: 1px solid #20535e; }\n.nb-theme-armyCamo :host input:checked + .slider {\n  background-color: #4693a3; }\n.nb-theme-armyCamo :host input:focus + .slider {\n  box-shadow: 0 0 1px #4693a3; }\n.nb-theme-armyCamo :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #20434b; }\n.nb-theme-armyCamo :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #4693a3;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #4693a3; }\n.nb-theme-armyCamo :host .wzrdgroup-link {\n  color: #5fcbe2 !important; }\n.nb-theme-armyCamo :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Far_Above :host body {\n  background: #20434b; }\n.nb-theme-Far_Above :host .platformHeader {\n  background: #2c5c66; }\n.nb-theme-Far_Above :host .footer-main {\n  background: #2c5c66;\n  text-align: left; }\n.nb-theme-Far_Above :host .slider {\n  background-color: #244c55; }\n.nb-theme-Far_Above :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Far_Above :host [nbButton].btn-primary, .nb-theme-Far_Above :host .signin-btn, .nb-theme-Far_Above :host [nbButton].btn-small {\n  background-color: #4d8793; }\n.nb-theme-Far_Above :host [nbButton]:hover, .nb-theme-Far_Above :host [nbButton].hover, .nb-theme-Far_Above :host [nbButton].btn-primary:hover, .nb-theme-Far_Above :host [nbButton].btn-primary.hover {\n  background-color: #6496a0; }\n.nb-theme-Far_Above :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Far_Above :host [nbButton].btn-outline.btn-primary.hover {\n  background: #6496a0 !important; }\n.nb-theme-Far_Above :host nb-card-header {\n  border-bottom-color: #20535e; }\n.nb-theme-Far_Above :host nb-card {\n  background: #2c5c66;\n  box-shadow: 0 8px 20px 0 rgba(22, 45, 50, 0.6); }\n.nb-theme-Far_Above :host [nbInput] {\n  background-color: #244c55;\n  border: 2px solid #20535e; }\n.nb-theme-Far_Above :host ::ng-deep button {\n  border: none; }\n.nb-theme-Far_Above :host .email-address {\n  color: #a4dae6;\n  font-weight: 500; }\n.nb-theme-Far_Above :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #4d8793;\n  background-color: #2c5c66;\n  color: #fff; }\n.nb-theme-Far_Above :host ::ng-deep .btn-primary {\n  background-color: #4d8793;\n  width: 100% !important;\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host .setting-width {\n  background: #2c5c66;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(22, 45, 50, 0.6);\n  border: 0 solid #2c5c66; }\n.nb-theme-Far_Above :host .contry-code, .nb-theme-Far_Above :host .setting-content-text input {\n  background-color: #244c55;\n  border: 2px solid #20535e; }\n.nb-theme-Far_Above :host .title {\n  border-bottom: 1px solid #20535e; }\n.nb-theme-Far_Above :host input:checked + .slider {\n  background-color: #4693a3; }\n.nb-theme-Far_Above :host input:focus + .slider {\n  box-shadow: 0 0 1px #4693a3; }\n.nb-theme-Far_Above :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #20434b; }\n.nb-theme-Far_Above :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #4693a3;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #4693a3; }\n.nb-theme-Far_Above :host .wzrdgroup-link {\n  color: #5fcbe2 !important; }\n.nb-theme-Far_Above :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Vortex :host body {\n  background: #25101b; }\n.nb-theme-Vortex :host .platformHeader {\n  background: #301523; }\n.nb-theme-Vortex :host .footer-main {\n  background: #301523;\n  text-align: left; }\n.nb-theme-Vortex :host .slider {\n  background-color: #29121e; }\n.nb-theme-Vortex :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Vortex :host [nbButton].btn-primary, .nb-theme-Vortex :host .signin-btn, .nb-theme-Vortex :host [nbButton].btn-small {\n  background-color: #6d3150; }\n.nb-theme-Vortex :host [nbButton]:hover, .nb-theme-Vortex :host [nbButton].hover, .nb-theme-Vortex :host [nbButton].btn-primary:hover, .nb-theme-Vortex :host [nbButton].btn-primary.hover {\n  background-color: #7f4c67; }\n.nb-theme-Vortex :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Vortex :host [nbButton].btn-outline.btn-primary.hover {\n  background: #7f4c67 !important; }\n.nb-theme-Vortex :host nb-card-header {\n  border-bottom-color: #24101a; }\n.nb-theme-Vortex :host nb-card {\n  background: #301523;\n  box-shadow: 0 8px 20px 0 rgba(24, 10, 17, 0.6); }\n.nb-theme-Vortex :host [nbInput] {\n  background-color: #29121e;\n  border: 2px solid #24101a; }\n.nb-theme-Vortex :host ::ng-deep button {\n  border: none; }\n.nb-theme-Vortex :host .email-address {\n  color: #dabbcb;\n  font-weight: 500; }\n.nb-theme-Vortex :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #6d3150;\n  background-color: #301523;\n  color: #fff; }\n.nb-theme-Vortex :host ::ng-deep .btn-primary {\n  background-color: #6d3150;\n  width: 100% !important;\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host .setting-width {\n  background: #301523;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(24, 10, 17, 0.6);\n  border: 0 solid #301523; }\n.nb-theme-Vortex :host .contry-code, .nb-theme-Vortex :host .setting-content-text input {\n  background-color: #29121e;\n  border: 2px solid #24101a; }\n.nb-theme-Vortex :host .title {\n  border-bottom: 1px solid #24101a; }\n.nb-theme-Vortex :host input:checked + .slider {\n  background-color: #9b4572; }\n.nb-theme-Vortex :host input:focus + .slider {\n  box-shadow: 0 0 1px #9b4572; }\n.nb-theme-Vortex :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #25101b; }\n.nb-theme-Vortex :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #9b4572;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #9b4572; }\n.nb-theme-Vortex :host .wzrdgroup-link {\n  color: #cb8cad !important; }\n.nb-theme-Vortex :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Fireball :host body {\n  background: #6b3928; }\n.nb-theme-Fireball :host .platformHeader {\n  background: #8b4a34; }\n.nb-theme-Fireball :host .footer-main {\n  background: #8b4a34;\n  text-align: left; }\n.nb-theme-Fireball :host .slider {\n  background-color: #78402d; }\n.nb-theme-Fireball :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Fireball :host [nbButton].btn-primary, .nb-theme-Fireball :host .signin-btn, .nb-theme-Fireball :host [nbButton].btn-small {\n  background-color: #aa583d; }\n.nb-theme-Fireball :host [nbButton]:hover, .nb-theme-Fireball :host [nbButton].hover, .nb-theme-Fireball :host [nbButton].btn-primary:hover, .nb-theme-Fireball :host [nbButton].btn-primary.hover {\n  background-color: #b36e57; }\n.nb-theme-Fireball :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Fireball :host [nbButton].btn-outline.btn-primary.hover {\n  background: #b36e57 !important; }\n.nb-theme-Fireball :host nb-card-header {\n  border-bottom-color: #753e2c; }\n.nb-theme-Fireball :host nb-card {\n  background: #8b4a34;\n  box-shadow: 0 8px 20px 0 rgba(68, 36, 25, 0.6); }\n.nb-theme-Fireball :host [nbInput] {\n  background-color: #78402d;\n  border: 2px solid #753e2c; }\n.nb-theme-Fireball :host ::ng-deep button {\n  border: none; }\n.nb-theme-Fireball :host .email-address {\n  color: #edccc0;\n  font-weight: 500; }\n.nb-theme-Fireball :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #aa583d;\n  background-color: #8b4a34;\n  color: #fff; }\n.nb-theme-Fireball :host ::ng-deep .btn-primary {\n  background-color: #aa583d;\n  width: 100% !important;\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host .setting-width {\n  background: #8b4a34;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(68, 36, 25, 0.6);\n  border: 0 solid #8b4a34; }\n.nb-theme-Fireball :host .contry-code, .nb-theme-Fireball :host .setting-content-text input {\n  background-color: #78402d;\n  border: 2px solid #753e2c; }\n.nb-theme-Fireball :host .title {\n  border-bottom: 1px solid #753e2c; }\n.nb-theme-Fireball :host input:checked + .slider {\n  background-color: #d56d4a; }\n.nb-theme-Fireball :host input:focus + .slider {\n  box-shadow: 0 0 1px #d56d4a; }\n.nb-theme-Fireball :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #6b3928; }\n.nb-theme-Fireball :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #d56d4a;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #d56d4a; }\n.nb-theme-Fireball :host .wzrdgroup-link {\n  color: #f1ae97 !important; }\n.nb-theme-Fireball :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Hex_World :host body {\n  background: #1c1c1c; }\n.nb-theme-Hex_World :host .platformHeader {\n  background: #282828; }\n.nb-theme-Hex_World :host .footer-main {\n  background: #282828;\n  text-align: left; }\n.nb-theme-Hex_World :host .slider {\n  background-color: #202020; }\n.nb-theme-Hex_World :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Hex_World :host [nbButton].btn-primary, .nb-theme-Hex_World :host .signin-btn, .nb-theme-Hex_World :host [nbButton].btn-small {\n  background-color: #636161; }\n.nb-theme-Hex_World :host [nbButton]:hover, .nb-theme-Hex_World :host [nbButton].hover, .nb-theme-Hex_World :host [nbButton].btn-primary:hover, .nb-theme-Hex_World :host [nbButton].btn-primary.hover {\n  background-color: #777575; }\n.nb-theme-Hex_World :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Hex_World :host [nbButton].btn-outline.btn-primary.hover {\n  background: #777575 !important; }\n.nb-theme-Hex_World :host nb-card-header {\n  border-bottom-color: #212121; }\n.nb-theme-Hex_World :host nb-card {\n  background: #282828;\n  box-shadow: 0 8px 20px 0 rgba(20, 20, 20, 0.6); }\n.nb-theme-Hex_World :host [nbInput] {\n  background-color: #202020;\n  border: 2px solid #212121; }\n.nb-theme-Hex_World :host ::ng-deep button {\n  border: none; }\n.nb-theme-Hex_World :host .email-address {\n  color: #cccccc;\n  font-weight: 500; }\n.nb-theme-Hex_World :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #636161;\n  background-color: #282828;\n  color: #fff; }\n.nb-theme-Hex_World :host ::ng-deep .btn-primary {\n  background-color: #636161;\n  width: 100% !important;\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host .setting-width {\n  background: #282828;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(20, 20, 20, 0.6);\n  border: 0 solid #282828; }\n.nb-theme-Hex_World :host .contry-code, .nb-theme-Hex_World :host .setting-content-text input {\n  background-color: #202020;\n  border: 2px solid #212121; }\n.nb-theme-Hex_World :host .title {\n  border-bottom: 1px solid #212121; }\n.nb-theme-Hex_World :host input:checked + .slider {\n  background-color: #8d8c8c; }\n.nb-theme-Hex_World :host input:focus + .slider {\n  box-shadow: 0 0 1px #8d8c8c; }\n.nb-theme-Hex_World :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #1c1c1c; }\n.nb-theme-Hex_World :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #8d8c8c;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #8d8c8c; }\n.nb-theme-Hex_World :host .wzrdgroup-link {\n  color: #afaeae !important; }\n.nb-theme-Hex_World :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Formula_of_Life :host body {\n  background: #4d4433; }\n.nb-theme-Formula_of_Life :host .platformHeader {\n  background: #665c45; }\n.nb-theme-Formula_of_Life :host .footer-main {\n  background: #665c45;\n  text-align: left; }\n.nb-theme-Formula_of_Life :host .slider {\n  background-color: #564d39; }\n.nb-theme-Formula_of_Life :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Formula_of_Life :host [nbButton].btn-primary, .nb-theme-Formula_of_Life :host .signin-btn, .nb-theme-Formula_of_Life :host [nbButton].btn-small {\n  background-color: #84785c; }\n.nb-theme-Formula_of_Life :host [nbButton]:hover, .nb-theme-Formula_of_Life :host [nbButton].hover, .nb-theme-Formula_of_Life :host [nbButton].btn-primary:hover, .nb-theme-Formula_of_Life :host [nbButton].btn-primary.hover {\n  background-color: #938971; }\n.nb-theme-Formula_of_Life :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Formula_of_Life :host [nbButton].btn-outline.btn-primary.hover {\n  background: #938971 !important; }\n.nb-theme-Formula_of_Life :host nb-card-header {\n  border-bottom-color: #4a4231; }\n.nb-theme-Formula_of_Life :host nb-card {\n  background: #665c45;\n  box-shadow: 0 8px 20px 0 rgba(50, 45, 34, 0.6); }\n.nb-theme-Formula_of_Life :host [nbInput] {\n  background-color: #564d39;\n  border: 2px solid #4a4231; }\n.nb-theme-Formula_of_Life :host ::ng-deep button {\n  border: none; }\n.nb-theme-Formula_of_Life :host .email-address {\n  color: #d8cfb9;\n  font-weight: 500; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #84785c;\n  background-color: #665c45;\n  color: #fff; }\n.nb-theme-Formula_of_Life :host ::ng-deep .btn-primary {\n  background-color: #84785c;\n  width: 100% !important;\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host .setting-width {\n  background: #665c45;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(50, 45, 34, 0.6);\n  border: 0 solid #665c45; }\n.nb-theme-Formula_of_Life :host .contry-code, .nb-theme-Formula_of_Life :host .setting-content-text input {\n  background-color: #564d39;\n  border: 2px solid #4a4231; }\n.nb-theme-Formula_of_Life :host .title {\n  border-bottom: 1px solid #4a4231; }\n.nb-theme-Formula_of_Life :host input:checked + .slider {\n  background-color: #ae9a6c; }\n.nb-theme-Formula_of_Life :host input:focus + .slider {\n  box-shadow: 0 0 1px #ae9a6c; }\n.nb-theme-Formula_of_Life :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #4d4433; }\n.nb-theme-Formula_of_Life :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #ae9a6c;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #ae9a6c; }\n.nb-theme-Formula_of_Life :host .wzrdgroup-link {\n  color: #c7b489 !important; }\n.nb-theme-Formula_of_Life :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Connection :host body {\n  background: #0d2032; }\n.nb-theme-Connection :host .platformHeader {\n  background: #112940; }\n.nb-theme-Connection :host .footer-main {\n  background: #112940;\n  text-align: left; }\n.nb-theme-Connection :host .slider {\n  background-color: #0f2438; }\n.nb-theme-Connection :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Connection :host [nbButton].btn-primary, .nb-theme-Connection :host .signin-btn, .nb-theme-Connection :host [nbButton].btn-small {\n  background-color: #254462; }\n.nb-theme-Connection :host [nbButton]:hover, .nb-theme-Connection :host [nbButton].hover, .nb-theme-Connection :host [nbButton].btn-primary:hover, .nb-theme-Connection :host [nbButton].btn-primary.hover {\n  background-color: #425d76; }\n.nb-theme-Connection :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #254462; }\n.nb-theme-Connection :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Connection :host [nbButton].btn-outline.btn-primary.hover {\n  background: #425d76 !important; }\n.nb-theme-Connection :host nb-card-header {\n  border-bottom-color: #0e2133; }\n.nb-theme-Connection :host nb-card {\n  background: #112940;\n  box-shadow: 0 8px 20px 0 rgba(8, 20, 31, 0.6); }\n.nb-theme-Connection :host [nbInput] {\n  background-color: #0f2438;\n  border: 2px solid #0e2133; }\n.nb-theme-Connection :host ::ng-deep button {\n  border: none; }\n.nb-theme-Connection :host .email-address {\n  color: #b7c9db;\n  font-weight: 500; }\n.nb-theme-Connection :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #254462;\n  background-color: #112940;\n  color: #fff; }\n.nb-theme-Connection :host ::ng-deep .btn-primary {\n  background-color: #254462;\n  width: 100% !important;\n  border: 2px solid #254462; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Connection :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #254462; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Connection :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Connection :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #254462; }\n.nb-theme-Connection :host .setting-width {\n  background: #112940;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(8, 20, 31, 0.6);\n  border: 0 solid #112940; }\n.nb-theme-Connection :host .contry-code, .nb-theme-Connection :host .setting-content-text input {\n  background-color: #0f2438;\n  border: 2px solid #0e2133; }\n.nb-theme-Connection :host .title {\n  border-bottom: 1px solid #0e2133; }\n.nb-theme-Connection :host input:checked + .slider {\n  background-color: #3f6890; }\n.nb-theme-Connection :host input:focus + .slider {\n  box-shadow: 0 0 1px #3f6890; }\n.nb-theme-Connection :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #0d2032; }\n.nb-theme-Connection :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #3f6890;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #3f6890; }\n.nb-theme-Connection :host .wzrdgroup-link {\n  color: #84a9cd !important; }\n.nb-theme-Connection :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Enchanted_Dream :host body {\n  background: #3e3b46; }\n.nb-theme-Enchanted_Dream :host .platformHeader {\n  background: #4c4957; }\n.nb-theme-Enchanted_Dream :host .footer-main {\n  background: #4c4957;\n  text-align: left; }\n.nb-theme-Enchanted_Dream :host .slider {\n  background-color: #45424f; }\n.nb-theme-Enchanted_Dream :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Enchanted_Dream :host [nbButton].btn-primary, .nb-theme-Enchanted_Dream :host .signin-btn, .nb-theme-Enchanted_Dream :host [nbButton].btn-small {\n  background-color: #64626f; }\n.nb-theme-Enchanted_Dream :host [nbButton]:hover, .nb-theme-Enchanted_Dream :host [nbButton].hover, .nb-theme-Enchanted_Dream :host [nbButton].btn-primary:hover, .nb-theme-Enchanted_Dream :host [nbButton].btn-primary.hover {\n  background-color: #787681; }\n.nb-theme-Enchanted_Dream :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Enchanted_Dream :host [nbButton].btn-outline.btn-primary.hover {\n  background: #787681 !important; }\n.nb-theme-Enchanted_Dream :host nb-card-header {\n  border-bottom-color: #423f4b; }\n.nb-theme-Enchanted_Dream :host nb-card {\n  background: #4c4957;\n  box-shadow: 0 8px 20px 0 rgba(37, 36, 43, 0.6); }\n.nb-theme-Enchanted_Dream :host [nbInput] {\n  background-color: #45424f;\n  border: 2px solid #423f4b; }\n.nb-theme-Enchanted_Dream :host ::ng-deep button {\n  border: none; }\n.nb-theme-Enchanted_Dream :host .email-address {\n  color: #d1d0d7;\n  font-weight: 500; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #64626f;\n  background-color: #4c4957;\n  color: #fff; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .btn-primary {\n  background-color: #64626f;\n  width: 100% !important;\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host .setting-width {\n  background: #4c4957;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(37, 36, 43, 0.6);\n  border: 0 solid #4c4957; }\n.nb-theme-Enchanted_Dream :host .contry-code, .nb-theme-Enchanted_Dream :host .setting-content-text input {\n  background-color: #45424f;\n  border: 2px solid #423f4b; }\n.nb-theme-Enchanted_Dream :host .title {\n  border-bottom: 1px solid #423f4b; }\n.nb-theme-Enchanted_Dream :host input:checked + .slider {\n  background-color: #928f9f; }\n.nb-theme-Enchanted_Dream :host input:focus + .slider {\n  box-shadow: 0 0 1px #928f9f; }\n.nb-theme-Enchanted_Dream :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #3e3b46; }\n.nb-theme-Enchanted_Dream :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #928f9f;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #928f9f; }\n.nb-theme-Enchanted_Dream :host .wzrdgroup-link {\n  color: #b9b7c4 !important; }\n.nb-theme-Enchanted_Dream :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Infinity :host body {\n  background: #0a0a0a; }\n.nb-theme-Infinity :host .platformHeader {\n  background: #121212; }\n.nb-theme-Infinity :host .footer-main {\n  background: #121212;\n  text-align: left; }\n.nb-theme-Infinity :host .slider {\n  background-color: #0b0b0b; }\n.nb-theme-Infinity :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Infinity :host [nbButton].btn-primary, .nb-theme-Infinity :host .signin-btn, .nb-theme-Infinity :host [nbButton].btn-small {\n  background-color: #484747; }\n.nb-theme-Infinity :host [nbButton]:hover, .nb-theme-Infinity :host [nbButton].hover, .nb-theme-Infinity :host [nbButton].btn-primary:hover, .nb-theme-Infinity :host [nbButton].btn-primary.hover {\n  background-color: #605f5f; }\n.nb-theme-Infinity :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Infinity :host [nbButton].btn-outline.btn-primary.hover {\n  background: #605f5f !important; }\n.nb-theme-Infinity :host nb-card-header {\n  border-bottom-color: #000000; }\n.nb-theme-Infinity :host nb-card {\n  background: #121212;\n  box-shadow: 0 8px 20px 0 rgba(9, 9, 9, 0.6); }\n.nb-theme-Infinity :host [nbInput] {\n  background-color: #0b0b0b;\n  border: 2px solid #000000; }\n.nb-theme-Infinity :host ::ng-deep button {\n  border: none; }\n.nb-theme-Infinity :host .email-address {\n  color: #c6c6c6;\n  font-weight: 500; }\n.nb-theme-Infinity :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #484747;\n  background-color: #121212;\n  color: #fff; }\n.nb-theme-Infinity :host ::ng-deep .btn-primary {\n  background-color: #484747;\n  width: 100% !important;\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host .setting-width {\n  background: #121212;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(9, 9, 9, 0.6);\n  border: 0 solid #121212; }\n.nb-theme-Infinity :host .contry-code, .nb-theme-Infinity :host .setting-content-text input {\n  background-color: #0b0b0b;\n  border: 2px solid #000000; }\n.nb-theme-Infinity :host .title {\n  border-bottom: 1px solid #000000; }\n.nb-theme-Infinity :host input:checked + .slider {\n  background-color: #454444; }\n.nb-theme-Infinity :host input:focus + .slider {\n  box-shadow: 0 0 1px #454444; }\n.nb-theme-Infinity :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #0a0a0a; }\n.nb-theme-Infinity :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #454444;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #454444; }\n.nb-theme-Infinity :host .wzrdgroup-link {\n  color: #a2a2a2 !important; }\n.nb-theme-Infinity :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Pirate :host body {\n  background: #1a4b4b; }\n.nb-theme-Pirate :host .platformHeader {\n  background: #276e6e; }\n.nb-theme-Pirate :host .footer-main {\n  background: #276e6e;\n  text-align: left; }\n.nb-theme-Pirate :host .slider {\n  background-color: #1d5454; }\n.nb-theme-Pirate :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Pirate :host [nbButton].btn-primary, .nb-theme-Pirate :host .signin-btn, .nb-theme-Pirate :host [nbButton].btn-small {\n  background-color: #3a8484; }\n.nb-theme-Pirate :host [nbButton]:hover, .nb-theme-Pirate :host [nbButton].hover, .nb-theme-Pirate :host [nbButton].btn-primary:hover, .nb-theme-Pirate :host [nbButton].btn-primary.hover {\n  background-color: #549393; }\n.nb-theme-Pirate :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Pirate :host [nbButton].btn-outline.btn-primary.hover {\n  background: #549393 !important; }\n.nb-theme-Pirate :host nb-card-header {\n  border-bottom-color: #194747; }\n.nb-theme-Pirate :host nb-card {\n  background: #276e6e;\n  box-shadow: 0 8px 20px 0 rgba(19, 54, 54, 0.6); }\n.nb-theme-Pirate :host [nbInput] {\n  background-color: #1d5454;\n  border: 2px solid #194747; }\n.nb-theme-Pirate :host ::ng-deep button {\n  border: none; }\n.nb-theme-Pirate :host .email-address {\n  color: #9ec9c9;\n  font-weight: 500; }\n.nb-theme-Pirate :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #3a8484;\n  background-color: #276e6e;\n  color: #fff; }\n.nb-theme-Pirate :host ::ng-deep .btn-primary {\n  background-color: #3a8484;\n  width: 100% !important;\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host .setting-width {\n  background: #276e6e;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(19, 54, 54, 0.6);\n  border: 0 solid #276e6e; }\n.nb-theme-Pirate :host .contry-code, .nb-theme-Pirate :host .setting-content-text input {\n  background-color: #1d5454;\n  border: 2px solid #194747; }\n.nb-theme-Pirate :host .title {\n  border-bottom: 1px solid #194747; }\n.nb-theme-Pirate :host input:checked + .slider {\n  background-color: #3fbaba; }\n.nb-theme-Pirate :host input:focus + .slider {\n  box-shadow: 0 0 1px #3fbaba; }\n.nb-theme-Pirate :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #1a4b4b; }\n.nb-theme-Pirate :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #3fbaba;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #3fbaba; }\n.nb-theme-Pirate :host .wzrdgroup-link {\n  color: #53a8a8 !important; }\n.nb-theme-Pirate :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Tron :host body {\n  background: #303030; }\n.nb-theme-Tron :host .platformHeader {\n  background: #171717; }\n.nb-theme-Tron :host .footer-main {\n  background: #171717;\n  text-align: left; }\n.nb-theme-Tron :host .slider {\n  background-color: #363636; }\n.nb-theme-Tron :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Tron :host [nbButton].btn-primary, .nb-theme-Tron :host .signin-btn, .nb-theme-Tron :host [nbButton].btn-small {\n  background-color: #484747; }\n.nb-theme-Tron :host [nbButton]:hover, .nb-theme-Tron :host [nbButton].hover, .nb-theme-Tron :host [nbButton].btn-primary:hover, .nb-theme-Tron :host [nbButton].btn-primary.hover {\n  background-color: #605f5f; }\n.nb-theme-Tron :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #484747; }\n.nb-theme-Tron :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Tron :host [nbButton].btn-outline.btn-primary.hover {\n  background: #605f5f !important; }\n.nb-theme-Tron :host nb-card-header {\n  border-bottom-color: #2f2f2f; }\n.nb-theme-Tron :host nb-card {\n  background: #171717;\n  box-shadow: 0 8px 20px 0 rgba(11, 11, 11, 0.6); }\n.nb-theme-Tron :host [nbInput] {\n  background-color: #363636;\n  border: 2px solid #2f2f2f; }\n.nb-theme-Tron :host ::ng-deep button {\n  border: none; }\n.nb-theme-Tron :host .email-address {\n  color: #a6cbd3;\n  font-weight: 500; }\n.nb-theme-Tron :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #484747;\n  background-color: #171717;\n  color: #fff; }\n.nb-theme-Tron :host ::ng-deep .btn-primary {\n  background-color: #484747;\n  width: 100% !important;\n  border: 2px solid #484747; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Tron :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #484747; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Tron :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Tron :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #484747; }\n.nb-theme-Tron :host .setting-width {\n  background: #171717;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(11, 11, 11, 0.6);\n  border: 0 solid #171717; }\n.nb-theme-Tron :host .contry-code, .nb-theme-Tron :host .setting-content-text input {\n  background-color: #363636;\n  border: 2px solid #2f2f2f; }\n.nb-theme-Tron :host .title {\n  border-bottom: 1px solid #2f2f2f; }\n.nb-theme-Tron :host input:checked + .slider {\n  background-color: #61d6ea; }\n.nb-theme-Tron :host input:focus + .slider {\n  box-shadow: 0 0 1px #61d6ea; }\n.nb-theme-Tron :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #303030; }\n.nb-theme-Tron :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #61d6ea;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #61d6ea; }\n.nb-theme-Tron :host .wzrdgroup-link {\n  color: #62adbc !important; }\n.nb-theme-Tron :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Uncovering_Secrets :host body {\n  background: #131723; }\n.nb-theme-Uncovering_Secrets :host .platformHeader {\n  background: #191f2e; }\n.nb-theme-Uncovering_Secrets :host .footer-main {\n  background: #191f2e;\n  text-align: left; }\n.nb-theme-Uncovering_Secrets :host .slider {\n  background-color: #151a27; }\n.nb-theme-Uncovering_Secrets :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Uncovering_Secrets :host [nbButton].btn-primary, .nb-theme-Uncovering_Secrets :host .signin-btn, .nb-theme-Uncovering_Secrets :host [nbButton].btn-small {\n  background-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host [nbButton]:hover, .nb-theme-Uncovering_Secrets :host [nbButton].hover, .nb-theme-Uncovering_Secrets :host [nbButton].btn-primary:hover, .nb-theme-Uncovering_Secrets :host [nbButton].btn-primary.hover {\n  background-color: #5d6e9c; }\n.nb-theme-Uncovering_Secrets :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Uncovering_Secrets :host [nbButton].btn-outline.btn-primary.hover {\n  background: #5d6e9c !important; }\n.nb-theme-Uncovering_Secrets :host nb-card-header {\n  border-bottom-color: #131824; }\n.nb-theme-Uncovering_Secrets :host nb-card {\n  background: #191f2e;\n  box-shadow: 0 8px 20px 0 rgba(12, 15, 22, 0.6); }\n.nb-theme-Uncovering_Secrets :host [nbInput] {\n  background-color: #151a27;\n  border: 2px solid #131824; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep button {\n  border: none; }\n.nb-theme-Uncovering_Secrets :host .email-address {\n  color: #afbad4;\n  font-weight: 500; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #44598e;\n  background-color: #191f2e;\n  color: #fff; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .btn-primary {\n  background-color: #44598e;\n  width: 100% !important;\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host .setting-width {\n  background: #191f2e;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(12, 15, 22, 0.6);\n  border: 0 solid #191f2e; }\n.nb-theme-Uncovering_Secrets :host .contry-code, .nb-theme-Uncovering_Secrets :host .setting-content-text input {\n  background-color: #151a27;\n  border: 2px solid #131824; }\n.nb-theme-Uncovering_Secrets :host .title {\n  border-bottom: 1px solid #131824; }\n.nb-theme-Uncovering_Secrets :host input:checked + .slider {\n  background-color: #4a5f93; }\n.nb-theme-Uncovering_Secrets :host input:focus + .slider {\n  box-shadow: 0 0 1px #4a5f93; }\n.nb-theme-Uncovering_Secrets :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #131723; }\n.nb-theme-Uncovering_Secrets :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #4a5f93;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #4a5f93; }\n.nb-theme-Uncovering_Secrets :host .wzrdgroup-link {\n  color: #758abe !important; }\n.nb-theme-Uncovering_Secrets :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-United_Colours :host body {\n  background: #332d48; }\n.nb-theme-United_Colours :host .platformHeader {\n  background: #423c5e; }\n.nb-theme-United_Colours :host .footer-main {\n  background: #423c5e;\n  text-align: left; }\n.nb-theme-United_Colours :host .slider {\n  background-color: #393351; }\n.nb-theme-United_Colours :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-United_Colours :host [nbButton].btn-primary, .nb-theme-United_Colours :host .signin-btn, .nb-theme-United_Colours :host [nbButton].btn-small {\n  background-color: #9188bb; }\n.nb-theme-United_Colours :host [nbButton]:hover, .nb-theme-United_Colours :host [nbButton].hover, .nb-theme-United_Colours :host [nbButton].btn-primary:hover, .nb-theme-United_Colours :host [nbButton].btn-primary.hover {\n  background-color: #9e96c2; }\n.nb-theme-United_Colours :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-United_Colours :host [nbButton].btn-outline.btn-primary.hover {\n  background: #9e96c2 !important; }\n.nb-theme-United_Colours :host nb-card-header {\n  border-bottom-color: #3a3553; }\n.nb-theme-United_Colours :host nb-card {\n  background: #423c5e;\n  box-shadow: 0 8px 20px 0 rgba(32, 29, 46, 0.6); }\n.nb-theme-United_Colours :host [nbInput] {\n  background-color: #393351;\n  border: 2px solid #3a3553; }\n.nb-theme-United_Colours :host ::ng-deep button {\n  border: none; }\n.nb-theme-United_Colours :host .email-address {\n  color: #cac5de;\n  font-weight: 500; }\n.nb-theme-United_Colours :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #9188bb;\n  background-color: #423c5e;\n  color: #fff; }\n.nb-theme-United_Colours :host ::ng-deep .btn-primary {\n  background-color: #9188bb;\n  width: 100% !important;\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host .setting-width {\n  background: #423c5e;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(32, 29, 46, 0.6);\n  border: 0 solid #423c5e; }\n.nb-theme-United_Colours :host .contry-code, .nb-theme-United_Colours :host .setting-content-text input {\n  background-color: #393351;\n  border: 2px solid #3a3553; }\n.nb-theme-United_Colours :host .title {\n  border-bottom: 1px solid #3a3553; }\n.nb-theme-United_Colours :host input:checked + .slider {\n  background-color: #8c80c4; }\n.nb-theme-United_Colours :host input:focus + .slider {\n  box-shadow: 0 0 1px #8c80c4; }\n.nb-theme-United_Colours :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #332d48; }\n.nb-theme-United_Colours :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #8c80c4;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #8c80c4; }\n.nb-theme-United_Colours :host .wzrdgroup-link {\n  color: #aaa1d3 !important; }\n.nb-theme-United_Colours :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Palm_Trees :host body {\n  background: #1d4143; }\n.nb-theme-Palm_Trees :host .platformHeader {\n  background: #275659; }\n.nb-theme-Palm_Trees :host .footer-main {\n  background: #275659;\n  text-align: left; }\n.nb-theme-Palm_Trees :host .slider {\n  background-color: #21494c; }\n.nb-theme-Palm_Trees :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Palm_Trees :host [nbButton].btn-primary, .nb-theme-Palm_Trees :host .signin-btn, .nb-theme-Palm_Trees :host [nbButton].btn-small {\n  background-color: #438f93; }\n.nb-theme-Palm_Trees :host [nbButton]:hover, .nb-theme-Palm_Trees :host [nbButton].hover, .nb-theme-Palm_Trees :host [nbButton].btn-primary:hover, .nb-theme-Palm_Trees :host [nbButton].btn-primary.hover {\n  background-color: #5c9ca0; }\n.nb-theme-Palm_Trees :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Palm_Trees :host [nbButton].btn-outline.btn-primary.hover {\n  background: #5c9ca0 !important; }\n.nb-theme-Palm_Trees :host nb-card-header {\n  border-bottom-color: #21484b; }\n.nb-theme-Palm_Trees :host nb-card {\n  background: #275659;\n  box-shadow: 0 8px 20px 0 rgba(19, 42, 43, 0.6); }\n.nb-theme-Palm_Trees :host [nbInput] {\n  background-color: #21494c;\n  border: 2px solid #21484b; }\n.nb-theme-Palm_Trees :host ::ng-deep button {\n  border: none; }\n.nb-theme-Palm_Trees :host .email-address {\n  color: #badcde;\n  font-weight: 500; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #438f93;\n  background-color: #275659;\n  color: #fff; }\n.nb-theme-Palm_Trees :host ::ng-deep .btn-primary {\n  background-color: #438f93;\n  width: 100% !important;\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host .setting-width {\n  background: #275659;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(19, 42, 43, 0.6);\n  border: 0 solid #275659; }\n.nb-theme-Palm_Trees :host .contry-code, .nb-theme-Palm_Trees :host .setting-content-text input {\n  background-color: #21494c;\n  border: 2px solid #21484b; }\n.nb-theme-Palm_Trees :host .title {\n  border-bottom: 1px solid #21484b; }\n.nb-theme-Palm_Trees :host input:checked + .slider {\n  background-color: #54aaaf; }\n.nb-theme-Palm_Trees :host input:focus + .slider {\n  box-shadow: 0 0 1px #54aaaf; }\n.nb-theme-Palm_Trees :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #1d4143; }\n.nb-theme-Palm_Trees :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #54aaaf;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #54aaaf; }\n.nb-theme-Palm_Trees :host .wzrdgroup-link {\n  color: #8acfd3 !important; }\n.nb-theme-Palm_Trees :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Analyst :host body {\n  background: #080f21; }\n.nb-theme-Analyst :host .platformHeader {\n  background: #0b152e; }\n.nb-theme-Analyst :host .footer-main {\n  background: #0b152e;\n  text-align: left; }\n.nb-theme-Analyst :host .slider {\n  background-color: #091125; }\n.nb-theme-Analyst :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Analyst :host [nbButton].btn-primary, .nb-theme-Analyst :host .signin-btn, .nb-theme-Analyst :host [nbButton].btn-small {\n  background-color: #17264b; }\n.nb-theme-Analyst :host [nbButton]:hover, .nb-theme-Analyst :host [nbButton].hover, .nb-theme-Analyst :host [nbButton].btn-primary:hover, .nb-theme-Analyst :host [nbButton].btn-primary.hover {\n  background-color: #364363; }\n.nb-theme-Analyst :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Analyst :host [nbButton].btn-outline.btn-primary.hover {\n  background: #364363 !important; }\n.nb-theme-Analyst :host nb-card-header {\n  border-bottom-color: #080f21; }\n.nb-theme-Analyst :host nb-card {\n  background: #0b152e;\n  box-shadow: 0 8px 20px 0 rgba(6, 10, 22, 0.6); }\n.nb-theme-Analyst :host [nbInput] {\n  background-color: #091125;\n  border: 2px solid #080f21; }\n.nb-theme-Analyst :host ::ng-deep button {\n  border: none; }\n.nb-theme-Analyst :host .email-address {\n  color: #a3afcb;\n  font-weight: 500; }\n.nb-theme-Analyst :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #17264b;\n  background-color: #0b152e;\n  color: #fff; }\n.nb-theme-Analyst :host ::ng-deep .btn-primary {\n  background-color: #17264b;\n  width: 100% !important;\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host .setting-width {\n  background: #0b152e;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(6, 10, 22, 0.6);\n  border: 0 solid #0b152e; }\n.nb-theme-Analyst :host .contry-code, .nb-theme-Analyst :host .setting-content-text input {\n  background-color: #091125;\n  border: 2px solid #080f21; }\n.nb-theme-Analyst :host .title {\n  border-bottom: 1px solid #080f21; }\n.nb-theme-Analyst :host input:checked + .slider {\n  background-color: #2c437a; }\n.nb-theme-Analyst :host input:focus + .slider {\n  box-shadow: 0 0 1px #2c437a; }\n.nb-theme-Analyst :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #080f21; }\n.nb-theme-Analyst :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #2c437a;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #2c437a; }\n.nb-theme-Analyst :host .wzrdgroup-link {\n  color: #5c74ac !important; }\n.nb-theme-Analyst :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Voltage :host body {\n  background: #161822; }\n.nb-theme-Voltage :host .platformHeader {\n  background: #1e202d; }\n.nb-theme-Voltage :host .footer-main {\n  background: #1e202d;\n  text-align: left; }\n.nb-theme-Voltage :host .slider {\n  background-color: #191b26; }\n.nb-theme-Voltage :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Voltage :host [nbButton].btn-primary, .nb-theme-Voltage :host .signin-btn, .nb-theme-Voltage :host [nbButton].btn-small {\n  background-color: #383b4a; }\n.nb-theme-Voltage :host [nbButton]:hover, .nb-theme-Voltage :host [nbButton].hover, .nb-theme-Voltage :host [nbButton].btn-primary:hover, .nb-theme-Voltage :host [nbButton].btn-primary.hover {\n  background-color: #525562; }\n.nb-theme-Voltage :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Voltage :host [nbButton].btn-outline.btn-primary.hover {\n  background: #525562 !important; }\n.nb-theme-Voltage :host nb-card-header {\n  border-bottom-color: #191a25; }\n.nb-theme-Voltage :host nb-card {\n  background: #1e202d;\n  box-shadow: 0 8px 20px 0 rgba(15, 15, 22, 0.6); }\n.nb-theme-Voltage :host [nbInput] {\n  background-color: #191b26;\n  border: 2px solid #191a25; }\n.nb-theme-Voltage :host ::ng-deep button {\n  border: none; }\n.nb-theme-Voltage :host .email-address {\n  color: #bebfc6;\n  font-weight: 500; }\n.nb-theme-Voltage :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #383b4a;\n  background-color: #1e202d;\n  color: #fff; }\n.nb-theme-Voltage :host ::ng-deep .btn-primary {\n  background-color: #383b4a;\n  width: 100% !important;\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host .setting-width {\n  background: #1e202d;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(15, 15, 22, 0.6);\n  border: 0 solid #1e202d; }\n.nb-theme-Voltage :host .contry-code, .nb-theme-Voltage :host .setting-content-text input {\n  background-color: #191b26;\n  border: 2px solid #191a25; }\n.nb-theme-Voltage :host .title {\n  border-bottom: 1px solid #191a25; }\n.nb-theme-Voltage :host input:checked + .slider {\n  background-color: #5d6175; }\n.nb-theme-Voltage :host input:focus + .slider {\n  box-shadow: 0 0 1px #5d6175; }\n.nb-theme-Voltage :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #161822; }\n.nb-theme-Voltage :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #5d6175;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #5d6175; }\n.nb-theme-Voltage :host .wzrdgroup-link {\n  color: #9295a2 !important; }\n.nb-theme-Voltage :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Overload :host body {\n  background: #484848; }\n.nb-theme-Overload :host .platformHeader {\n  background: #616161; }\n.nb-theme-Overload :host .footer-main {\n  background: #616161;\n  text-align: left; }\n.nb-theme-Overload :host .slider {\n  background-color: #515151; }\n.nb-theme-Overload :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Overload :host [nbButton].btn-primary, .nb-theme-Overload :host .signin-btn, .nb-theme-Overload :host [nbButton].btn-small {\n  background-color: #b0b0b0; }\n.nb-theme-Overload :host [nbButton]:hover, .nb-theme-Overload :host [nbButton].hover, .nb-theme-Overload :host [nbButton].btn-primary:hover, .nb-theme-Overload :host [nbButton].btn-primary.hover {\n  background-color: #b8b8b8; }\n.nb-theme-Overload :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Overload :host [nbButton].btn-outline.btn-primary.hover {\n  background: #b8b8b8 !important; }\n.nb-theme-Overload :host nb-card-header {\n  border-bottom-color: #4c4b4b; }\n.nb-theme-Overload :host nb-card {\n  background: #616161;\n  box-shadow: 0 8px 20px 0 rgba(47, 47, 47, 0.6); }\n.nb-theme-Overload :host [nbInput] {\n  background-color: #515151;\n  border: 2px solid #4c4b4b; }\n.nb-theme-Overload :host ::ng-deep button {\n  border: none; }\n.nb-theme-Overload :host .email-address {\n  color: #dedddd;\n  font-weight: 500; }\n.nb-theme-Overload :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #b0b0b0;\n  background-color: #616161;\n  color: #fff; }\n.nb-theme-Overload :host ::ng-deep .btn-primary {\n  background-color: #b0b0b0;\n  width: 100% !important;\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Overload :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Overload :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Overload :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host .setting-width {\n  background: #616161;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(47, 47, 47, 0.6);\n  border: 0 solid #616161; }\n.nb-theme-Overload :host .contry-code, .nb-theme-Overload :host .setting-content-text input {\n  background-color: #515151;\n  border: 2px solid #4c4b4b; }\n.nb-theme-Overload :host .title {\n  border-bottom: 1px solid #4c4b4b; }\n.nb-theme-Overload :host input:checked + .slider {\n  background-color: #bababa; }\n.nb-theme-Overload :host input:focus + .slider {\n  box-shadow: 0 0 1px #bababa; }\n.nb-theme-Overload :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #484848; }\n.nb-theme-Overload :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #bababa;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #bababa; }\n.nb-theme-Overload :host .wzrdgroup-link {\n  color: #d2d1d1 !important; }\n.nb-theme-Overload :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Smiley :host body {\n  background: #3c3939; }\n.nb-theme-Smiley :host .platformHeader {\n  background: #1c1b1b; }\n.nb-theme-Smiley :host .footer-main {\n  background: #1c1b1b;\n  text-align: left; }\n.nb-theme-Smiley :host .slider {\n  background-color: #434040; }\n.nb-theme-Smiley :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Smiley :host [nbButton].btn-primary, .nb-theme-Smiley :host .signin-btn, .nb-theme-Smiley :host [nbButton].btn-small {\n  background-color: #403f3f; }\n.nb-theme-Smiley :host [nbButton]:hover, .nb-theme-Smiley :host [nbButton].hover, .nb-theme-Smiley :host [nbButton].btn-primary:hover, .nb-theme-Smiley :host [nbButton].btn-primary.hover {\n  background-color: #595858; }\n.nb-theme-Smiley :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Smiley :host [nbButton].btn-outline.btn-primary.hover {\n  background: #595858 !important; }\n.nb-theme-Smiley :host nb-card-header {\n  border-bottom-color: #3d3e3d; }\n.nb-theme-Smiley :host nb-card {\n  background: #1c1b1b;\n  box-shadow: 0 8px 20px 0 rgba(14, 13, 13, 0.6); }\n.nb-theme-Smiley :host [nbInput] {\n  background-color: #434040;\n  border: 2px solid #3d3e3d; }\n.nb-theme-Smiley :host ::ng-deep button {\n  border: none; }\n.nb-theme-Smiley :host .email-address {\n  color: #e4e0b9;\n  font-weight: 500; }\n.nb-theme-Smiley :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #403f3f;\n  background-color: #1c1b1b;\n  color: #fff; }\n.nb-theme-Smiley :host ::ng-deep .btn-primary {\n  background-color: #403f3f;\n  width: 100% !important;\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host .setting-width {\n  background: #1c1b1b;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(14, 13, 13, 0.6);\n  border: 0 solid #1c1b1b; }\n.nb-theme-Smiley :host .contry-code, .nb-theme-Smiley :host .setting-content-text input {\n  background-color: #434040;\n  border: 2px solid #3d3e3d; }\n.nb-theme-Smiley :host .title {\n  border-bottom: 1px solid #3d3e3d; }\n.nb-theme-Smiley :host input:checked + .slider {\n  background-color: #ffcf3f; }\n.nb-theme-Smiley :host input:focus + .slider {\n  box-shadow: 0 0 1px #ffcf3f; }\n.nb-theme-Smiley :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #3c3939; }\n.nb-theme-Smiley :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #ffcf3f;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #ffcf3f; }\n.nb-theme-Smiley :host .wzrdgroup-link {\n  color: #dfd689 !important; }\n.nb-theme-Smiley :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Internal_Traces :host body {\n  background: #477c9d; }\n.nb-theme-Internal_Traces :host .platformHeader {\n  background: #66a9cc; }\n.nb-theme-Internal_Traces :host .footer-main {\n  background: #66a9cc;\n  text-align: left; }\n.nb-theme-Internal_Traces :host .slider {\n  background-color: #5089a7; }\n.nb-theme-Internal_Traces :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Internal_Traces :host [nbButton].btn-primary, .nb-theme-Internal_Traces :host .signin-btn, .nb-theme-Internal_Traces :host [nbButton].btn-small {\n  background-color: #79c0e5; }\n.nb-theme-Internal_Traces :host [nbButton]:hover, .nb-theme-Internal_Traces :host [nbButton].hover, .nb-theme-Internal_Traces :host [nbButton].btn-primary:hover, .nb-theme-Internal_Traces :host [nbButton].btn-primary.hover {\n  background-color: #8ac6e6; }\n.nb-theme-Internal_Traces :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Internal_Traces :host [nbButton].btn-outline.btn-primary.hover {\n  background: #8ac6e6 !important; }\n.nb-theme-Internal_Traces :host nb-card-header {\n  border-bottom-color: #5490af; }\n.nb-theme-Internal_Traces :host nb-card {\n  background: #66a9cc;\n  box-shadow: 0 8px 20px 0 rgba(50, 82, 99, 0.6); }\n.nb-theme-Internal_Traces :host [nbInput] {\n  background-color: #5089a7;\n  border: 2px solid #5490af; }\n.nb-theme-Internal_Traces :host ::ng-deep button {\n  border: none; }\n.nb-theme-Internal_Traces :host .email-address {\n  color: #d8eaf4;\n  font-weight: 500; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #79c0e5;\n  background-color: #66a9cc;\n  color: #fff; }\n.nb-theme-Internal_Traces :host ::ng-deep .btn-primary {\n  background-color: #79c0e5;\n  width: 100% !important;\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host .setting-width {\n  background: #66a9cc;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(50, 82, 99, 0.6);\n  border: 0 solid #66a9cc; }\n.nb-theme-Internal_Traces :host .contry-code, .nb-theme-Internal_Traces :host .setting-content-text input {\n  background-color: #5089a7;\n  border: 2px solid #5490af; }\n.nb-theme-Internal_Traces :host .title {\n  border-bottom: 1px solid #5490af; }\n.nb-theme-Internal_Traces :host input:checked + .slider {\n  background-color: #82d1fb; }\n.nb-theme-Internal_Traces :host input:focus + .slider {\n  box-shadow: 0 0 1px #82d1fb; }\n.nb-theme-Internal_Traces :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #477c9d; }\n.nb-theme-Internal_Traces :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #82d1fb;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #82d1fb; }\n.nb-theme-Internal_Traces :host .wzrdgroup-link {\n  color: #c7ecff !important; }\n.nb-theme-Internal_Traces :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Isolated :host body {\n  background: #071824; }\n.nb-theme-Isolated :host .platformHeader {\n  background: #0d2639; }\n.nb-theme-Isolated :host .footer-main {\n  background: #0d2639;\n  text-align: left; }\n.nb-theme-Isolated :host .slider {\n  background-color: #081b29; }\n.nb-theme-Isolated :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Isolated :host [nbButton].btn-primary, .nb-theme-Isolated :host .signin-btn, .nb-theme-Isolated :host [nbButton].btn-small {\n  background-color: #1a4769; }\n.nb-theme-Isolated :host [nbButton]:hover, .nb-theme-Isolated :host [nbButton].hover, .nb-theme-Isolated :host [nbButton].btn-primary:hover, .nb-theme-Isolated :host [nbButton].btn-primary.hover {\n  background-color: #395f7c; }\n.nb-theme-Isolated :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Isolated :host [nbButton].btn-outline.btn-primary.hover {\n  background: #395f7c !important; }\n.nb-theme-Isolated :host nb-card-header {\n  border-bottom-color: #091e2d; }\n.nb-theme-Isolated :host nb-card {\n  background: #0d2639;\n  box-shadow: 0 8px 20px 0 rgba(6, 19, 28, 0.6); }\n.nb-theme-Isolated :host [nbInput] {\n  background-color: #081b29;\n  border: 2px solid #091e2d; }\n.nb-theme-Isolated :host ::ng-deep button {\n  border: none; }\n.nb-theme-Isolated :host .email-address {\n  color: #91bbdc;\n  font-weight: 500; }\n.nb-theme-Isolated :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #1a4769;\n  background-color: #0d2639;\n  color: #fff; }\n.nb-theme-Isolated :host ::ng-deep .btn-primary {\n  background-color: #1a4769;\n  width: 100% !important;\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host .setting-width {\n  background: #0d2639;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(6, 19, 28, 0.6);\n  border: 0 solid #0d2639; }\n.nb-theme-Isolated :host .contry-code, .nb-theme-Isolated :host .setting-content-text input {\n  background-color: #081b29;\n  border: 2px solid #091e2d; }\n.nb-theme-Isolated :host .title {\n  border-bottom: 1px solid #091e2d; }\n.nb-theme-Isolated :host input:checked + .slider {\n  background-color: #195989; }\n.nb-theme-Isolated :host input:focus + .slider {\n  box-shadow: 0 0 1px #195989; }\n.nb-theme-Isolated :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #071824; }\n.nb-theme-Isolated :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #195989;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #195989; }\n.nb-theme-Isolated :host .wzrdgroup-link {\n  color: #388dce !important; }\n.nb-theme-Isolated :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Land_of_Promises :host body {\n  background: #353740; }\n.nb-theme-Land_of_Promises :host .platformHeader {\n  background: #505260; }\n.nb-theme-Land_of_Promises :host .footer-main {\n  background: #505260;\n  text-align: left; }\n.nb-theme-Land_of_Promises :host .slider {\n  background-color: #3c3e48; }\n.nb-theme-Land_of_Promises :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Land_of_Promises :host [nbButton].btn-primary, .nb-theme-Land_of_Promises :host .signin-btn, .nb-theme-Land_of_Promises :host [nbButton].btn-small {\n  background-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host [nbButton]:hover, .nb-theme-Land_of_Promises :host [nbButton].hover, .nb-theme-Land_of_Promises :host [nbButton].btn-primary:hover, .nb-theme-Land_of_Promises :host [nbButton].btn-primary.hover {\n  background-color: #abadba; }\n.nb-theme-Land_of_Promises :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Land_of_Promises :host [nbButton].btn-outline.btn-primary.hover {\n  background: #abadba !important; }\n.nb-theme-Land_of_Promises :host nb-card-header {\n  border-bottom-color: #34353f; }\n.nb-theme-Land_of_Promises :host nb-card {\n  background: #505260;\n  box-shadow: 0 8px 20px 0 rgba(39, 40, 47, 0.6); }\n.nb-theme-Land_of_Promises :host [nbInput] {\n  background-color: #3c3e48;\n  border: 2px solid #34353f; }\n.nb-theme-Land_of_Promises :host ::ng-deep button {\n  border: none; }\n.nb-theme-Land_of_Promises :host .email-address {\n  color: #d6d9eb;\n  font-weight: 500; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #a0a2b2;\n  background-color: #505260;\n  color: #fff; }\n.nb-theme-Land_of_Promises :host ::ng-deep .btn-primary {\n  background-color: #a0a2b2;\n  width: 100% !important;\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host .setting-width {\n  background: #505260;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(39, 40, 47, 0.6);\n  border: 0 solid #505260; }\n.nb-theme-Land_of_Promises :host .contry-code, .nb-theme-Land_of_Promises :host .setting-content-text input {\n  background-color: #3c3e48;\n  border: 2px solid #34353f; }\n.nb-theme-Land_of_Promises :host .title {\n  border-bottom: 1px solid #34353f; }\n.nb-theme-Land_of_Promises :host input:checked + .slider {\n  background-color: #9599b3; }\n.nb-theme-Land_of_Promises :host input:focus + .slider {\n  box-shadow: 0 0 1px #9599b3; }\n.nb-theme-Land_of_Promises :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #353740; }\n.nb-theme-Land_of_Promises :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #9599b3;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #9599b3; }\n.nb-theme-Land_of_Promises :host .wzrdgroup-link {\n  color: #c2c8ee !important; }\n.nb-theme-Land_of_Promises :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Towers_of_Wizardry :host body {\n  background: #2b4150; }\n.nb-theme-Towers_of_Wizardry :host .platformHeader {\n  background: #385468; }\n.nb-theme-Towers_of_Wizardry :host .footer-main {\n  background: #385468;\n  text-align: left; }\n.nb-theme-Towers_of_Wizardry :host .slider {\n  background-color: #30495a; }\n.nb-theme-Towers_of_Wizardry :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Towers_of_Wizardry :host [nbButton].btn-primary, .nb-theme-Towers_of_Wizardry :host .signin-btn, .nb-theme-Towers_of_Wizardry :host [nbButton].btn-small {\n  background-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host [nbButton]:hover, .nb-theme-Towers_of_Wizardry :host [nbButton].hover, .nb-theme-Towers_of_Wizardry :host [nbButton].btn-primary:hover, .nb-theme-Towers_of_Wizardry :host [nbButton].btn-primary.hover {\n  background-color: #8aa7bc; }\n.nb-theme-Towers_of_Wizardry :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Towers_of_Wizardry :host [nbButton].btn-outline.btn-primary.hover {\n  background: #8aa7bc !important; }\n.nb-theme-Towers_of_Wizardry :host nb-card-header {\n  border-bottom-color: #2c4252; }\n.nb-theme-Towers_of_Wizardry :host nb-card {\n  background: #385468;\n  box-shadow: 0 8px 20px 0 rgba(27, 41, 51, 0.6); }\n.nb-theme-Towers_of_Wizardry :host [nbInput] {\n  background-color: #30495a;\n  border: 2px solid #2c4252; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep button {\n  border: none; }\n.nb-theme-Towers_of_Wizardry :host .email-address {\n  color: #c0d2dd;\n  font-weight: 500; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #799cb4;\n  background-color: #385468;\n  color: #fff; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .btn-primary {\n  background-color: #799cb4;\n  width: 100% !important;\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host .setting-width {\n  background: #385468;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(27, 41, 51, 0.6);\n  border: 0 solid #385468; }\n.nb-theme-Towers_of_Wizardry :host .contry-code, .nb-theme-Towers_of_Wizardry :host .setting-content-text input {\n  background-color: #30495a;\n  border: 2px solid #2c4252; }\n.nb-theme-Towers_of_Wizardry :host .title {\n  border-bottom: 1px solid #2c4252; }\n.nb-theme-Towers_of_Wizardry :host input:checked + .slider {\n  background-color: #85a9c1; }\n.nb-theme-Towers_of_Wizardry :host input:focus + .slider {\n  box-shadow: 0 0 1px #85a9c1; }\n.nb-theme-Towers_of_Wizardry :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #2b4150; }\n.nb-theme-Towers_of_Wizardry :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #85a9c1;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #85a9c1; }\n.nb-theme-Towers_of_Wizardry :host .wzrdgroup-link {\n  color: #97bad1 !important; }\n.nb-theme-Towers_of_Wizardry :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Planets :host body {\n  background: #24193c; }\n.nb-theme-Planets :host .platformHeader {\n  background: #2d204d; }\n.nb-theme-Planets :host .footer-main {\n  background: #2d204d;\n  text-align: left; }\n.nb-theme-Planets :host .slider {\n  background-color: #281c44; }\n.nb-theme-Planets :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Planets :host [nbButton].btn-primary, .nb-theme-Planets :host .signin-btn, .nb-theme-Planets :host [nbButton].btn-small {\n  background-color: #8872c1; }\n.nb-theme-Planets :host [nbButton]:hover, .nb-theme-Planets :host [nbButton].hover, .nb-theme-Planets :host [nbButton].btn-primary:hover, .nb-theme-Planets :host [nbButton].btn-primary.hover {\n  background-color: #9684c7; }\n.nb-theme-Planets :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Planets :host [nbButton].btn-outline.btn-primary.hover {\n  background: #9684c7 !important; }\n.nb-theme-Planets :host nb-card-header {\n  border-bottom-color: #261b41; }\n.nb-theme-Planets :host nb-card {\n  background: #2d204d;\n  box-shadow: 0 8px 20px 0 rgba(22, 15, 38, 0.6); }\n.nb-theme-Planets :host [nbInput] {\n  background-color: #281c44;\n  border: 2px solid #261b41; }\n.nb-theme-Planets :host ::ng-deep button {\n  border: none; }\n.nb-theme-Planets :host .email-address {\n  color: #cabee9;\n  font-weight: 500; }\n.nb-theme-Planets :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #8872c1;\n  background-color: #2d204d;\n  color: #fff; }\n.nb-theme-Planets :host ::ng-deep .btn-primary {\n  background-color: #8872c1;\n  width: 100% !important;\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Planets :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Planets :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Planets :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host .setting-width {\n  background: #2d204d;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(22, 15, 38, 0.6);\n  border: 0 solid #2d204d; }\n.nb-theme-Planets :host .contry-code, .nb-theme-Planets :host .setting-content-text input {\n  background-color: #281c44;\n  border: 2px solid #261b41; }\n.nb-theme-Planets :host .title {\n  border-bottom: 1px solid #261b41; }\n.nb-theme-Planets :host input:checked + .slider {\n  background-color: #8b71cf; }\n.nb-theme-Planets :host input:focus + .slider {\n  box-shadow: 0 0 1px #8b71cf; }\n.nb-theme-Planets :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #24193c; }\n.nb-theme-Planets :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #8b71cf;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #8b71cf; }\n.nb-theme-Planets :host .wzrdgroup-link {\n  color: #ab93e9 !important; }\n.nb-theme-Planets :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Bloodline :host body {\n  background: #09192c; }\n.nb-theme-Bloodline :host .platformHeader {\n  background: #0b2039; }\n.nb-theme-Bloodline :host .footer-main {\n  background: #0b2039;\n  text-align: left; }\n.nb-theme-Bloodline :host .slider {\n  background-color: #0a1c31; }\n.nb-theme-Bloodline :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Bloodline :host [nbButton].btn-primary, .nb-theme-Bloodline :host .signin-btn, .nb-theme-Bloodline :host [nbButton].btn-small {\n  background-color: #3769a4; }\n.nb-theme-Bloodline :host [nbButton]:hover, .nb-theme-Bloodline :host [nbButton].hover, .nb-theme-Bloodline :host [nbButton].btn-primary:hover, .nb-theme-Bloodline :host [nbButton].btn-primary.hover {\n  background-color: #527cae; }\n.nb-theme-Bloodline :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Bloodline :host [nbButton].btn-outline.btn-primary.hover {\n  background: #527cae !important; }\n.nb-theme-Bloodline :host nb-card-header {\n  border-bottom-color: #091a2e; }\n.nb-theme-Bloodline :host nb-card {\n  background: #0b2039;\n  box-shadow: 0 8px 20px 0 rgba(6, 15, 28, 0.6); }\n.nb-theme-Bloodline :host [nbInput] {\n  background-color: #0a1c31;\n  border: 2px solid #091a2e; }\n.nb-theme-Bloodline :host ::ng-deep button {\n  border: none; }\n.nb-theme-Bloodline :host .email-address {\n  color: #b0cceb;\n  font-weight: 500; }\n.nb-theme-Bloodline :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #3769a4;\n  background-color: #0b2039;\n  color: #fff; }\n.nb-theme-Bloodline :host ::ng-deep .btn-primary {\n  background-color: #3769a4;\n  width: 100% !important;\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host .setting-width {\n  background: #0b2039;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(6, 15, 28, 0.6);\n  border: 0 solid #0b2039; }\n.nb-theme-Bloodline :host .contry-code, .nb-theme-Bloodline :host .setting-content-text input {\n  background-color: #0a1c31;\n  border: 2px solid #091a2e; }\n.nb-theme-Bloodline :host .title {\n  border-bottom: 1px solid #091a2e; }\n.nb-theme-Bloodline :host input:checked + .slider {\n  background-color: #5288c8; }\n.nb-theme-Bloodline :host input:focus + .slider {\n  box-shadow: 0 0 1px #5288c8; }\n.nb-theme-Bloodline :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #09192c; }\n.nb-theme-Bloodline :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #5288c8;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #5288c8; }\n.nb-theme-Bloodline :host .wzrdgroup-link {\n  color: #77aeee !important; }\n.nb-theme-Bloodline :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Ghost_Town :host body {\n  background: #171717; }\n.nb-theme-Ghost_Town :host .platformHeader {\n  background: #202020; }\n.nb-theme-Ghost_Town :host .footer-main {\n  background: #202020;\n  text-align: left; }\n.nb-theme-Ghost_Town :host .slider {\n  background-color: #1a1a1a; }\n.nb-theme-Ghost_Town :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Ghost_Town :host [nbButton].btn-primary, .nb-theme-Ghost_Town :host .signin-btn, .nb-theme-Ghost_Town :host [nbButton].btn-small {\n  background-color: #515151; }\n.nb-theme-Ghost_Town :host [nbButton]:hover, .nb-theme-Ghost_Town :host [nbButton].hover, .nb-theme-Ghost_Town :host [nbButton].btn-primary:hover, .nb-theme-Ghost_Town :host [nbButton].btn-primary.hover {\n  background-color: #686868; }\n.nb-theme-Ghost_Town :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Ghost_Town :host [nbButton].btn-outline.btn-primary.hover {\n  background: #686868 !important; }\n.nb-theme-Ghost_Town :host nb-card-header {\n  border-bottom-color: #171717; }\n.nb-theme-Ghost_Town :host nb-card {\n  background: #202020;\n  box-shadow: 0 8px 20px 0 rgba(15, 15, 15, 0.6); }\n.nb-theme-Ghost_Town :host [nbInput] {\n  background-color: #1a1a1a;\n  border: 2px solid #171717; }\n.nb-theme-Ghost_Town :host ::ng-deep button {\n  border: none; }\n.nb-theme-Ghost_Town :host .email-address {\n  color: #c4c2c2;\n  font-weight: 500; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #515151;\n  background-color: #202020;\n  color: #fff; }\n.nb-theme-Ghost_Town :host ::ng-deep .btn-primary {\n  background-color: #515151;\n  width: 100% !important;\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host .setting-width {\n  background: #202020;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(15, 15, 15, 0.6);\n  border: 0 solid #202020; }\n.nb-theme-Ghost_Town :host .contry-code, .nb-theme-Ghost_Town :host .setting-content-text input {\n  background-color: #1a1a1a;\n  border: 2px solid #171717; }\n.nb-theme-Ghost_Town :host .title {\n  border-bottom: 1px solid #171717; }\n.nb-theme-Ghost_Town :host input:checked + .slider {\n  background-color: #686565; }\n.nb-theme-Ghost_Town :host input:focus + .slider {\n  box-shadow: 0 0 1px #686565; }\n.nb-theme-Ghost_Town :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #171717; }\n.nb-theme-Ghost_Town :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #686565;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #686565; }\n.nb-theme-Ghost_Town :host .wzrdgroup-link {\n  color: #9e9b9b !important; }\n.nb-theme-Ghost_Town :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Meteor :host body {\n  background: #050e1b; }\n.nb-theme-Meteor :host .platformHeader {\n  background: #091b33; }\n.nb-theme-Meteor :host .footer-main {\n  background: #091b33;\n  text-align: left; }\n.nb-theme-Meteor :host .slider {\n  background-color: #05101f; }\n.nb-theme-Meteor :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Meteor :host [nbButton].btn-primary, .nb-theme-Meteor :host .signin-btn, .nb-theme-Meteor :host [nbButton].btn-small {\n  background-color: #1a375d; }\n.nb-theme-Meteor :host [nbButton]:hover, .nb-theme-Meteor :host [nbButton].hover, .nb-theme-Meteor :host [nbButton].btn-primary:hover, .nb-theme-Meteor :host [nbButton].btn-primary.hover {\n  background-color: #395272; }\n.nb-theme-Meteor :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Meteor :host [nbButton].btn-outline.btn-primary.hover {\n  background: #395272 !important; }\n.nb-theme-Meteor :host nb-card-header {\n  border-bottom-color: #061325; }\n.nb-theme-Meteor :host nb-card {\n  background: #091b33;\n  box-shadow: 0 8px 20px 0 rgba(4, 13, 25, 0.6); }\n.nb-theme-Meteor :host [nbInput] {\n  background-color: #05101f;\n  border: 2px solid #061325; }\n.nb-theme-Meteor :host ::ng-deep button {\n  border: none; }\n.nb-theme-Meteor :host .email-address {\n  color: #92b2dc;\n  font-weight: 500; }\n.nb-theme-Meteor :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #1a375d;\n  background-color: #091b33;\n  color: #fff; }\n.nb-theme-Meteor :host ::ng-deep .btn-primary {\n  background-color: #1a375d;\n  width: 100% !important;\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host .setting-width {\n  background: #091b33;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(4, 13, 25, 0.6);\n  border: 0 solid #091b33; }\n.nb-theme-Meteor :host .contry-code, .nb-theme-Meteor :host .setting-content-text input {\n  background-color: #05101f;\n  border: 2px solid #061325; }\n.nb-theme-Meteor :host .title {\n  border-bottom: 1px solid #061325; }\n.nb-theme-Meteor :host input:checked + .slider {\n  background-color: #3f88bc; }\n.nb-theme-Meteor :host input:focus + .slider {\n  box-shadow: 0 0 1px #3f88bc; }\n.nb-theme-Meteor :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #050e1b; }\n.nb-theme-Meteor :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #3f88bc;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #3f88bc; }\n.nb-theme-Meteor :host .wzrdgroup-link {\n  color: #3a7ace !important; }\n.nb-theme-Meteor :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Purging :host body {\n  background: #18181a; }\n.nb-theme-Purging :host .platformHeader {\n  background: #222224; }\n.nb-theme-Purging :host .footer-main {\n  background: #222224;\n  text-align: left; }\n.nb-theme-Purging :host .slider {\n  background-color: #1b1b1d; }\n.nb-theme-Purging :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Purging :host [nbButton].btn-primary, .nb-theme-Purging :host .signin-btn, .nb-theme-Purging :host [nbButton].btn-small {\n  background-color: #4a4a4d; }\n.nb-theme-Purging :host [nbButton]:hover, .nb-theme-Purging :host [nbButton].hover, .nb-theme-Purging :host [nbButton].btn-primary:hover, .nb-theme-Purging :host [nbButton].btn-primary.hover {\n  background-color: #626264; }\n.nb-theme-Purging :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Purging :host [nbButton].btn-outline.btn-primary.hover {\n  background: #626264 !important; }\n.nb-theme-Purging :host nb-card-header {\n  border-bottom-color: #1b1b1d; }\n.nb-theme-Purging :host nb-card {\n  background: #222224;\n  box-shadow: 0 8px 20px 0 rgba(17, 17, 17, 0.6); }\n.nb-theme-Purging :host [nbInput] {\n  background-color: #1b1b1d;\n  border: 2px solid #1b1b1d; }\n.nb-theme-Purging :host ::ng-deep button {\n  border: none; }\n.nb-theme-Purging :host .email-address {\n  color: #cbcbcd;\n  font-weight: 500; }\n.nb-theme-Purging :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #4a4a4d;\n  background-color: #222224;\n  color: #fff; }\n.nb-theme-Purging :host ::ng-deep .btn-primary {\n  background-color: #4a4a4d;\n  width: 100% !important;\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Purging :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Purging :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Purging :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host .setting-width {\n  background: #222224;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(17, 17, 17, 0.6);\n  border: 0 solid #222224; }\n.nb-theme-Purging :host .contry-code, .nb-theme-Purging :host .setting-content-text input {\n  background-color: #1b1b1d;\n  border: 2px solid #1b1b1d; }\n.nb-theme-Purging :host .title {\n  border-bottom: 1px solid #1b1b1d; }\n.nb-theme-Purging :host input:checked + .slider {\n  background-color: #747477; }\n.nb-theme-Purging :host input:focus + .slider {\n  box-shadow: 0 0 1px #747477; }\n.nb-theme-Purging :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #18181a; }\n.nb-theme-Purging :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #747477;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #747477; }\n.nb-theme-Purging :host .wzrdgroup-link {\n  color: #acacb0 !important; }\n.nb-theme-Purging :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Predator :host body {\n  background: #2a2c2f; }\n.nb-theme-Predator :host .platformHeader {\n  background: #3b3d42; }\n.nb-theme-Predator :host .footer-main {\n  background: #3b3d42;\n  text-align: left; }\n.nb-theme-Predator :host .slider {\n  background-color: #2f3135; }\n.nb-theme-Predator :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Predator :host [nbButton].btn-primary, .nb-theme-Predator :host .signin-btn, .nb-theme-Predator :host [nbButton].btn-small {\n  background-color: #696a6e; }\n.nb-theme-Predator :host [nbButton]:hover, .nb-theme-Predator :host [nbButton].hover, .nb-theme-Predator :host [nbButton].btn-primary:hover, .nb-theme-Predator :host [nbButton].btn-primary.hover {\n  background-color: #7c7d80; }\n.nb-theme-Predator :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Predator :host [nbButton].btn-outline.btn-primary.hover {\n  background: #7c7d80 !important; }\n.nb-theme-Predator :host nb-card-header {\n  border-bottom-color: #2a2b2f; }\n.nb-theme-Predator :host nb-card {\n  background: #3b3d42;\n  box-shadow: 0 8px 20px 0 rgba(29, 30, 32, 0.6); }\n.nb-theme-Predator :host [nbInput] {\n  background-color: #2f3135;\n  border: 2px solid #2a2b2f; }\n.nb-theme-Predator :host ::ng-deep button {\n  border: none; }\n.nb-theme-Predator :host .email-address {\n  color: #c3c4c7;\n  font-weight: 500; }\n.nb-theme-Predator :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #696a6e;\n  background-color: #3b3d42;\n  color: #fff; }\n.nb-theme-Predator :host ::ng-deep .btn-primary {\n  background-color: #696a6e;\n  width: 100% !important;\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Predator :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Predator :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Predator :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host .setting-width {\n  background: #3b3d42;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(29, 30, 32, 0.6);\n  border: 0 solid #3b3d42; }\n.nb-theme-Predator :host .contry-code, .nb-theme-Predator :host .setting-content-text input {\n  background-color: #2f3135;\n  border: 2px solid #2a2b2f; }\n.nb-theme-Predator :host .title {\n  border-bottom: 1px solid #2a2b2f; }\n.nb-theme-Predator :host input:checked + .slider {\n  background-color: #7d7f86; }\n.nb-theme-Predator :host input:focus + .slider {\n  box-shadow: 0 0 1px #7d7f86; }\n.nb-theme-Predator :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #2a2c2f; }\n.nb-theme-Predator :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #7d7f86;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #7d7f86; }\n.nb-theme-Predator :host .wzrdgroup-link {\n  color: #9d9fa5 !important; }\n.nb-theme-Predator :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Lava :host body {\n  background: #211625; }\n.nb-theme-Lava :host .platformHeader {\n  background: #2c1e32; }\n.nb-theme-Lava :host .footer-main {\n  background: #2c1e32;\n  text-align: left; }\n.nb-theme-Lava :host .slider {\n  background-color: #25192a; }\n.nb-theme-Lava :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Lava :host [nbButton].btn-primary, .nb-theme-Lava :host .signin-btn, .nb-theme-Lava :host [nbButton].btn-small {\n  background-color: #765883; }\n.nb-theme-Lava :host [nbButton]:hover, .nb-theme-Lava :host [nbButton].hover, .nb-theme-Lava :host [nbButton].btn-primary:hover, .nb-theme-Lava :host [nbButton].btn-primary.hover {\n  background-color: #876e92; }\n.nb-theme-Lava :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #765883; }\n.nb-theme-Lava :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Lava :host [nbButton].btn-outline.btn-primary.hover {\n  background: #876e92 !important; }\n.nb-theme-Lava :host nb-card-header {\n  border-bottom-color: #211625; }\n.nb-theme-Lava :host nb-card {\n  background: #2c1e32;\n  box-shadow: 0 8px 20px 0 rgba(22, 15, 24, 0.6); }\n.nb-theme-Lava :host [nbInput] {\n  background-color: #25192a;\n  border: 2px solid #211625; }\n.nb-theme-Lava :host ::ng-deep button {\n  border: none; }\n.nb-theme-Lava :host .email-address {\n  color: #d2bcdc;\n  font-weight: 500; }\n.nb-theme-Lava :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #765883;\n  background-color: #2c1e32;\n  color: #fff; }\n.nb-theme-Lava :host ::ng-deep .btn-primary {\n  background-color: #765883;\n  width: 100% !important;\n  border: 2px solid #765883; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Lava :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #765883; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Lava :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Lava :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #765883; }\n.nb-theme-Lava :host .setting-width {\n  background: #2c1e32;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(22, 15, 24, 0.6);\n  border: 0 solid #2c1e32; }\n.nb-theme-Lava :host .contry-code, .nb-theme-Lava :host .setting-content-text input {\n  background-color: #25192a;\n  border: 2px solid #211625; }\n.nb-theme-Lava :host .title {\n  border-bottom: 1px solid #211625; }\n.nb-theme-Lava :host input:checked + .slider {\n  background-color: #9a6dae; }\n.nb-theme-Lava :host input:focus + .slider {\n  box-shadow: 0 0 1px #9a6dae; }\n.nb-theme-Lava :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #211625; }\n.nb-theme-Lava :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #9a6dae;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #9a6dae; }\n.nb-theme-Lava :host .wzrdgroup-link {\n  color: #bb8fce !important; }\n.nb-theme-Lava :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Witches :host body {\n  background: #0b223b; }\n.nb-theme-Witches :host .platformHeader {\n  background: #0e2c4c; }\n.nb-theme-Witches :host .footer-main {\n  background: #0e2c4c;\n  text-align: left; }\n.nb-theme-Witches :host .slider {\n  background-color: #0c2642; }\n.nb-theme-Witches :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Witches :host [nbButton].btn-primary, .nb-theme-Witches :host .signin-btn, .nb-theme-Witches :host [nbButton].btn-small {\n  background-color: #2c65a2; }\n.nb-theme-Witches :host [nbButton]:hover, .nb-theme-Witches :host [nbButton].hover, .nb-theme-Witches :host [nbButton].btn-primary:hover, .nb-theme-Witches :host [nbButton].btn-primary.hover {\n  background-color: #4879ad; }\n.nb-theme-Witches :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Witches :host [nbButton].btn-outline.btn-primary.hover {\n  background: #4879ad !important; }\n.nb-theme-Witches :host nb-card-header {\n  border-bottom-color: #0a2038; }\n.nb-theme-Witches :host nb-card {\n  background: #0e2c4c;\n  box-shadow: 0 8px 20px 0 rgba(7, 22, 37, 0.6); }\n.nb-theme-Witches :host [nbInput] {\n  background-color: #0c2642;\n  border: 2px solid #0a2038; }\n.nb-theme-Witches :host ::ng-deep button {\n  border: none; }\n.nb-theme-Witches :host .email-address {\n  color: #b2cde9;\n  font-weight: 500; }\n.nb-theme-Witches :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #2c65a2;\n  background-color: #0e2c4c;\n  color: #fff; }\n.nb-theme-Witches :host ::ng-deep .btn-primary {\n  background-color: #2c65a2;\n  width: 100% !important;\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Witches :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Witches :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Witches :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host .setting-width {\n  background: #0e2c4c;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(7, 22, 37, 0.6);\n  border: 0 solid #0e2c4c; }\n.nb-theme-Witches :host .contry-code, .nb-theme-Witches :host .setting-content-text input {\n  background-color: #0c2642;\n  border: 2px solid #0a2038; }\n.nb-theme-Witches :host .title {\n  border-bottom: 1px solid #0a2038; }\n.nb-theme-Witches :host input:checked + .slider {\n  background-color: #397ac0; }\n.nb-theme-Witches :host input:focus + .slider {\n  box-shadow: 0 0 1px #397ac0; }\n.nb-theme-Witches :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #0b223b; }\n.nb-theme-Witches :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #397ac0;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #397ac0; }\n.nb-theme-Witches :host .wzrdgroup-link {\n  color: #7bb0ea !important; }\n.nb-theme-Witches :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Candy :host body {\n  background: #6e6c7e; }\n.nb-theme-Candy :host .platformHeader {\n  background: #8c8a9e; }\n.nb-theme-Candy :host .footer-main {\n  background: #8c8a9e;\n  text-align: left; }\n.nb-theme-Candy :host .slider {\n  background-color: #7b7a8b; }\n.nb-theme-Candy :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Candy :host [nbButton].btn-primary, .nb-theme-Candy :host .signin-btn, .nb-theme-Candy :host [nbButton].btn-small {\n  background-color: #6c6984; }\n.nb-theme-Candy :host [nbButton]:hover, .nb-theme-Candy :host [nbButton].hover, .nb-theme-Candy :host [nbButton].btn-primary:hover, .nb-theme-Candy :host [nbButton].btn-primary.hover {\n  background-color: #7f7c93; }\n.nb-theme-Candy :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Candy :host [nbButton].btn-outline.btn-primary.hover {\n  background: #7f7c93 !important; }\n.nb-theme-Candy :host nb-card-header {\n  border-bottom-color: #62606e; }\n.nb-theme-Candy :host nb-card {\n  background: #8c8a9e;\n  box-shadow: 0 8px 20px 0 rgba(68, 67, 77, 0.6); }\n.nb-theme-Candy :host [nbInput] {\n  background-color: #7b7a8b;\n  border: 2px solid #62606e; }\n.nb-theme-Candy :host ::ng-deep button {\n  border: none; }\n.nb-theme-Candy :host .email-address {\n  color: #d7d5e2;\n  font-weight: 500; }\n.nb-theme-Candy :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #6c6984;\n  background-color: #8c8a9e;\n  color: #fff; }\n.nb-theme-Candy :host ::ng-deep .btn-primary {\n  background-color: #6c6984;\n  width: 100% !important;\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Candy :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Candy :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Candy :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host .setting-width {\n  background: #8c8a9e;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(68, 67, 77, 0.6);\n  border: 0 solid #8c8a9e; }\n.nb-theme-Candy :host .contry-code, .nb-theme-Candy :host .setting-content-text input {\n  background-color: #7b7a8b;\n  border: 2px solid #62606e; }\n.nb-theme-Candy :host .title {\n  border-bottom: 1px solid #62606e; }\n.nb-theme-Candy :host input:checked + .slider {\n  background-color: #5f5b7b; }\n.nb-theme-Candy :host input:focus + .slider {\n  box-shadow: 0 0 1px #5f5b7b; }\n.nb-theme-Candy :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #6e6c7e; }\n.nb-theme-Candy :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #5f5b7b;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #5f5b7b; }\n.nb-theme-Candy :host .wzrdgroup-link {\n  color: #c4c1da !important; }\n.nb-theme-Candy :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Mother_Nature :host body {\n  background: #0c2825; }\n.nb-theme-Mother_Nature :host .platformHeader {\n  background: #16403c; }\n.nb-theme-Mother_Nature :host .footer-main {\n  background: #16403c;\n  text-align: left; }\n.nb-theme-Mother_Nature :host .slider {\n  background-color: #0e2d2a; }\n.nb-theme-Mother_Nature :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Mother_Nature :host [nbButton].btn-primary, .nb-theme-Mother_Nature :host .signin-btn, .nb-theme-Mother_Nature :host [nbButton].btn-small {\n  background-color: #2f615c; }\n.nb-theme-Mother_Nature :host [nbButton]:hover, .nb-theme-Mother_Nature :host [nbButton].hover, .nb-theme-Mother_Nature :host [nbButton].btn-primary:hover, .nb-theme-Mother_Nature :host [nbButton].btn-primary.hover {\n  background-color: #4b7571; }\n.nb-theme-Mother_Nature :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Mother_Nature :host [nbButton].btn-outline.btn-primary.hover {\n  background: #4b7571 !important; }\n.nb-theme-Mother_Nature :host nb-card-header {\n  border-bottom-color: #0f2f2c; }\n.nb-theme-Mother_Nature :host nb-card {\n  background: #16403c;\n  box-shadow: 0 8px 20px 0 rgba(10, 31, 29, 0.6); }\n.nb-theme-Mother_Nature :host [nbInput] {\n  background-color: #0e2d2a;\n  border: 2px solid #0f2f2c; }\n.nb-theme-Mother_Nature :host ::ng-deep button {\n  border: none; }\n.nb-theme-Mother_Nature :host .email-address {\n  color: #96cec9;\n  font-weight: 500; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #2f615c;\n  background-color: #16403c;\n  color: #fff; }\n.nb-theme-Mother_Nature :host ::ng-deep .btn-primary {\n  background-color: #2f615c;\n  width: 100% !important;\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host .setting-width {\n  background: #16403c;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(10, 31, 29, 0.6);\n  border: 0 solid #16403c; }\n.nb-theme-Mother_Nature :host .contry-code, .nb-theme-Mother_Nature :host .setting-content-text input {\n  background-color: #0e2d2a;\n  border: 2px solid #0f2f2c; }\n.nb-theme-Mother_Nature :host .title {\n  border-bottom: 1px solid #0f2f2c; }\n.nb-theme-Mother_Nature :host input:checked + .slider {\n  background-color: #2b7d75; }\n.nb-theme-Mother_Nature :host input:focus + .slider {\n  box-shadow: 0 0 1px #2b7d75; }\n.nb-theme-Mother_Nature :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #0c2825; }\n.nb-theme-Mother_Nature :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #2b7d75;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #2b7d75; }\n.nb-theme-Mother_Nature :host .wzrdgroup-link {\n  color: #43b3a8 !important; }\n.nb-theme-Mother_Nature :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Mystic :host body {\n  background: #1c121c; }\n.nb-theme-Mystic :host .platformHeader {\n  background: #2a1b2a; }\n.nb-theme-Mystic :host .footer-main {\n  background: #2a1b2a;\n  text-align: left; }\n.nb-theme-Mystic :host .slider {\n  background-color: #201420; }\n.nb-theme-Mystic :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-Mystic :host [nbButton].btn-primary, .nb-theme-Mystic :host .signin-btn, .nb-theme-Mystic :host [nbButton].btn-small {\n  background-color: #5f445f; }\n.nb-theme-Mystic :host [nbButton]:hover, .nb-theme-Mystic :host [nbButton].hover, .nb-theme-Mystic :host [nbButton].btn-primary:hover, .nb-theme-Mystic :host [nbButton].btn-primary.hover {\n  background-color: #745d74; }\n.nb-theme-Mystic :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-Mystic :host [nbButton].btn-outline.btn-primary.hover {\n  background: #745d74 !important; }\n.nb-theme-Mystic :host nb-card-header {\n  border-bottom-color: #1d131d; }\n.nb-theme-Mystic :host nb-card {\n  background: #2a1b2a;\n  box-shadow: 0 8px 20px 0 rgba(20, 13, 20, 0.6); }\n.nb-theme-Mystic :host [nbInput] {\n  background-color: #201420;\n  border: 2px solid #1d131d; }\n.nb-theme-Mystic :host ::ng-deep button {\n  border: none; }\n.nb-theme-Mystic :host .email-address {\n  color: #c6a9c6;\n  font-weight: 500; }\n.nb-theme-Mystic :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #5f445f;\n  background-color: #2a1b2a;\n  color: #fff; }\n.nb-theme-Mystic :host ::ng-deep .btn-primary {\n  background-color: #5f445f;\n  width: 100% !important;\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host .setting-width {\n  background: #2a1b2a;\n  box-shadow: 0 8px 20px 0 0 8px 20px 0 rgba(20, 13, 20, 0.6);\n  border: 0 solid #2a1b2a; }\n.nb-theme-Mystic :host .contry-code, .nb-theme-Mystic :host .setting-content-text input {\n  background-color: #201420;\n  border: 2px solid #1d131d; }\n.nb-theme-Mystic :host .title {\n  border-bottom: 1px solid #1d131d; }\n.nb-theme-Mystic :host input:checked + .slider {\n  background-color: #975b97; }\n.nb-theme-Mystic :host input:focus + .slider {\n  box-shadow: 0 0 1px #975b97; }\n.nb-theme-Mystic :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid #1c121c; }\n.nb-theme-Mystic :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  background-color: #975b97;\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid #975b97; }\n.nb-theme-Mystic :host .wzrdgroup-link {\n  color: #a269a2 !important; }\n.nb-theme-Mystic :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host .platformHeader {\n  background: #111218; }\n.nb-theme-corporate :host .footer-main {\n  background: #111218;\n  text-align: left; }\n.nb-theme-corporate :host [nbButton].btn-danger {\n  width: 100%; }\n.nb-theme-corporate :host [nbButton].btn-outline.btn-primary {\n  border: 2px solid; }\n.nb-theme-corporate :host [nbButton].btn-outline.btn-primary:hover, .nb-theme-corporate :host [nbButton].btn-outline.btn-primary.hover {\n  background: !important; }\n.nb-theme-corporate :host nb-card {\n  box-shadow: 0 2px 12px 0 #dfe3eb; }\n.nb-theme-corporate :host [nbInput] {\n  border: 2px solid; }\n.nb-theme-corporate :host ::ng-deep button {\n  border: none; }\n.nb-theme-corporate :host .email-address {\n  font-weight: 500; }\n.nb-theme-corporate :host ::ng-deep nb-card.select.primary {\n  border: 2px solid;\n  color: #fff; }\n.nb-theme-corporate :host ::ng-deep .btn-primary {\n  width: 100% !important;\n  border: 2px solid; }\n.nb-theme-corporate :host ::ng-deep [nbButton].btn-primary:focus, .nb-theme-corporate :host ::ng-deep [nbButton].btn-primary.focus {\n  border: 2px solid; }\n.nb-theme-corporate :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-corporate :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-corporate :host ::ng-deep [nbButton].btn-primary:active:focus {\n  border: 2px solid; }\n.nb-theme-corporate :host .setting-width {\n  box-shadow: 0 8px 20px 0 0 2px 12px 0 #dfe3eb;\n  border: 0 solid; }\n.nb-theme-corporate :host .contry-code, .nb-theme-corporate :host .setting-content-text input {\n  border: 2px solid; }\n.nb-theme-corporate :host .title {\n  border-bottom: 1px solid; }\n.nb-theme-corporate :host input:focus + .slider {\n  box-shadow: 0 0 1px; }\n.nb-theme-corporate :host .setting-content .setting-content-check:not(:last-child) {\n  border-bottom: 1px solid; }\n.nb-theme-corporate :host .setting-content-check input[type=\"radio\"]:checked + .radio-label:before {\n  box-shadow: inset 0 0 0 4px #fff;\n  border: 12px solid; }\n.nb-theme-corporate :host .wzrdgroup-link {\n  color: !important; }\n.nb-theme-corporate :host .wzrdgroup-link:hover {\n  text-decoration: none; }\nbody {\n  font-family: 'Roboto', sans-serif; }\n.select-btn-width {\n  width: 150px;\n  margin-left: auto;\n  text-transform: uppercase; }\n.select-btn-width [nbButton] {\n  text-transform: uppercase; }\n.btn-width {\n  width: 120px;\n  padding: 0 6px;\n  display: block; }\n.setting-width {\n  max-width: 100%;\n  margin: 0 auto 1.5rem auto;\n  border-radius: .5rem;\n  overflow: hidden; }\n.title h3 {\n  color: #ffffff;\n  text-align: center; }\n.title p,\n.setting-content p {\n  color: #fff;\n  opacity: 0.9;\n  line-height: 26px;\n  letter-spacing: 0.7px;\n  margin: 0;\n  font-size: 14px; }\n.title p a {\n  color: #00ff39;\n  text-decoration: none; }\n.contry-code {\n  width: auto;\n  height: 32px; }\n.title {\n  padding: 20px 15px; }\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 28px; }\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0; }\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  -webkit-transition: .4s;\n  transition: .4s; }\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 22px;\n  width: 22px;\n  left: 6px;\n  bottom: 3px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s; }\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  transform: translateX(26px); }\n.slider.round {\n  border-radius: 34px; }\n.slider.round:before {\n  border-radius: 50%; }\n.setting-content {\n  padding: 20px; }\n.setting-content .setting-content-check:not(:last-child) {\n  padding-bottom: 10px;\n  margin-bottom: 10px; }\n.setting-content-check h5 {\n  font-size: 16px;\n  margin-bottom: 0; }\n@media (min-width: 768px) {\n    .setting-content-check h5 {\n      font-size: 18px; } }\n.ss_radio_button label {\n  position: absolute;\n  right: 30px; }\n.setting-content-check input[type=\"radio\"] {\n  position: absolute;\n  opacity: 0; }\n.setting-content-check input[type=\"radio\"] + .radio-label:before {\n  content: '';\n  background: transparent;\n  border-radius: 100%;\n  border: 2px solid #fff;\n  display: inline-block;\n  width: 1.4em;\n  height: 1.4em;\n  position: relative;\n  top: 4px;\n  margin-right: 1em;\n  vertical-align: top;\n  cursor: pointer;\n  text-align: center;\n  -webkit-transition: all 250ms ease;\n  transition: all 250ms ease; }\n.setting-content-text {\n  width: 100%; }\n.setting-content-text input {\n  color: #fff;\n  padding: 0 15px;\n  font-size: 16px;\n  height: 32px;\n  margin-left: 10px; }\n.setting-content-text input::-webkit-input-placeholder {\n  color: rgba(255, 255, 255, 0.6); }\n.setting-content-text input::-moz-placeholder {\n  color: rgba(255, 255, 255, 0.6); }\n.setting-content-text input::-ms-input-placeholder {\n  color: rgba(255, 255, 255, 0.6); }\n.setting-content-text input::placeholder {\n  color: rgba(255, 255, 255, 0.6); }\n.hide {\n  display: none; }\n.iti__hide {\n  display: none; }\npre {\n  margin: 0 !important;\n  display: inline-block; }\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string,\n.token.variable {\n  background: none; }\ninput, button {\n  height: 35px;\n  margin: 0;\n  padding: 6px 12px;\n  border-radius: 2px;\n  font-family: inherit;\n  font-size: 100%;\n  color: inherit; }\ninput[disabled], button[disabled] {\n  background-color: #eee; }\ninput, select {\n  border: 1px solid #CCC;\n  width: 100%; }\n::-webkit-input-placeholder {\n  color: #BBB; }\n::-moz-placeholder {\n  /* Firefox 19+ */\n  color: #BBB;\n  opacity: 1; }\n:-ms-input-placeholder {\n  color: #BBB; }\nbutton {\n  color: #FFF; }\nbutton:hover {\n  cursor: pointer; }\n.iti__flag-box, .iti__country-name {\n  color: #333333 !important; }\n.ss_profile_box {\n  height: 100px;\n  width: 100%;\n  overflow: hidden;\n  display: inline-table; }\n.ss_profile_box img {\n  width: 100%; }\n.ss_profile_images {\n  height: 80px;\n  width: 80px;\n  border-radius: 100px;\n  display: inline-block;\n  overflow: hidden; }\n.ss_profile_box h3 {\n  padding-top: 15px;\n  font-size: 20px;\n  margin-bottom: 0 !important; }\n.ss_profile_info {\n  margin: 0;\n  padding: 0 0 10% 0 !important; }\n.ss_profile_info li {\n  list-style: none;\n  text-align: left;\n  padding: 5px 0; }\n.ss_profile_info li span:nth-child(1) {\n  width: auto;\n  font-size: 14px;\n  padding-bottom: 10px;\n  color: #fff; }\n.ss_profile_info li span:nth-child(2) {\n  float: right;\n  width: auto;\n  font-size: 14px;\n  text-align: right;\n  padding-bottom: 10px;\n  color: #fff; }\n.s_group {\n  font-size: 18px;\n  padding: 20px 0;\n  color: #ffffff; }\n.text-light {\n  font-weight: 700; }\n.platform_ss h5 {\n  font-size: 14px;\n  font-weight: 400;\n  margin-bottom: 5px !important; }\n@media (min-width: 768px) {\n    .platform_ss h5 {\n      font-size: 16px; } }\n.platform_ss {\n  padding-top: 20px; }\n.select_box_ss {\n  background: transparent;\n  color: #ffffff;\n  border-radius: 6px;\n  font-size: 14px !important; }\n.ss_min-height_plateform {\n  min-height: 200px; }\n.ss_message_text_box {\n  display: -webkit-box;\n  display: flex; }\n.ss_message_text_box select,\n.ss_message_text_box input {\n  width: 250px; }\n.ss_min-height_plateform p {\n  color: #FFFFFF !important;\n  font-size: 12px; }\n@media (min-width: 768px) {\n    .ss_min-height_plateform p {\n      font-size: 14px; } }\n.ss_min-height_plateform h5 {\n  padding-bottom: 20px; }\n.signin-btn {\n  border: 2px solid transparent !important; }\n.signin-btn:hover {\n  background: #8646f4 !important; }\n.ss_mobile_right_left {\n  text-align: left; }\n@media (min-width: 320px) and (max-width: 480px) {\n  .ss_mobile_right_left {\n    text-align: right; }\n  .setting-content-check p {\n    padding-right: 20px; }\n  .ss_message_text_box select,\n  .ss_message_text_box input {\n    width: 100%;\n    margin-bottom: 15px;\n    margin-left: 0;\n    margin-right: 0; }\n  .ss_profile_info li span:nth-child(1) {\n    font-size: 12px; }\n  .ss_profile_info li span:nth-child(2) {\n    font-size: 12px; } }\n@media (min-width: 481px) and (max-width: 767px) {\n  .ss_mobile_right_left {\n    text-align: right; }\n  .ss_profile_info li span:nth-child(1) {\n    font-size: 15px; }\n  .ss_profile_info li span:nth-child(2) {\n    font-size: 15px; } }\n@media (min-width: 1600px) {\n  .ss_profile_info li span:nth-child(1) {\n    font-size: 15px; }\n  .ss_profile_info li span:nth-child(2) {\n    font-size: 15px; } }\n.card-position {\n  text-align: center;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  -webkit-transform: translate(-50%, -50%); }\n@media only screen and (max-width: 600px) {\n    .card-position {\n      position: absolute;\n      top: 8%;\n      left: 50%;\n      -webkit-transform: translate(-50%);\n              transform: translate(-50%); } }\n.SS_input_edit {\n  border-bottom: 1px white dashed;\n  text-decoration: none;\n  color: #FFFFFF; }\n::ng-deep.custom-select nb-select button {\n  max-width: none !important; }\n.location-select ::ng-deep nb-select button {\n  max-width: none !important; }\n@media (min-width: 768px) {\n  .custom-padding {\n    padding-left: 15px;\n    padding-right: 15px; } }\n.settings-title {\n  font-weight: 700; }\n.mt-auto {\n  margin-top: auto; }\n.theme-picker-container {\n  width: 100%; }\n.grid-library {\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: -webkit-fit-content;\n  grid-template-rows: fit-content;\n  grid-auto-flow: dense; }\n.gridContainer-library {\n  width: 100%;\n  background-position: center;\n  /* Center the image */\n  background-repeat: no-repeat;\n  /* Do not repeat the image */\n  background-size: cover;\n  /* Resize the background image to cover the entire container */\n  margin-bottom: .75rem; }\n@media (min-width: 768px) {\n    .gridContainer-library {\n      margin-bottom: 1rem; } }\n@media (min-width: 992px) {\n    .gridContainer-library {\n      margin-bottom: 1.25rem; } }\n.grid-library {\n  grid-template-columns: repeat(auto-fit, minmax(50%, 1fr)); }\n@media (min-width: 768px) {\n    .grid-library {\n      grid-template-columns: repeat(auto-fit, minmax(33.3333%, 1fr)); } }\n@media (min-width: 992px) {\n    .grid-library {\n      grid-template-columns: repeat(auto-fit, minmax(20%, 1fr));\n      max-width: 100%;\n      margin: 0 auto; } }\n.theme-square {\n  cursor: pointer;\n  width: 100%;\n  padding: .75rem; }\n@media (min-width: 768px) {\n    .theme-square {\n      padding: 1rem; } }\n@media (min-width: 992px) {\n    .theme-square {\n      padding: 1.25rem; } }\n.theme-square img {\n  width: 100%; }\n.btn-container {\n  width: 100%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.new-rel {\n  position: relative;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content; }\n.new-header-badge {\n  position: absolute;\n  top: -8px;\n  right: -9px;\n  font-size: 9px;\n  color: #0dff92; }\n@media (min-width: 768px) {\n    .new-header-badge {\n      font-size: 10px;\n      top: -9px;\n      right: -10px; } }\n@media (min-width: 992px) {\n    .new-header-badge {\n      font-size: 11px;\n      top: -10px;\n      right: -11px; } }\n@media (min-width: 1200px) {\n    .new-header-badge {\n      font-size: 12px;\n      top: -11px;\n      right: -12px; } }\n.hide {\n  display: none; }\n.new-label-slant {\n  font-weight: 700;\n  background-color: yellow;\n  color: #000;\n  position: absolute;\n  right: -21px;\n  top: -7px;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n  font-size: 12px;\n  padding: 15px 16px 1px; }\n@media (min-width: 768px) {\n    .new-label-slant {\n      right: -30px;\n      top: -7px;\n      font-size: 14px;\n      padding: 15px 26px 4px; } }\n@media (min-width: 768px) {\n  .move-left-btn {\n    margin-right: 3px; } }\n@media (min-width: 992px) {\n  .move-left-btn {\n    margin-right: 0; } }\nh5 {\n  font-size: 12px !important; }\n@media (min-width: 768px) {\n    h5 {\n      font-size: 14px !important; } }\n@media (min-width: 992px) {\n    h5 {\n      font-size: 16px !important; } }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/security/security.component.ts":
/*!******************************************************!*\
  !*** ./src/app/pages/security/security.component.ts ***!
  \******************************************************/
/*! exports provided: SecurityComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityComponent", function() { return SecurityComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _nebular_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @nebular/theme */ "./node_modules/@nebular/theme/index.js");
/* harmony import */ var _dataservice_app_constant_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../dataservice/app.constant.component */ "./src/app/pages/dataservice/app.constant.component.ts");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_coutries_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/coutries.service */ "./src/app/services/coutries.service.ts");
/* harmony import */ var _dataservice_apiservice_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dataservice/apiservice.component */ "./src/app/pages/dataservice/apiservice.component.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");








var SecurityComponent = /** @class */ (function () {
    function SecurityComponent(country, _dataservice, router, toastrService, _configuration, themeService) {
        this.country = country;
        this._dataservice = _dataservice;
        this.router = router;
        this.toastrService = toastrService;
        this._configuration = _configuration;
        this.themeService = themeService;
        this.loading = true;
        this.is_2fa = false;
        this.countryCode = '+1';
        this.is_loader = false;
        this.isShowChangePass = false;
        this.isShowGender = false;
        this.isShowLocation = false;
        this.profileImg = '';
        this.profileHeaderImg = '';
        this.showMoreThemes = false;
        this.themeClicked = false;
        this.showOutsideBtn = false;
        this.isSubmit = 'SUBMIT';
        this.changePassForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormGroup"]({
            currentPassword: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required),
            newPassword: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required),
        });
        this.changeGenderForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormGroup"]({
            gender: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required)
        });
        this.changeLocationForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormGroup"]({
            location: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required)
        });
    }
    // changeTheme(input) {
    //     //this.currentTheme = this.currentTheme === 'default' ? 'cosmic' : 'default';
    //     this.themeService.changeTheme(input);
    //     console.log(input);
    // }
    SecurityComponent.prototype.changeTheme = function (themeKey) {
        //this.currentTheme = this.currentTheme === 'default' ? 'cosmic' : 'default';
        this.themeService.changeTheme(themeKey);
        this.themeClicked = true;
    };
    SecurityComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log(this.twoFAType);
        if (this.is_2fa) {
            this.showOutsideBtn = false;
        }
        // this.themeOptions = [
        //     {theme: "Far_Above", img: "../assets/theme_tn/30.jpg", id: 30},
        //     {theme: "Vortex", img: "../assets/theme_tn/31.jpg", id: 31},
        //     {theme: "Smiley", img: "../assets/theme_tn/53.jpg", id: 53},
        //     {theme: "Fireball", img: "../assets/theme_tn/32.jpg", id: 32},
        //     {theme: "Purging", img: "../assets/theme_tn/81.jpg", id: 81},
        //     //{theme: "Hex_World", img: "../assets/theme_tn/33.jpg"},            
        //     {theme: "Connection", img: "../assets/theme_tn/35.jpg", id: 35},
        //     {theme: "Enchanted_Dream", img: "../assets/theme_tn/41.jpg", id: 41},
        //     {theme: "Infinity", img: "../assets/theme_tn/42.jpg", id: 42},
        //     //{theme: "Pirate", img: "../assets/theme_tn/43.jpg"},            
        //     // {theme: "Uncovering_Secrets", img: "../assets/theme_tn/45.jpg"},
        //     {theme: "United_Colours", img: "../assets/theme_tn/46.jpg", id: 46},
        //     //{theme: "Palm_Trees", img: "../assets/theme_tn/47.jpg"},
        //     //{theme: "Analyst", img: "../assets/theme_tn/48.jpg"},
        //     {theme: "Voltage", img: "../assets/theme_tn/49.jpg", id: 49},
        //     {theme: "Overload", img: "../assets/theme_tn/52.jpg", id: 52},
        //     {theme: "Internal_Traces", img: "../assets/theme_tn/54.jpg", id: 54},
        //     {theme: "Isolated", img: "../assets/theme_tn/55.jpg", id: 55},
        //     {theme: "Land_of_Promises", img: "../assets/theme_tn/56.jpg", id: 56},
        //     {theme: "Towers_of_Wizardry", img: "../assets/theme_tn/64.jpg", id: 64},
        //     {theme: "Tron", img: "../assets/theme_tn/44.jpg", id: 44},
        //     {theme: "Planets", img: "../assets/theme_tn/69.jpg", id: 69},
        //     {theme: "Formula_of_Life", img: "../assets/theme_tn/34.jpg", id: 34},
        //     //{theme: "Bloodline", img: "../assets/theme_tn/70.jpg"},
        //     //{theme: "Ghost_Town", img: "../assets/theme_tn/71.jpg"},
        //     {theme: "Meteor", img: "../assets/theme_tn/73.jpg", id: 73},
        //     {theme: "Predator", img: "../assets/theme_tn/82.jpg", id: 82},
        //     {theme: "Lava", img: "../assets/theme_tn/83.jpg", id: 83},
        //     {theme: "Witches", img: "../assets/theme_tn/85.jpg", id: 85},
        //     {theme: "Candy", img: "../assets/theme_tn/90.jpg", id: 90},
        //     {theme: "Mother_Nature", img: "../assets/theme_tn/91.jpg", id: 91},
        //     {theme: "Mystic", img: "../assets/theme_tn/92.jpg", id: 92},
        // ]
        this.themeOptions = [
            { theme: "Far_Above", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/30.jpg", id: 30 },
            { theme: "Vortex", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/31.jpg", id: 31 },
            { theme: "Smiley", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/53.jpg", id: 53 },
            { theme: "Fireball", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/32.jpg", id: 32 },
            { theme: "Purging", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/81.jpg", id: 81 },
            //{theme: "Hex_World", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/33.jpg"},            
            { theme: "Connection", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/35.jpg", id: 35 },
            { theme: "Enchanted_Dream", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/41.jpg", id: 41 },
            { theme: "Infinity", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/42.jpg", id: 42 },
            //{theme: "Pirate", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/43.jpg"},            
            // {theme: "Uncovering_Secrets", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/45.jpg"},
            { theme: "United_Colours", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/46.jpg", id: 46 },
            //{theme: "Palm_Trees", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/47.jpg"},
            //{theme: "Analyst", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/48.jpg"},
            { theme: "Voltage", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/49.jpg", id: 49 },
            { theme: "Overload", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/52.jpg", id: 52 },
            { theme: "Internal_Traces", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/54.jpg", id: 54 },
            { theme: "Isolated", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/55.jpg", id: 55 },
            { theme: "Land_of_Promises", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/56.jpg", id: 56 },
            { theme: "Towers_of_Wizardry", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/64.jpg", id: 64 },
            { theme: "Tron", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/44.jpg", id: 44 },
            { theme: "Planets", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/69.jpg", id: 69 },
            { theme: "Formula_of_Life", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/34.jpg", id: 34 },
            //{theme: "Bloodline", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/70.jpg"},
            //{theme: "Ghost_Town", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/71.jpg"},
            { theme: "Meteor", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/73.jpg", id: 73 },
            { theme: "Predator", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/82.jpg", id: 82 },
            { theme: "Lava", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/83.jpg", id: 83 },
            { theme: "Witches", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/85.jpg", id: 85 },
            { theme: "Candy", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/90.jpg", id: 90 },
            { theme: "Mother_Nature", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/91.jpg", id: 91 },
            { theme: "Mystic", img: "https://d308fakbqebk7c.cloudfront.net/theme_thumbnails/92.jpg", id: 92 },
        ];
        console.log(this.themeOptions.length);
        this.countries = this.country.getCountries();
        this.countries = this.countries.countries;
        this.locations = this.countries.map(function (c) {
            return c.name;
        });
        this.loading = true;
        this._dataservice
            .postCall(this._configuration.GetUserApi, {})
            .subscribe(function (resp) {
            if (resp.status === _this._configuration.ResponseStatusError) {
                _this.loading = false;
            }
            console.log(resp);
            _this.userDetails = resp.user;
            _this.location = _this.userDetails.country;
            _this.changeLocationForm.controls['location'].setValue(_this.location);
            _this.is_2fa = (resp.user.is_2fa === 0) ? false : true;
            _this.twoFAType = resp.user.twofa_type;
            if (_this.twoFAType != null) {
                console.log(_this.twoFAType);
                _this.showOutsideBtn = false;
            }
            if (resp.user.country_code) {
                _this.countryCode = resp.user.country_code;
            }
            else {
                _this.countryCode = (_this.countries.filter(function (c) { return c.name === _this.location; }))[0].code;
            }
            _this.phoneNumber = resp.user.phone_number;
            _this.is_loader = true;
            _this.gender = (_this.userDetails.gender === 0 || _this.userDetails.gender === 2) ? 2 : 1;
            _this.theme_id = resp.user.theme_id;
            _this.profileImg = resp.user.profile_pic;
            _this.profileHeaderImg = resp.user.profile_header_pic;
            _this.loading = false;
            _this.themeSet = _this.themeOptions.filter(function (x) { return x.id === _this.theme_id; })[0].theme;
            _this.themeService.changeTheme(_this.themeSet);
        }, function (error) {
            _this.toastrService.show(_this._configuration.ErrorFetchingResult, '', {
                status: _this._configuration.ToasterStatusError,
                duration: _this._configuration.ToasterDuration,
                position: _this._configuration.ToasterPosition
            });
            _this.is_loader = true;
            _this.loading = false;
        }, function () {
            _this.is_loader = true;
            _this.loading = false;
        });
        this.getEvolve();
        this.plafFormUpdate();
        this.getThemes();
    };
    SecurityComponent.prototype.showThemeSelector = function () {
        this.showMoreThemes = true;
    };
    SecurityComponent.prototype.closeTheme = function () {
        this.showMoreThemes = false;
    };
    SecurityComponent.prototype.getEvolve = function () {
        var _this = this;
        this._dataservice
            .getAll('getEvolvePlatformVersion?type=0')
            .subscribe(function (resp) {
            _this.evolve = resp;
            _this.evolve = _this.evolve.data;
            if (_this.evolve.status === _this._configuration.ResponseStatusError) {
                return;
            }
        }, function (error) {
            //alert('An error occured while fetching the result.');
        }, function () {
        });
    };
    SecurityComponent.prototype.onChangeTheme = function () {
    };
    SecurityComponent.prototype.plafFormUpdate = function () {
        var _this = this;
        this._dataservice
            .getAll('getEvolvePlatformVersion?type=1')
            .subscribe(function (resp) {
            _this.platform = resp;
            _this.platform = _this.platform.data;
            if (_this.platform.status === _this._configuration.ResponseStatusError) {
                return;
            }
        }, function (error) {
            //alert('An error occured while fetching the result.');
        }, function () {
        });
    };
    SecurityComponent.prototype.getThemes = function () {
        var _this = this;
        this._dataservice
            .getAll('userPurchase/getThemes')
            .subscribe(function (resp) {
            _this.themes = resp;
            _this.themes = _this.themes.themes;
            console.log(resp);
            if (_this.platform.status === _this._configuration.ResponseStatusError) {
                return;
            }
        }, function (error) {
            //alert('An error occured while fetching the result.');
        }, function () {
        });
    };
    SecurityComponent.prototype.updateTheme = function (args) {
        if (args.value) {
            this._dataservice
                .postCall(this._configuration.UpdateNameValueApi, {
                name: 'theme_id',
                value: args.value
            })
                .subscribe(function (resp) {
                if (resp.status === 'SUCCESS') {
                    return;
                }
            }, function (error) {
            }, function () {
            });
        }
    };
    SecurityComponent.prototype.changeLocationShow = function () {
        this.isShowLocation = true;
    };
    SecurityComponent.prototype.changeLocationCancel = function () {
        this.isShowLocation = false;
    };
    SecurityComponent.prototype.changeLocationSubmit = function () {
        var _this = this;
        if (this.changeLocationForm.controls['location'].value) {
            this._dataservice
                .postCall(this._configuration.UpdateNameValueApi, {
                name: 'country',
                value: this.changeLocationForm.controls['location'].value
            })
                .subscribe(function (resp) {
                if (resp.status === 'SUCCESS') {
                    _this.location = _this.changeLocationForm.controls['location'].value;
                    _this.countryCode = (_this.countries.filter(function (c) { return c.name === _this.location; }))[0].code;
                    _this.isShowLocation = false;
                    return;
                }
                _this.isError = resp.message;
                return;
            }, function (error) {
                _this.isError = 'An error occured while fetching the result.';
            }, function () {
            });
        }
        else {
            this.isError = 'Please enter location';
        }
    };
    SecurityComponent.prototype.changeGender = function () {
        this.isShowGender = true;
    };
    SecurityComponent.prototype.genderCancel = function () {
        this.isShowGender = false;
    };
    SecurityComponent.prototype.genderSubmit = function () {
        var _this = this;
        if (this.changeGenderForm.controls['gender'].value) {
            this._dataservice
                .postCall(this._configuration.UpdateNameValueApi, {
                name: 'gender',
                value: this.changeGenderForm.controls['gender'].value
            })
                .subscribe(function (resp) {
                if (resp.status === 'SUCCESS') {
                    _this.gender = (_this.changeGenderForm.controls['gender'].value === 2) ? 0 : 1;
                    _this.isShowGender = false;
                    return;
                }
                _this.isError = resp.message;
                return;
            }, function (error) {
                _this.isError = 'An error occured while fetching the result.';
            }, function () {
            });
        }
        else {
            this.isError = 'Please select gender';
        }
    };
    SecurityComponent.prototype.changePasswordShow = function () {
        this.isShowChangePass = true;
    };
    SecurityComponent.prototype.changePasswordSubmit = function () {
        var _this = this;
        this.isSubmit = 'Loading...';
        console.log(this.changePassForm.controls['currentPassword'].value);
        if (this.changePassForm.controls['currentPassword'].value && this.changePassForm.controls['newPassword'].value) {
            this._dataservice
                .postCall(this._configuration.ChangePasswordApi, {
                newPassword: this.changePassForm.controls['newPassword'].value,
                currentPassword: this.changePassForm.controls['currentPassword'].value,
                email: this.userDetails.email
            })
                .subscribe(function (resp) {
                if (resp.status === 'SUCCESS') {
                    _this.isSubmit = 'SUBMIT';
                    _this.router.navigateByUrl('/login');
                    return;
                }
                _this.isSubmit = 'SUBMIT';
                _this.isError = resp.message;
                return;
            }, function (error) {
                _this.isSubmit = 'SUBMIT';
                //alert('An error occured while fetching the result.');
            }, function () {
            });
        }
        else {
            this.isSubmit = 'SUBMIT';
            this.isError = "All field is required";
        }
    };
    SecurityComponent.prototype.changePasswordCancel = function () {
        this.isShowChangePass = false;
    };
    SecurityComponent.prototype.onSelectionChange = function (entry) {
        this.twoFAType = entry;
    };
    SecurityComponent.prototype.toggleVisibility = function (e) {
        console.log(this.is_2fa);
    };
    SecurityComponent.prototype.updateSettings = function () {
        var _this = this;
        this.is_loader = false;
        var param = {
            is_2fa: this.is_2fa,
            twofa_type: this.twoFAType,
            phone_number: this.phoneNumber,
            country_code: this.countryCode
        };
        this._dataservice
            .postCall(this._configuration.UpdateUserSettingsApi, param)
            .subscribe(function (resp) {
            if (resp.status === _this._configuration.ResponseStatusError) {
                _this.errorMsg = resp.message;
                _this.is_loader = true;
                return;
            }
            _this.successMsg = "2FA settings updated successfully";
            _this.is_loader = true;
        }, function (error) {
            _this.errorMsg = 'An error occured while fetching the result.';
            _this.is_loader = true;
        }, function () {
            _this.is_loader = true;
        });
    };
    SecurityComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
            selector: 'app-security',
            template: __webpack_require__(/*! ./security.component.html */ "./src/app/pages/security/security.component.html"),
            styles: [__webpack_require__(/*! ./security.component.scss */ "./src/app/pages/security/security.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_coutries_service__WEBPACK_IMPORTED_MODULE_4__["CoutriesService"], _dataservice_apiservice_component__WEBPACK_IMPORTED_MODULE_5__["ApiService"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_1__["NbToastrService"], _dataservice_app_constant_component__WEBPACK_IMPORTED_MODULE_2__["Configuration"], _nebular_theme__WEBPACK_IMPORTED_MODULE_1__["NbThemeService"]])
    ], SecurityComponent);
    return SecurityComponent;
}());



/***/ }),

/***/ "./src/app/pages/security/security.module.ts":
/*!***************************************************!*\
  !*** ./src/app/pages/security/security.module.ts ***!
  \***************************************************/
/*! exports provided: SecurityModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityModule", function() { return SecurityModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_coutries_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../services/coutries.service */ "./src/app/services/coutries.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _nebular_theme__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @nebular/theme */ "./node_modules/@nebular/theme/index.js");
/* harmony import */ var _security_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./security.component */ "./src/app/pages/security/security.component.ts");
/* harmony import */ var _header_header_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../header/header.module */ "./src/app/pages/header/header.module.ts");










var routes = [
    { path: '', component: _security_component__WEBPACK_IMPORTED_MODULE_8__["SecurityComponent"] }
];
var SecurityModule = /** @class */ (function () {
    function SecurityModule() {
    }
    SecurityModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [_security_component__WEBPACK_IMPORTED_MODULE_8__["SecurityComponent"]],
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"].forChild(routes),
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbLayoutModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbCardModule"],
                _angular_common_http__WEBPACK_IMPORTED_MODULE_6__["HttpClientModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbButtonModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbInputModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbSpinnerModule"],
                _header_header_module__WEBPACK_IMPORTED_MODULE_9__["HeaderModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbLayoutModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbCardModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbListModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbInputModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbButtonModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbCheckboxModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbCalendarModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbActionsModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbSidebarModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbSelectModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_7__["NbSpinnerModule"]
            ],
            providers: [_services_coutries_service__WEBPACK_IMPORTED_MODULE_5__["CoutriesService"]]
        })
    ], SecurityModule);
    return SecurityModule;
}());



/***/ })

}]);
//# sourceMappingURL=pages-security-security-module.js.map