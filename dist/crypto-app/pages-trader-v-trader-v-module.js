(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pages-trader-v-trader-v-module"],{

/***/ "./src/app/pages/dataservice/streamer.utility.js":
/*!*******************************************************!*\
  !*** ./src/app/pages/dataservice/streamer.utility.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var CCC = CCC || {};

CCC.STATIC = CCC.STATIC || {};

CCC.STATIC.TYPE = {
  'TRADE': '0',
  'FEEDNEWS': '1',
  'CURRENT': '2',
  'LOADCOMPLETE': '3',
  'COINPAIRS': '4',
  'CURRENTAGG': '5',
  'TOPLIST': '6',
  'TOPLISTCHANGE': '7',
  'ORDERBOOK': '8',
  'FULLORDERBOOK': '9',
  'ACTIVATION': '10',
  'FULLVOLUME': '11',
  'TRADECATCHUP': '100',
  'NEWSCATCHUP': '101',
  'TRADECATCHUPCOMPLETE': '300',
  'NEWSCATCHUPCOMPLETE': '301'
};

CCC.STATIC.CURRENCY = CCC.STATIC.CURRENCY || {};

CCC.STATIC.CURRENCY.SYMBOL = {
  'BTC': 'Ƀ',
  'LTC': 'Ł',
  'DAO': 'Ð',
  'USD': '$',
  'CNY': '¥',
  'EUR': '€',
  'GBP': '£',
  'JPY': '¥',
  'PLN': 'zł',
  'RUB': '₽',
  'ETH': 'Ξ',
  'GOLD': 'Gold g',
  'INR': '₹',
  'BRL': 'R$'
};

CCC.STATIC.CURRENCY.getSymbol = function(symbol) {
  return CCC.STATIC.CURRENCY.SYMBOL[symbol] || symbol;
};

CCC.STATIC.UTIL = {
  exchangeNameMapping: {
    'CCCAGG': 'CryptoCompare Index',
    'BTCChina': 'BTCC'
  },
  isMobile: function(userAgent) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(userAgent) ||
      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0, 4)))
      return true;
    return false;
  },
  convertToMB: function(bytes) {
    return (parseInt(bytes, 10) / 1024 / 1024).toFixed(2) + ' MB';
  },
  getNameForExchange: function(exchangeName) {
    if (this.exchangeNameMapping.hasOwnProperty(exchangeName)) {
      return this.exchangeNameMapping[exchangeName];
    }
    return exchangeName;
  },
  noExponents: function(value) {
    var data = String(value).split(/[eE]/);
    if (data.length == 1) return data[0];

    var z = '',
      sign = value < 0 ? '-' : '',
      str = data[0].replace('.', ''),
      mag = Number(data[1]) + 1;

    if (mag < 0) {
      z = sign + '0.';
      while (mag++) z += '0';
      return z + str.replace(/^\-/, '');
    }
    mag -= str.length;
    while (mag--) z += '0';
    return str + z;
  },
  reduceFloatVal: function(value) {
    value = parseFloat(value);
    if (value > 1) {
      value = Math.round(value * 100) / 100;
      return value;
    }
    if (value >= 0.00001000) {
      return parseFloat(value.toPrecision(4));
    }
    if (value >= 0.00000100) {
      return parseFloat(value.toPrecision(3));
    }
    if (value >= 0.00000010) {
      return parseFloat(value.toPrecision(2));
    }
    return parseFloat(value.toPrecision(1));
  },
  reduceReal: function(value) {
    value = parseFloat(value);
    return parseFloat(value.toFixed(8));
  },
  convertCurrentKeyToAll: function(key) {
    var valuesArray = key.split("~");
    valuesArray[0] = CCC.STATIC.TYPE.CURRENTAGG;
    valuesArray[1] = 'CCCAGG';
    return valuesArray.join('~');
  },
  convertCurrentKeyToTrade: function(key) {
    var valuesArray = key.split("~");
    valuesArray[0] = CCC.STATIC.TYPE.TRADE;
    return valuesArray.join('~');
  },
  convertValueToDisplay: function(symbol, value, filterNumberFunctionAngularJS, type, fullNumbers) {
    var prefix = '';
    var valueSign = 1;
    value = parseFloat(value);
    var valueAbs = Math.abs(value);
    var decimalsOnBigNumbers = 2;
    var decimalsOnNormalNumbers = 2;
    var decimalsOnSmallNumbers = 4;
    if (fullNumbers === true) {
      decimalsOnBigNumbers = 2;
      decimalsOnNormalNumbers = 0;
      decimalsOnSmallNumbers = 4;
    }
    if (type == "8decimals") {
      decimalsOnBigNumbers = 4;
      decimalsOnNormalNumbers = 8;
      decimalsOnSmallNumbers = 8;
      if (value < 0.0001 && value >= 0.00001) { decimalsOnSmallNumbers = 4; }
      if (value < 0.001 && value >= 0.0001) { decimalsOnSmallNumbers = 5; }
      if (value < 0.01 && value >= 0.001) { decimalsOnSmallNumbers = 6; }
      if (value < 0.1 && value >= 0.01) { decimalsOnSmallNumbers = 7; }
    }
    if (symbol != '') { prefix = symbol + ' '; }
    if (value < 0) { valueSign = -1; }
    if (value == 0) { return prefix + '0'; }

    if (value < 0.00001000 && value >= 0.00000100 && decimalsOnSmallNumbers > 3) {
      decimalsOnSmallNumbers = 3;
    }
    if (value < 0.00000100 && value >= 0.00000010 && decimalsOnSmallNumbers > 2) {
      decimalsOnSmallNumbers = 2;
    }
    if (value < 0.00000010 && decimalsOnSmallNumbers > 1) {
      decimalsOnSmallNumbers = 1;
    }

    if (type == "short" || type == "8decimals") {
      if (valueAbs > 10000000000) {
        valueAbs = valueAbs / 1000000000;
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';
      }
      if (valueAbs > 10000000) {
        valueAbs = valueAbs / 1000000;
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';
      }
      if (valueAbs > 10000) {
        valueAbs = valueAbs / 1000;
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';
      }
      if (type == "8decimals" && valueAbs >= 100) {
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers);
      }
      if (valueAbs >= 1) {
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);
      }
      return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);
    }
    else {
      if (valueAbs >= 1) {
        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);
      }

      return prefix + this.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));
    }
  }
};


CCC.TRADE = CCC.TRADE || {};
/*
trade fields binary values always in the last ~
*/

CCC.TRADE.FLAGS = {
        'SELL': 0x1 // hex for binary 1
  ,     'BUY': 0x2 // hex for binary 10
  ,     'UNKNOWN': 0x4 // hex for binary 100
}

CCC.TRADE.FIELDS = {
      'T': 0x0 // hex for binary 0, it is a special case of fields that are always there TYPE
  ,   'M': 0x0 // hex for binary 0, it is a special case of fields that are always there MARKET
  ,   'FSYM': 0x0 // hex for binary 0, it is a special case of fields that are always there FROM SYMBOL
  ,   'TSYM': 0x0 // hex for binary 0, it is a special case of fields that are always there TO SYMBOL
  ,   'F': 0x0 // hex for binary 0, it is a special case of fields that are always there FLAGS
  ,   'ID': 0x1 // hex for binary 1                                                       ID
  ,   'TS': 0x2 // hex for binary 10                                                      TIMESTAMP
  ,   'Q': 0x4 // hex for binary 100                                                     QUANTITY
  ,   'P': 0x8 // hex for binary 1000                                                    PRICE
  ,   'TOTAL': 0x10 // hex for binary 10000                                                   TOTAL
};

CCC.TRADE.DISPLAY = CCC.TRADE.DISPLAY || {};
CCC.TRADE.DISPLAY.FIELDS = {
  'T': { "Show": false },
  'M': { "Show": true, 'Filter': 'Market' },
  'FSYM': { "Show": true, 'Filter': 'CurrencySymbol' },
  'TSYM': { "Show": true, 'Filter': 'CurrencySymbol' },
  'F': { "Show": true, 'Filter': 'TradeFlag' },
  'ID': { "Show": true, 'Filter': 'Text' },
  'TS': { 'Show': true, 'Filter': 'Date', 'Format': 'yyyy MMMM dd HH:mm:ss' },
  'Q': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FSYM' },
  'P': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TSYM' },
  'TOTAL': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TSYM' }
};

CCC.TRADE.pack = function(tradeObject) {
  var mask = 0;
  var packedTrade = '';
  for (var field in tradeObject) {
    packedTrade += '~' + tradeObject[field];
    mask |= this.FIELDS[field];
  }
  return packedTrade.substr(1) + '~' + mask.toString(16);
};

CCC.TRADE.unpack = function(tradeString) {
  var valuesArray = tradeString.split("~");
  var valuesArrayLenght = valuesArray.length;
  var mask = valuesArray[valuesArrayLenght - 1];
  var maskInt = parseInt(mask, 16);
  var unpackedTrade = {};
  var currentField = 0;
  for (var property in this.FIELDS) {
    if (this.FIELDS[property] === 0) {
      unpackedTrade[property] = valuesArray[currentField];
      currentField++;
    }
    else if (maskInt & this.FIELDS[property]) {
      unpackedTrade[property] = valuesArray[currentField];
      currentField++;
    }
  }

  return unpackedTrade;
};

CCC.TRADE.getKey = function(tradeObject) {
  return tradeObject['T'] + '~' + tradeObject['M'] + '~' + tradeObject['FSYM'] + '~' + tradeObject['TSYM'];
};

CCC.CURRENT = CCC.CURRENT || {};
/*
current fields mask values always in the last ~
*/

CCC.CURRENT.FLAGS = {
      'PRICEUP': 0x1 // hex for binary 1
  ,   'PRICEDOWN': 0x2 // hex for binary 10
  ,   'PRICEUNCHANGED': 0x4 // hex for binary 100
  ,   'BIDUP': 0x8 // hex for binary 1000
  ,   'BIDDOWN': 0x10 // hex for binary 10000
  ,   'BIDUNCHANGED': 0x20 // hex for binary 100000
  ,   'OFFERUP': 0x40 // hex for binary 1000000
  ,   'OFFERDOWN': 0x80 // hex for binary 10000000
  ,   'OFFERUNCHANGED': 0x100 // hex for binary 100000000
  ,   'AVGUP': 0x200 // hex for binary 1000000000
  ,   'AVGDOWN': 0x400 // hex for binary 10000000000
  ,   'AVGUNCHANGED': 0x800 // hex for binary 100000000000
};


CCC.CURRENT.FIELDS = {
      'TYPE': 0x0 // hex for binary 0, it is a special case of fields that are always there
  ,   'MARKET': 0x0 // hex for binary 0, it is a special case of fields that are always there
  ,   'FROMSYMBOL': 0x0 // hex for binary 0, it is a special case of fields that are always there
  ,   'TOSYMBOL': 0x0 // hex for binary 0, it is a special case of fields that are always there
  ,   'FLAGS': 0x0 // hex for binary 0, it is a special case of fields that are always there
  ,   'PRICE': 0x1 // hex for binary 1
  ,   'BID': 0x2 // hex for binary 10
  ,   'OFFER': 0x4 // hex for binary 100
  ,   'LASTUPDATE': 0x8 // hex for binary 1000
  ,   'AVG': 0x10 // hex for binary 10000
  ,   'LASTVOLUME': 0x20 // hex for binary 100000
  ,   'LASTVOLUMETO': 0x40 // hex for binary 1000000
  ,   'LASTTRADEID': 0x80 // hex for binary 10000000
  ,   'VOLUMEHOUR': 0x100 // hex for binary 100000000
  ,   'VOLUMEHOURTO': 0x200 // hex for binary 1000000000
  ,   'VOLUME24HOUR': 0x400 // hex for binary 10000000000
  ,   'VOLUME24HOURTO': 0x800 // hex for binary 100000000000
  ,   'OPENHOUR': 0x1000 // hex for binary 1000000000000
  ,   'HIGHHOUR': 0x2000 // hex for binary 10000000000000
  ,   'LOWHOUR': 0x4000 // hex for binary 100000000000000
  ,   'OPEN24HOUR': 0x8000 // hex for binary 1000000000000000
  ,   'HIGH24HOUR': 0x10000 // hex for binary 10000000000000000
  ,   'LOW24HOUR': 0x20000 // hex for binary 100000000000000000
  ,   'LASTMARKET': 0x40000 // hex for binary 1000000000000000000, this is a special case and will only appear on CCCAGG messages
};

CCC.CURRENT.DISPLAY = CCC.CURRENT.DISPLAY || {};
CCC.CURRENT.DISPLAY.FIELDS = {
  'TYPE': { 'Show': false },
  'MARKET': { 'Show': true, 'Filter': 'Market' },
  'FROMSYMBOL': { 'Show': false },
  'TOSYMBOL': { 'Show': false },
  'FLAGS': { 'Show': false },
  'PRICE': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'BID': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'OFFER': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LASTUPDATE': { 'Show': true, 'Filter': 'Date', 'Format': 'yyyy MMMM dd HH:mm:ss' },
  'AVG': { 'Show': true, ' Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LASTVOLUME': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },
  'LASTVOLUMETO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LASTTRADEID': { 'Show': true, 'Filter': 'String' },
  'VOLUMEHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },
  'VOLUMEHOURTO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'VOLUME24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },
  'VOLUME24HOURTO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'OPENHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'HIGHHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LOWHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'OPEN24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'HIGH24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LOW24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },
  'LASTMARKET': { 'Show': true, 'Filter': 'String' },
  'CHANGE24HOUR': { 'Show': true, 'Filter': 'String' },
  'CHANGE24HOURPCT': { 'Show': true, 'Filter': 'String' },
  'FULLVOLUMEFROM': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },
  'FULLVOLUMETO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' }
};

CCC.CURRENT.pack = function(currentObject) {
  var mask = 0;
  var packedCurrent = '';
  for (var property in this.FIELDS) {
    if (currentObject.hasOwnProperty(property)) {
      packedCurrent += '~' + currentObject[property];
      mask |= this.FIELDS[property];
    }
  }
  //removing first character beacsue it is a ~
  return packedCurrent.substr(1) + '~' + mask.toString(16);
};

CCC.CURRENT.unpack = function(value) {
  var valuesArray = value.split("~");
  var valuesArrayLenght = valuesArray.length;
  var mask = valuesArray[valuesArrayLenght - 1];
  var maskInt = parseInt(mask, 16);
  var unpackedCurrent = {};
  var currentField = 0;
  for (var property in this.FIELDS) {
    if (this.FIELDS[property] === 0) {
      unpackedCurrent[property] = valuesArray[currentField];
      currentField++;
    }
    else if (maskInt & this.FIELDS[property]) {
      //i know this is a hack, for cccagg, future code please don't hate me:(, i did this to avoid
      //subscribing to trades as well in order to show the last market
      if (property === 'LASTMARKET') {
        unpackedCurrent[property] = valuesArray[currentField];
      }
      else {
        unpackedCurrent[property] = parseFloat(valuesArray[currentField]);
      }
      currentField++;
    }
  }

  return unpackedCurrent;
};
CCC.CURRENT.getKey = function(currentObject) {
  return currentObject['TYPE'] + '~' + currentObject['MARKET'] + '~' + currentObject['FROMSYMBOL'] + '~' + currentObject['TOSYMBOL'];
};
CCC.CURRENT.getKeyFromStreamerData = function(streamerData) {
  var valuesArray = streamerData.split("~");
  return valuesArray[0] + '~' + valuesArray[1] + '~' + valuesArray[2] + '~' + valuesArray[3];
};

CCC.FULLVOLUME = CCC.FULLVOLUME || {};

CCC.FULLVOLUME.FIELDS = {
  'TYPE': 0x0,
  'SYMBOL': 0x0,
  'FULLVOLUME': 0x0
};

CCC.FULLVOLUME.unpack = function(volStr) {
  var valuesArray = volStr.split("~");
  var unpackedCurrent = {};
  var currentField = 0;
  var fields = this.FIELDS;
  for (var property in fields) {
    if (fields[property] == 0) {
      unpackedCurrent[property] = valuesArray[currentField];
      currentField++;
    }
  }
  return unpackedCurrent;
};

CCC.FULLVOLUME.pack = function(volObj) {
  var packedVol = '';
  var fields = this.FIELDS;
  
  for(var property in fields) {
    if (volObj.hasOwnProperty(property) && fields[property] == 0) {
      packedVol += '~' + volObj[property];  
    }
  }
  return packedVol.substr(1);
};

CCC.noExponents = function(value) {
  var data = String(value).split(/[eE]/);
  if (data.length == 1) return data[0];

  var z = '',
    sign = value < 0 ? '-' : '',
    str = data[0].replace('.', ''),
    mag = Number(data[1]) + 1;

  if (mag < 0) {
    z = sign + '0.';
    while (mag++) z += '0';
    return z + str.replace(/^\-/, '');
  }
  mag -= str.length;
  while (mag--) z += '0';
  return str + z;
};

CCC.filterNumberFunctionPolyfill = function(value, decimals) {
  var decimalsDenominator = Math.pow(10, decimals);
  var numberWithCorrectDecimals = Math.round(value * decimalsDenominator) / decimalsDenominator;
  var parts = numberWithCorrectDecimals.toString().split(".");
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return parts.join(".");
}

CCC.convertValueToDisplay = function(symbol, value, type, fullNumbers) {
  var prefix = '';
  var valueSign = 1;
  value = parseFloat(value);
  var valueAbs = Math.abs(value);
  var decimalsOnBigNumbers = 2;
  var decimalsOnNormalNumbers = 2;
  var decimalsOnSmallNumbers = 4;
  if (fullNumbers === true) {
    decimalsOnBigNumbers = 2;
    decimalsOnNormalNumbers = 0;
    decimalsOnSmallNumbers = 4;
  }
  if (symbol != '') {
    prefix = symbol + ' ';
  }
  if (value < 0) {
    valueSign = -1;
  }

  if (value == 0) {
    return prefix + '0';
  }

  if (value < 0.00001000 && value >= 0.00000100 && decimalsOnSmallNumbers > 3) {
    decimalsOnSmallNumbers = 3;
  }
  if (value < 0.00000100 && value >= 0.00000010 && decimalsOnSmallNumbers > 2) {
    decimalsOnSmallNumbers = 2;
  }
  if (value < 0.00000010 && value >= 0.00000001 && decimalsOnSmallNumbers > 1) {
    decimalsOnSmallNumbers = 1;
  }

  if (type == "short") {
    if (valueAbs > 10000000000) {
      valueAbs = valueAbs / 1000000000;
      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';
    }
    if (valueAbs > 10000000) {
      valueAbs = valueAbs / 1000000;
      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';
    }
    if (valueAbs > 10000) {
      valueAbs = valueAbs / 1000;
      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';
    }
    if (valueAbs >= 1) {
      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);
    }
    return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);
  }
  else {
    if (valueAbs >= 1) {
      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);
    }

    return prefix + CCC.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));
  }
};
/* harmony default export */ __webpack_exports__["default"] = (CCC);

/***/ }),

/***/ "./src/app/pages/trader-v/TraderVService.ts":
/*!**************************************************!*\
  !*** ./src/app/pages/trader-v/TraderVService.ts ***!
  \**************************************************/
/*! exports provided: TraderVService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraderVService", function() { return TraderVService; });
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ "./node_modules/socket.io-client/lib/index.js");
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");


var TraderVService = /** @class */ (function () {
    function TraderVService() {
        var _this = this;
        this.url = 'https://streamer.cryptocompare.com/';
        this.setSubscription = function (sub) {
            _this.socket.emit('SubAdd', { subs: sub });
        };
        this.removeSubscription = function (sub) {
            _this.socket.emit('SubRemove', { subs: sub });
        };
        this.getMessages = function () {
            return rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"].create(function (observer) {
                _this.socket.on('m', function (message) {
                    var trynext = { data: 'm', message: message };
                    observer.next(trynext);
                });
            });
        };
        this.socket = socket_io_client__WEBPACK_IMPORTED_MODULE_0__(this.url);
    }
    TraderVService.prototype.ngOnInit = function () {
    };
    return TraderVService;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/VHubService.ts":
/*!***********************************************!*\
  !*** ./src/app/pages/trader-v/VHubService.ts ***!
  \***********************************************/
/*! exports provided: VHubService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VHubService", function() { return VHubService; });
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ "./node_modules/socket.io-client/lib/index.js");
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");


var VHubService = /** @class */ (function () {
    function VHubService() {
        var _this = this;
        this.url = 'https://tradershub.cryptowzrd.com/tradersHub';
        this.getMessages = function () {
            return rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"].create(function (observer) {
                _this.socket.on('trader', function (message) {
                    var trynext = { data: 'trader', message: message };
                    observer.next(trynext);
                });
                _this.socket.on('disconnect', function (message) {
                    var trynext = { disconnected: true, connection: 'Your connection has been lost' };
                    observer.next(trynext);
                });
            });
        };
        this.socket = socket_io_client__WEBPACK_IMPORTED_MODULE_0__(this.url);
    }
    VHubService.prototype.ngOnInit = function () {
    };
    return VHubService;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart1/chart1.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart1/chart1.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card>\r\n  <nb-card-front>\r\n\t<nb-card class=\"f-h\">\r\n\t  <nb-card-header>\r\n\t    Profit\r\n\t  </nb-card-header>\r\n\t  <nb-card-body class=\"p-0 chart-card\">\r\n\t    <div class=\"flex pt-1 pb-3\">\r\n\t      <div class=\"col-6\">\r\n\t        <div class=\"profit-date\">Jun 1 - Jun 30</div>\r\n\t        <span class=\"green exo-font\">$</span>\r\n\t\t\t<span class=\"white exo-font\">800</span>\r\n\t      </div>\r\n\t      <div class=\"col-6\">\r\n\t        <div class=\"profit-date\">Jul 1 - Jul 31</div>\r\n\t        <span class=\"green exo-font\">$</span>\r\n\t\t\t<span class=\"white exo-font\">800</span>\r\n\t      </div>\r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>\r\n\t</nb-card>\r\n  </nb-card-front>\r\n  <nb-card-back>\r\n\t<nb-card class=\"f-h\">\r\n    <nb-card-header>\r\n      Profit\r\n    </nb-card-header>\r\n\t\t<app-chart8></app-chart8>\r\n\t</nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart1/chart1.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart1/chart1.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 120px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDEvY2hhcnQxLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksY0FBYSxFQUNoQjs7QUFFRDtFQUNJLDRCQUEyQixFQUM1QiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2NoYXJ0MS9jaGFydDEuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhcnQge1xyXG4gICAgaGVpZ2h0OiAxMjBweDtcclxufVxyXG5cclxuLmYtaCB7XHJcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEuNXJlbSk7XHJcbiAgfSJdfQ== */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart1/chart1.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart1/chart1.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart1Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart1Component", function() { return Chart1Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart1Component = /** @class */ (function () {
    function Chart1Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Jun - week1', 'Jun - week2', 'Jun - week3', 'Jun - week4', 'Jul - week1', 'Jul - week2', 'Jul - week3', 'Jul - week4'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [50, 90, 100, 60, 160, 200, 260, 190],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#6829cc'
                            }, {
                                offset: 1,
                                color: '#9a5fef'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    }
    Chart1Component.prototype.ngOnInit = function () {
    };
    Chart1Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart1',
            template: __webpack_require__(/*! ./chart1.component.html */ "./src/app/pages/trader-v/chart1/chart1.component.html"),
            styles: [__webpack_require__(/*! ./chart1.component.scss */ "./src/app/pages/trader-v/chart1/chart1.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart1Component);
    return Chart1Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart10/chart10.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart10/chart10.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div echarts [options]=\"option\" [options]=\"dataOptions\" style=\"height:490px\"></div>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart10/chart10.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart10/chart10.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2NoYXJ0MTAvY2hhcnQxMC5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart10/chart10.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart10/chart10.component.ts ***!
  \*************************************************************/
/*! exports provided: Chart10Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart10Component", function() { return Chart10Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Chart10Component = /** @class */ (function () {
    function Chart10Component() {
        var _this = this;
        this.testData = [];
        this.chartSize = 30;
        this.minuteArray = [];
        this.minuteNumber = 0;
        this.totalMin = [];
        this.totalMax = [];
        this.removeChartData = function () {
            console.log(_this.sInterval);
            clearInterval(_this.sInterval);
            _this.minuteArray = [];
            _this.rawData = [];
            _this.minuteNumber = 0;
            _this.totalMin = 0;
            _this.totalMax = 0;
            _this.latestPrice = 0;
            _this.data = [];
            _this.dates = [];
            _this.setData();
            _this.setOption();
            _this.sInterval = null;
        };
        this.setChartData = function (data) {
            _this.latestPrice = data;
            if (_this.rawData.length == 0) {
                console.log('inside first');
                var now = new Date();
                _this.minuteNumber = now.getMinutes();
                var hour = now.getHours();
                var min = now.getMinutes();
                var sec = now.getSeconds();
                var _time = (hour < 10 ? "0" : "") + hour + ":" + (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
                var _price = parseFloat(_this.latestPrice);
                _this.rawData.push([_time, _price, _price, _price, _price]);
            }
            if (!_this.sInterval)
                _this.sInterval = setInterval(function () {
                    if (_this.rawData.length > _this.chartSize)
                        _this.rawData.shift();
                    var newNow = new Date();
                    var _hour = newNow.getHours();
                    var _min = newNow.getMinutes();
                    var _sec = newNow.getSeconds();
                    var time = (_hour < 10 ? "0" : "") + _hour + ":" + (_min < 10 ? "0" : "") + _min + ":" + (_sec < 10 ? "0" : "") + _sec;
                    _this.minuteArray.push(_this.latestPrice);
                    var price = parseFloat(_this.latestPrice);
                    if (_this.minuteNumber == newNow.getMinutes() && newNow.getSeconds() <= 59) {
                        _this.rawData[_this.rawData.length - 1][2] = price;
                        _this.rawData[_this.rawData.length - 1][3] = Math.min.apply(null, _this.minuteArray);
                        _this.rawData[_this.rawData.length - 1][4] = Math.max.apply(null, _this.minuteArray);
                    }
                    //console.log(newNow.getMinutes(), this.minuteNumber);
                    if (newNow.getMinutes() != _this.minuteNumber) {
                        //console.log(newNow.getMinutes());
                        //console.log(this.minuteNumber);
                        _this.minuteNumber = newNow.getMinutes();
                        // this.rawData.push([time, price*Math.random()*2.5, price*Math.random()*29,price*Math.random()*2.5, price*Math.random()*2.5]);
                        _this.rawData.push([time, price, price, price, price]);
                        _this.minuteArray.length = 0;
                        _this.minuteArray.push(price);
                    }
                    _this.setData();
                    _this.setOption();
                }, 1000);
        };
        this.rawData = [
        // ['01:06:05', '3145.76', '3157.7', '3139.05', '3166.42'],
        // ['01:06:06', '3090.49', '3141.59', '46.47', '1.50%', '3084.25', '3142.1', '193817136', '22508492', '-'],
        // ['01:06:07', '3063.51', '3095.12', '19.22', '0.62%', '3049.11', '3119.03', '206108384', '24071968', '-'],
        // ['01:06:08', '3120.09', '3075.91', '-60.62', '-1.93%', '3052.94', '3129.54', '246749680', '26650278', '-'],
        // ['01:06:09', '3251.21', '3136.53', '-37.6', '-1.18%', '3135.82', '3251.21', '306139296', '34826696', '-'],
        // ['01:06:10', '3212.82', '3174.13', '-30.78', '-0.96%', '3171.14', '3238.98', '249098080', '29015516', '-'],
        // ['01:06:11', '3156.09', '3204.91', '76.61', '2.45%', '3129.73', '3207.94', '248192160', '28335594', '-'],
        // ['01:06:12', '3148.14', '3128.3', '-82.06', '-2.56%', '3122.57', '3175.13', '250861632', '26684996', '-'],
        // ['01:06:13', '3273.75', '3210.36', '-51.94', '-1.59%', '3210.31', '3288.5', '258312544', '28426564', '-'],
        // ['01:06:14', '3259', '3262.3', '-43.43', '-1.31%', '3234.24', '3286.79', '274658624', '29642450', '-'],
        // ['01:06:15', '3325.72', '3305.74', '-47.22', '-1.41%', '3294.66', '3354.8', '301927104', '34156428', '-'],
        // ['01:06:16', '3389.85', '3352.96', '-30.22', '-0.89%', '3290.22', '3390.22', '374517568', '41829884', '-'], 
        // ['01:06:17', '3347.26', '3383.18', '31.42', '0.94%', '3321.31', '3384.8', '317540992', '35842744', '-'],
        // ['01:06:18', '3357.1', '3351.76', '8.42', '0.25%', '3328.29', '3406.79', '366249248', '42097952', '-'],
        // ['01:06:19', '3327.32', '3343.34', '19.73', '0.59%', '3293.98', '3352.38', '353382976', '40787408', '-'],
        // ['01:06:20', '3189.08', '3323.61', '150.56', '4.74%', '3178.34', '3337', '410956032', '47375868', '-'],
        // ['01:06:21', '3114.56', '3173.05', '56.7', '1.82%', '3100.48', '3190.25', '357080800', '41629524', '-'],
        // ['01:06:22', '3189.73', '3116.35', '-260.14', '-7.70%', '3095.07', '3262.21', '401098784', '40988600', '-'],
        // ['01:06:23', '3343.6', '3376.5', '40.04', '1.20%', '3340.49', '3400.32', '339876768', '39225388', '-'],
        // ['01:06:24', '3224.07', '3336.46', '114.02', '3.54%', '3207.54', '3337.08', '282546240', '33061054', '-'], 
        // ['01:06:25', '3242.34', '3222.44', '-12.86', '-0.40%', '3193.98', '3268.48', '240190752', '26720452', '-'],
        // ['01:06:26', '3223.54', '3235.3', '5.98', '0.19%', '3214.41', '3259.39', '230725760', '27358878', '-'],
        // ['01:06:27', '3258.21', '3229.32', '-56.1', '-1.71%', '3191.58', '3275.19', '322064672', '36627308', '-'],
        // ['01:06:28', '3276.97', '3285.41', '-8.04', '-0.24%', '3267.51', '3404.83', '410240864', '45864804', '-'],
        // ['01:06:29', '3371.96', '3293.46', '-80.5', '-2.39%', '3285.09', '3381.57', '371131200', '39923032', '-'],
        // ['01:06:30', '3326.65', '3373.95', '22.51', '0.67%', '3312.21', '3374.9', '391918880', '43641672', '-'],
        // ['01:06:31', '3330.8', '3351.45', '0.93', '0.03%', '3303.18', '3394.22', '501661696', '53239848', '-'], 
        ];
    }
    Chart10Component.prototype.ngOnInit = function () {
        if (window.innerWidth < 768) {
            this.fontSize = 8;
            this.leftMargin = 55;
        }
        else if (768 <= window.innerWidth && window.innerWidth < 992) {
            this.fontSize = 10;
            this.leftMargin = 55;
        }
        else if (window.innerWidth >= 992 && window.innerWidth < 1200) {
            this.fontSize = 12;
            this.leftMargin = 60;
        }
        else if (window.innerWidth >= 1200) {
            this.fontSize = 14;
            this.leftMargin = 80;
        }
        this.chartSize = 30;
        if (window.innerWidth < 768) {
            this.chartSize = 10;
            this.rawData = [];
        }
    };
    Chart10Component.prototype.setData = function () {
        this.dates = this.rawData.map(function (item) {
            return item[0];
        });
        this.data = this.rawData.map(function (item) {
            return [+item[1], +item[2], +item[3], +item[4]];
        });
        var _offMin = [];
        this.rawData.map(function (x) {
            _offMin.push(x[1]);
            _offMin.push(x[2]);
            _offMin.push(x[3]);
            _offMin.push(x[4]);
        });
        this.totalMin = Math.min.apply(null, _offMin) - 5;
        this.totalMax = Math.max.apply(null, _offMin) + 5;
    };
    Chart10Component.prototype.calculateMA = function (dayCount, data) {
        var result = [];
        for (var i = 0, len = data.length; i < len; i++) {
            if (i < dayCount) {
                result.push('-');
                continue;
            }
            var sum = 0;
            for (var j = 0; j < dayCount; j++) {
                sum += data[i - j][1];
            }
            result.push(sum / dayCount);
        }
        return result;
    };
    Chart10Component.prototype.setOption = function () {
        this.option = {
            animation: false,
            tooltip: {
                extraCssText: 'text-transform: capitalize;',
                trigger: 'axis',
            },
            grid: {
                top: 10,
                left: this.leftMargin,
                right: 20,
                bottom: 40,
            },
            xAxis: {
                type: 'category',
                data: this.dates,
                axisLine: { lineStyle: { color: '#d1d1ff' } },
                axisLabel: {
                    fontSize: this.fontSize,
                    fontFamily: 'Exo',
                }
            },
            yAxis: {
                scale: true,
                axisLine: { lineStyle: { color: '#d1d1ff' } },
                splitLine: { show: false },
                min: this.totalMin,
                max: this.totalMax,
                axisLabel: {
                    color: "#fff",
                    fontSize: this.fontSize,
                    fontFamily: 'Exo',
                    formatter: function (v) {
                        return "$" + v.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                },
            },
            series: [
                {
                    // dimensions: [null, 'Open', 'Close', 'Lowest', 'Highest'],
                    type: 'candlestick',
                    data: this.data,
                    label: {
                        show: false,
                    },
                    itemStyle: {
                        normal: {
                            color: '#97f186',
                            color0: '#f0355c',
                            borderColor: '#97f186',
                            borderColor0: '#f0355c',
                            shadowBlur: 3,
                            shadowColor: "transparent"
                        }
                    }
                }
            ]
        };
    };
    Chart10Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart10',
            template: __webpack_require__(/*! ./chart10.component.html */ "./src/app/pages/trader-v/chart10/chart10.component.html"),
            styles: [__webpack_require__(/*! ./chart10.component.scss */ "./src/app/pages/trader-v/chart10/chart10.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart10Component);
    return Chart10Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart1m/chart1m.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart1m/chart1m.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card style=\"border-radius: 8px;\">\r\n  <nb-card-front>\r\n\t<nb-card class=\"mb-0\">\r\n\t  <nb-card-header>\r\n\t    Profit <button nbTooltip=\"The line chart displays your portfolio's profit in real time. The numbers above the chart display the total profit of the last week compared to the week before.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n\t  </nb-card-header>\r\n\t  <nb-card-body class=\"p-0 chart-card\">\r\n\t    <div class=\"flex pt-1 pb-3 align-price\">\r\n\t      <div class=\"col-6\" *ngFor=\"let item of profitHistory; let i = index;\">\r\n\t        <div class=\"profit-date\">{{item.startDate}} - {{item.endDate}}</div>\r\n\t        <span class=\"green exo-font\">$</span>\r\n\t\t\t<span class=\"white exo-font\">{{item.Profit | number:'.2'}}</span>\r\n\t      </div>\r\n\t      <!-- <div class=\"col-6\">\r\n\t        <div class=\"profit-date\">Jul 9 - Jul 16</div>\r\n\t        <span class=\"green exo-font\">$</span>\r\n\t\t\t<span class=\"white exo-font\">2315</span>\r\n\t      </div> -->\r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"chart\"></div>\r\n\t  </nb-card-body>\r\n\t</nb-card>\r\n  </nb-card-front>\r\n  <nb-card-back>\r\n\t<nb-card class=\"mb-0\">\r\n    <nb-card-header>\r\n      Profit <button nbTooltip=\"The bar chart displays your portfolio's profit during the last 7 days.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n    </nb-card-header>\r\n\t\t<app-chart8></app-chart8>\r\n\t</nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart1m/chart1m.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart1m/chart1m.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 140px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n.chart-card {\n  font-size: 13px; }\n\n@media (min-width: 768px) {\n    .chart-card {\n      font-size: .75rem; } }\n\n@media (min-width: 992px) {\n    .chart-card {\n      font-size: .75rem; } }\n\n@media (min-width: 1200px) {\n    .chart-card {\n      font-size: .88vw; } }\n\n@media screen and (min-width: 1500px) {\n    .chart-card {\n      font-size: 14px; } }\n\nnb-reveal-card {\n  height: 255px; }\n\nnb-card-front, nb-card-back {\n  height: 100%; }\n\nnb-card {\n  height: 100%; }\n\n.align-price {\n  position: absolute;\n  top: 2px;\n  left: 0;\n  width: 100%; }\n\nnb-card-header {\n  padding-left: 1.25rem;\n  padding-top: 1.25rem; }\n\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart1m/chart1m.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart1m/chart1m.component.ts ***!
  \*************************************************************/
/*! exports provided: Chart1Componentm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart1Componentm", function() { return Chart1Componentm; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _chart8_chart8_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chart8/chart8.component */ "./src/app/pages/trader-v/chart8/chart8.component.ts");




var Chart1Componentm = /** @class */ (function () {
    function Chart1Componentm() {
        var _this = this;
        this.data = [];
        this.time = [];
        this.profitHistory = [];
        this.setProfitHistory = function (data) {
            _this.profitHistory = data;
        };
        this.setChart8Data = function (data) {
            _this.Chart8Component.setData(data);
        };
        this.dbData = [];
        this.setData = function (data) {
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            console.log(_this.dbData);
            var minP = Math.min.apply(null, _this.dbData) - Math.min.apply(null, _this.dbData) * .001;
            var maxP = Math.max.apply(null, _this.dbData) + Math.max.apply(null, _this.dbData) * .001;
            var time = ((hour < 10 ? "0" : "") + hour) + ":" + (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
            if (_this.time.length > 10)
                _this.time.shift();
            _this.time.push(time);
            if (_this.dbData.length > 10) {
                _this.dbData.shift();
                //this.dbData.push(data, minP, maxP);
                _this.dbData.push(parseFloat(data));
            }
            else {
                // this.dbData.push(data, minP, maxP);
                _this.dbData.push(parseFloat(data));
            }
            _this.dataOptions = {
                series: [{
                        data: _this.dbData
                    }],
                xAxis: [{
                        data: _this.time
                    }],
                yAxis: {
                    min: minP,
                    max: maxP,
                },
            };
        };
    }
    Chart1Componentm.prototype.ngOnInit = function () {
        // this.setOptions([], false, [], []);
        this.setOptions([], false, [], []);
        // this.generateData(true, 8)
        // this.setOptions(this.data, true);
        // setInterval(() => {
        //   this.generateData(false, 1)
        //   this.setOptions(this.data, false);
        // }, 1500)
    };
    Chart1Componentm.prototype.generateData = function (isNew, less) {
        for (var i = 0; i < less; i++) {
            isNew ? '' : this.data.shift();
            this.data.push(Math.round(Math.random() * 1000 + 300));
        }
    };
    Chart1Componentm.prototype.setOptions = function (data, animation, minP, maxP) {
        this.chartOption = {
            animation: animation,
            tooltip: {
                trigger: "axis",
                position: function (point, params, dom, rect, size) {
                    //其中point为当前鼠标的位置，size中有两个属性：viewSize和contentSize，分别为外层div和tooltip提示框的大小
                    var x = point[0]; //
                    var y = point[1];
                    var viewWidth = size.viewSize[0];
                    var viewHeight = size.viewSize[1];
                    var boxWidth = size.contentSize[0];
                    var boxHeight = size.contentSize[1];
                    var posX = 0; //x坐标位置
                    var posY = 0; //y坐标位置
                    if (x < boxWidth) { //左边放不开
                        posX = 5;
                    }
                    // else{//左边放的下
                    //     posX = x-boxWidth; 
                    // }
                    if (y < boxHeight) { //上边放不开
                        posY = 5;
                    }
                    // else{//上边放得下
                    //     posY = y-boxHeight;
                    // }
                    return [posX, posY];
                },
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 8,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + Number(p[0].value).toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 20,
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['08:15:05', '08:15:06', '08:15:07', '08:15:08', '08:15:09', '08:15:10', '08:15:11', '08:15:12'],
                show: false
            },
            yAxis: {
                min: minP,
                max: maxP,
                type: 'value',
                show: false
            },
            series: [{
                    data: data,
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "rgba(255,255,255,.7)",
                        shadowBlur: 12,
                        color: "#fff",
                    },
                    emphasis: {
                        itemStyle: {
                            borderColor: "#00ffb4",
                            borderWidth: 0,
                            opacity: 1,
                        }
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#6829cc'
                            },
                            {
                                offset: 1,
                                color: '#9a5fef'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart8_chart8_component__WEBPACK_IMPORTED_MODULE_3__["Chart8Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart8_chart8_component__WEBPACK_IMPORTED_MODULE_3__["Chart8Component"])
    ], Chart1Componentm.prototype, "Chart8Component", void 0);
    Chart1Componentm = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart1m',
            template: __webpack_require__(/*! ./chart1m.component.html */ "./src/app/pages/trader-v/chart1m/chart1m.component.html"),
            styles: [__webpack_require__(/*! ./chart1m.component.scss */ "./src/app/pages/trader-v/chart1m/chart1m.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart1Componentm);
    return Chart1Componentm;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart2/chart2.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart2/chart2.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card>\r\n  <nb-card-front>\r\n\t<nb-card class=\"f-h\">\r\n\t  <nb-card-header class=\"p-2 flex\">\r\n\t    <nb-select selected=\"BTC\" class=\"first col-6 col-md-4 p-0 transparent\" (selectedChange)=\"change($event)\">\r\n\t      <nb-option value=\"BTC\">BTC</nb-option>\r\n\t      <nb-option value=\"ETH\">ETH</nb-option>\r\n\t      <nb-option value=\"GAME\">GAME</nb-option>\r\n\t      <nb-option value=\"LBC\">LBC</nb-option>\r\n\t    </nb-select>\r\n\t  </nb-card-header>\r\n\t  <nb-card-body class=\"p-0 chart-card\">\r\n\t    <div class=\"flex pt-1 pb-3\">\r\n\t      <div class=\"col-10 chart2-date coin-price\">\r\n\t          <span class=\"green exo-font\">$</span>\r\n\t  \t\t<span class=\"white exo-font\">7,956.90</span>\r\n\t      </div>\r\n\t      <div class=\"col-12 p-0\">\r\n\t        <div class=\"chart2-percent\">\r\n\t          <span class=\"nb-arrow-dropup green\"></span>\r\n\t          <span class=\"green\">4%</span>\r\n\t        </div>\t        \r\n\t      </div>\r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>\r\n\t</nb-card>\r\n  </nb-card-front>\r\n  <nb-card-back>\r\n  <nb-card class=\"f-h\">\r\n  <nb-card-header>\r\n    Comparison\r\n  </nb-card-header>      \r\n  <div class=\"row-container-comparison\">\r\n\t  <div class=\"row-indicator purple\">24H % Change</div>\t  \r\n  </div>\r\n\t<app-flipchart2m></app-flipchart2m>\t\r\n</nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart2/chart2.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart2/chart2.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".f-h {\n  height: calc(100% - 1.5rem); }\n\n.chart {\n  height: 120px; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDIvY2hhcnQyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsNEJBQTJCLEVBQzVCOztBQUNEO0VBQ0UsY0FBYSxFQUNkIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvY2hhcnQyL2NoYXJ0Mi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mLWgge1xyXG4gIGhlaWdodDogY2FsYygxMDAlIC0gMS41cmVtKTtcclxufVxyXG4uY2hhcnQge1xyXG4gIGhlaWdodDogMTIwcHg7XHJcbn1cclxuIl19 */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart2/chart2.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart2/chart2.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart2Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart2Component", function() { return Chart2Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart2Component = /** @class */ (function () {
    function Chart2Component() {
        this.data = [];
        this.now = new Date(2018, 1, 1);
        this.oneDay = 24 * 3600 * 1000;
        this.value = Math.random() * 1000;
    }
    Chart2Component.prototype.ngOnInit = function () {
        this.setData();
        this.setOption(this.data);
    };
    Chart2Component.prototype.change = function (e) {
        this.data.length = 0;
        this.setData();
        this.setOption(this.data);
    };
    Chart2Component.prototype.randomData = function () {
        this.now = new Date(+this.now + this.oneDay);
        this.value = this.value + Math.random() * 21 - 10;
        return {
            name: this.now,
            value: [
                [this.now.getFullYear(), this.now.getMonth() + 1, this.now.getDate()].join('/'),
                Math.round(this.value)
            ]
        };
    };
    Chart2Component.prototype.setData = function () {
        for (var i = 0; i < 100; i++) {
            this.data.push(this.randomData());
        }
    };
    Chart2Component.prototype.setOption = function (data) {
        this.chartOption = {
            grid: {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0,
            },
            xAxis: {
                type: 'time',
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                axisLine: {
                    show: false,
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    show: false,
                },
            },
            yAxis: {
                boundaryGap: [0, '5%'],
                axisLine: {
                    show: false,
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    show: false,
                },
            },
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    type: "line",
                    axis: "x",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].value[0] + " : " + "$" + p[0].value[1];
                }
            },
            series: [
                {
                    type: 'line',
                    symbol: 'circle',
                    sampling: 'average',
                    itemStyle: {
                        normal: {
                            opacity: 0,
                        },
                        emphasis: {
                            opacity: 0,
                        },
                    },
                    lineStyle: {
                        normal: {
                            width: 0,
                        },
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#6829cc'
                            },
                            {
                                offset: 1,
                                color: '#9a5fef'
                            }
                        ])
                    },
                    data: data
                },
            ],
            animation: true,
        };
    };
    Chart2Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart2',
            template: __webpack_require__(/*! ./chart2.component.html */ "./src/app/pages/trader-v/chart2/chart2.component.html"),
            styles: [__webpack_require__(/*! ./chart2.component.scss */ "./src/app/pages/trader-v/chart2/chart2.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart2Component);
    return Chart2Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart2m/chart2m.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart2m/chart2m.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card style=\"border-radius: 8px;\" [nbSpinner]=\"loading\">\r\n  <nb-card-front>\r\n\t<nb-card class=\"mb-0\">\r\n\t  <nb-card-header class=\"p-0 p-md-2 flex\">\r\n\t    <nb-select selected=\"BTC\" class=\"first button-width p-0 transparent\" (selectedChange)=\"change($event)\">\r\n\t      <nb-option value=\"BTC\">BTC</nb-option>\r\n\t      <nb-option value=\"XRP\">XRP</nb-option>\r\n\t      <nb-option value=\"ETH\">ETH</nb-option>\r\n\t      <nb-option value=\"LTC\">LTC</nb-option>\r\n\t\t</nb-select>\r\n\t\t<button nbTooltip=\"The line chart displays the live price of the selected coin.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n\t  </nb-card-header>\r\n\t  <nb-card-body class=\"p-0 chart-card\">\r\n\t    <div class=\"flex pt-1 pb-3\">\r\n\t      <div class=\"col-9 chart2-date coin-price\">\r\n\t          <span class=\"green exo-font\">$</span>\r\n\t  \t\t<span class=\"white exo-font\" id=\"chart2pricec\">{{coinPrice | number: '1.2-2'}}</span>\r\n\t      </div>\r\n\t      <div class=\"col-3 p-0 move-top\">\r\n\t        <div class=\"chart2-percent\" id=\"btcpc\">\t\t\t  \r\n\t\t\t  <span [ngClass]=\"(percentNumber<0)?'red':'green'\" >{{percent}}</span>\r\n\t\t\t  <span \r\n\t\t\t  [ngClass]=\"[((percentNumber<0)?'red':'green'), ((percentNumber<0)?'nb-arrow-dropdown':'nb-arrow-dropup')]\"  \r\n\t\t\t  ></span>\r\n\t        </div>\t        \r\n\t      </div>\r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"chart\"></div>\r\n\t  </nb-card-body>\r\n\t</nb-card>\r\n  </nb-card-front>\r\n  <nb-card-back>\r\n  <nb-card class=\"mb-0\">\r\n  <nb-card-header>\r\n    Comparison <button nbTooltip=\"The chart displays the 24 hour % change during the last 7 days for BTC, XRP, ETH, and LTC. Each day's percent change is calculated using the open price and the close price for the day.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n  </nb-card-header>      \r\n  <div class=\"row-container-comparison\">\r\n\t  <div class=\"row-indicator trader-text\">24H % Change</div>\t  \r\n  </div>\r\n\t<app-chart9 class=\"padding-c9\"></app-chart9>\t\r\n</nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/pages/trader-v/chart2m/chart2m.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart2m/chart2m.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-default :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-body .selected {\n  text-align: center; }\n.nb-theme-default :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host .trader-text {\n  color: #c198fb; }\n.nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-cosmic :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-body .selected {\n  text-align: center; }\n.nb-theme-cosmic :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-corporate :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-body .selected {\n  text-align: center; }\n.nb-theme-corporate :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-reveal-card nb-card-front nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.f-h {\n  height: calc(100% - 1.5rem); }\n.chart {\n  height: 140px; }\n.row-container-comparison {\n  position: absolute;\n  top: 42px;\n  right: 0px; }\n@media (min-width: 768px) {\n    .row-container-comparison {\n      top: 60px;\n      right: 0; } }\n.button-width {\n  width: 120px; }\n.padding-c9 {\n  height: 100%;\n  padding-top: 30px; }\n.chart-card, .trader-text {\n  font-size: 13px; }\n@media (min-width: 768px) {\n    .chart-card, .trader-text {\n      font-size: .75rem; } }\n@media (min-width: 992px) {\n    .chart-card, .trader-text {\n      font-size: .75rem; } }\n@media (min-width: 1200px) {\n    .chart-card, .trader-text {\n      font-size: .88vw; } }\n@media screen and (min-width: 1500px) {\n    .chart-card, .trader-text {\n      font-size: 14px; } }\nnb-reveal-card {\n  height: 255px; }\nnb-card-front, nb-card-back {\n  height: 100%; }\nnb-card {\n  height: 100%; }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n@media (max-width: 767.98px) {\n  .chart2-percent, .coin-price, .move-top {\n    margin-top: 0;\n    top: -15px; } }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart2m/chart2m.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart2m/chart2m.component.ts ***!
  \*************************************************************/
/*! exports provided: Chart2Componentm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart2Componentm", function() { return Chart2Componentm; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _chart9_chart9_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../chart9/chart9.component */ "./src/app/pages/trader-v/chart9/chart9.component.ts");
/* harmony import */ var _pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../pipes/short-number.pipe */ "./src/app/pipes/short-number.pipe.ts");





var Chart2Componentm = /** @class */ (function () {
    function Chart2Componentm(pipe) {
        var _this = this;
        this.pipe = pipe;
        this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.data = [];
        this.now = new Date(2019, 10, 3);
        this.oneDay = 24 * 3600 * 1000;
        this.value = Math.random() * 1000;
        this.setChart9Data = function (data) {
            _this.Chart9Component.setData(data);
        };
        this.coins = [
            { name: "BTC", price: 8421, percent: 0, change: 200, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "ETH", price: 885, percent: 0, change: 80, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "XRP", price: 75, percent: 0, change: 5, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "LTC", price: 175, percent: 0, change: 14, arrow: "nb-arrow-dropup", color: "#00ff39" },
        ];
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 4535.45, percent: 0, change: 500, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1" },
            { title: "TOTAL MARKET CAP", value: 248.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
            { title: "TOTAL VOLUME", value: 94.54, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1" },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
        ];
        this.loading = false;
        // minP: number;
        // maxP: number;
        this.percentNumber = 0;
        this.selected = this.coins[0];
        this.clearData = function () {
            _this.data = [];
        };
        this.setDataForChart = function (data) {
            _this.coinPrice = data.value[1];
            _this.percent = data.percent;
            var minP = Math.min.apply(null, _this.data) - Math.min.apply(null, _this.data) * .001;
            var maxP = Math.max.apply(null, _this.data) + Math.max.apply(null, _this.data) * .0005;
            _this.percentNumber = parseFloat(data.percent);
            _this.arrow = data.arrow;
            _this.color = data.color;
            _this.data.unshift(data);
            if (_this.data.length > 1100) {
                _this.data.shift();
            }
            _this.setOption(_this.data, minP, maxP);
            _this.loading = false;
        };
    }
    Chart2Componentm.prototype.getSelectedValue = function () {
        return this.selected.name;
    };
    Chart2Componentm.prototype.ngOnInit = function () {
    };
    Chart2Componentm.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        // this.interval.unsubscribe();
    };
    Chart2Componentm.prototype.change = function (e) {
        this.data.length = 0;
        this.loading = true;
        // this.setData();
        // this.setOption(this.data);
        this.selected = this.coins.find(function (v) { return v.name === e; });
        this.changed.emit(this.selected.name);
    };
    Chart2Componentm.prototype.randomData = function () {
        this.now = new Date(+this.now + this.oneDay);
        this.value = this.value + Math.round(Math.random()) * 2 - 1
            * (Math.random() * 21 - 10);
        return {
            name: this.now.toString(),
            value: [
                [this.now.getFullYear(), this.now.getMonth() + 1, this.now.getDate()].join('/'),
                Math.round(this.value)
            ]
        };
    };
    Chart2Componentm.prototype.setData = function () {
        for (var i = 0; i < 1000; i++) {
            this.data.push(this.randomData());
        }
    };
    Chart2Componentm.prototype.setOption = function (data, minP, maxP) {
        this.chartOption = {
            animation: false,
            grid: {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0,
            },
            xAxis: {
                type: 'time',
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                axisLine: {
                    show: false,
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    show: false,
                },
            },
            yAxis: {
                // min:9640,
                // max:9655,
                min: minP,
                max: maxP,
                //boundaryGap: [0, '5%'],
                boundaryGap: [0, '5%'],
                axisLine: {
                    show: false,
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    show: false,
                },
            },
            tooltip: {
                trigger: "axis",
                position: function (point, params, dom, rect, size) {
                    //其中point为当前鼠标的位置，size中有两个属性：viewSize和contentSize，分别为外层div和tooltip提示框的大小
                    var x = point[0]; //
                    var y = point[1];
                    var viewWidth = size.viewSize[0];
                    var viewHeight = size.viewSize[1];
                    var boxWidth = size.contentSize[0];
                    var boxHeight = size.contentSize[1];
                    var posX = 0; //x坐标位置
                    var posY = 0; //y坐标位置
                    if (x < boxWidth) { //左边放不开
                        posX = 5;
                    }
                    // else{//左边放的下
                    //     posX = x-boxWidth; 
                    // }
                    if (y < boxHeight) { //上边放不开
                        posY = 5;
                    }
                    // else{//上边放得下
                    //     posY = y-boxHeight;
                    // }
                    return [posX, posY];
                },
                axisPointer: {
                    type: "line",
                    axis: "x",
                },
                padding: 16,
                formatter: function (p) {
                    var dbDate = new Date(p[0].value[0]);
                    var hour = dbDate.getHours();
                    var min = dbDate.getMinutes();
                    var sec = dbDate.getSeconds();
                    var format = (hour < 10 ? "0" + hour : hour) + ":" + (min < 10 ? "0" + min : min) + ":" + (sec < 10 ? "0" + sec : sec);
                    //return  format+ " : " + "$" + p[0].value[1];
                    //return "$"+this.pipe.transform(p[0].value);
                    //return  format + " : " + "$" + + p[0].value[1];
                    return format + " : $" + p[0].value[1].toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
            },
            series: [
                {
                    type: 'line',
                    symbolSize: 1,
                    sampling: 'average',
                    itemStyle: {
                        color: "#fff",
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 0,
                            opacity: 1,
                        }
                    },
                    lineStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 12,
                        opacity: 1,
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#6829cc'
                            },
                            {
                                offset: 1,
                                color: '#9a5fef'
                            }
                        ])
                    },
                    data: data
                },
            ]
        };
    };
    Chart2Componentm.prototype.updateData = function () {
        var _this = this;
        this.coins.map(function (val) {
            var random = (Math.random() * val.change);
            var newVal = val.price + (_this.trueOrFalse() ? random : -random);
            if (val.price > newVal) {
                val.arrow = "nb-arrow-dropdown";
                val.color = "red";
                val.percent = (val.price - newVal) / val.price * 50;
            }
            else {
                val.percent = (newVal - val.price) / val.price * 50;
                val.arrow = "nb-arrow-dropup";
                val.color = "#00ff39";
            }
            val.price = newVal;
            return val;
        });
    };
    Chart2Componentm.prototype.trueOrFalse = function () {
        return Math.round(Math.random());
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart9_chart9_component__WEBPACK_IMPORTED_MODULE_3__["Chart9Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart9_chart9_component__WEBPACK_IMPORTED_MODULE_3__["Chart9Component"])
    ], Chart2Componentm.prototype, "Chart9Component", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], Chart2Componentm.prototype, "changed", void 0);
    Chart2Componentm = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart2m',
            template: __webpack_require__(/*! ./chart2m.component.html */ "./src/app/pages/trader-v/chart2m/chart2m.component.html"),
            styles: [__webpack_require__(/*! ./chart2m.component.scss */ "./src/app/pages/trader-v/chart2m/chart2m.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_4__["ShortNumberPipe"]])
    ], Chart2Componentm);
    return Chart2Componentm;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart3/chart3.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart3/chart3.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card class=\"f-h\">\r\n  <nb-card-header class=\"p-2\">\r\n    <div class=\"flex\" style=\"justify-content: space-between\">\r\n\r\n      <nb-select selected=\"BTC\" class=\"col-4 col-md-2 p-0 transparent\" (selectedChange)=\"change($event)\">\r\n        <nb-option value=\"BTC\">BTC</nb-option>\r\n        <nb-option value=\"ETH\">ETH</nb-option>\r\n        <nb-option value=\"GAME\">GAME</nb-option>\r\n        <nb-option value=\"LBC\">LBC</nb-option>\r\n      </nb-select>\r\n\t  \r\n      <nb-select selected=\"DAY\" class=\"col-4 col-md-2 p-0 text-right transparent\">\r\n        <nb-option value=\"MINUTE\" class=\"option\">MINUTE</nb-option>\r\n        <nb-option value=\"DAY\" class=\"option\">DAY</nb-option>\r\n        <nb-option value=\"WEEK\" class=\"option\">WEEK</nb-option>\r\n        <nb-option value=\"MONTH\" class=\"option\">MONTH</nb-option>\r\n      </nb-select>\r\n    </div>\r\n\r\n  </nb-card-header>\r\n  <nb-tabset fullWidth=\"true\">\r\n    <nb-tab tabTitle=\"Line\">\r\n    <nb-card-body class=\"p-0 chart-card\">\r\n      <div class=\"d-flex justify-content-center\" style=\"margin-top:35px\">\r\n        <span class=\"green\">$</span><span class=\"mr-3 white\">{{data.value}}</span>\r\n        <span class=\"green\">{{data.percent}}%\r\n          <i class=\"green nb-arrow-dropup\"></i>\r\n        </span>\r\n      </div>    \r\n      <div echarts [options]=\"chartOption\" class=\"f-h chart\"></div>\r\n    </nb-card-body>\r\n    </nb-tab>\r\n    <nb-tab tabTitle=\"Candlestick\">\r\n    </nb-tab>\r\n  </nb-tabset>  \r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart3/chart3.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart3/chart3.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".f-h {\n  height: 100% !important;\n  min-height: 426px; }\n\n.nb-theme-cosmic nb-tabset .tabset .tab a::before {\n  background: #6b64d2 !important;\n  background-image: transparent !important; }\n\n[_nghost-c21] .tabset[_ngcontent-c21] .tab[_ngcontent-c21] {\n  width: 20% !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDMvY2hhcnQzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDMvY2hhcnQzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usd0JBQXNCO0VBQ3RCLGtCQUFpQixFQUNsQjs7QUFDRDtFQUNDLCtCQUE4QjtFQUM5Qix5Q0FBd0MsRUFDeEM7O0FDQ0Q7RURDQyxzQkFBcUIsRUFDckIiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDMvY2hhcnQzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmYtaCB7XHJcbiAgaGVpZ2h0OiAxMDAlIWltcG9ydGFudDtcclxuICBtaW4taGVpZ2h0OiA0MjZweDtcclxufVxyXG4ubmItdGhlbWUtY29zbWljIG5iLXRhYnNldCAudGFic2V0IC50YWIgYTo6YmVmb3JlIHtcclxuXHRiYWNrZ3JvdW5kOiAjNmI2NGQyICFpbXBvcnRhbnQ7XHJcblx0YmFja2dyb3VuZC1pbWFnZTogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcclxufVxyXG5bX25naG9zdC1jMjFdIC50YWJzZXRbX25nY29udGVudC1jMjFdIC50YWJbX25nY29udGVudC1jMjFdIHtcclxuXHR3aWR0aDogMjAlICFpbXBvcnRhbnQ7XHJcbn0iLCIuZi1oIHtcbiAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIG1pbi1oZWlnaHQ6IDQyNnB4OyB9XG5cbi5uYi10aGVtZS1jb3NtaWMgbmItdGFic2V0IC50YWJzZXQgLnRhYiBhOjpiZWZvcmUge1xuICBiYWNrZ3JvdW5kOiAjNmI2NGQyICFpbXBvcnRhbnQ7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7IH1cblxuW19uZ2hvc3QtYzIxXSAudGFic2V0W19uZ2NvbnRlbnQtYzIxXSAudGFiW19uZ2NvbnRlbnQtYzIxXSB7XG4gIHdpZHRoOiAyMCUgIWltcG9ydGFudDsgfVxuIl19 */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart3/chart3.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart3/chart3.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart3Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart3Component", function() { return Chart3Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart3Component = /** @class */ (function () {
    function Chart3Component() {
        this.testData = {
            "BTC": { value: 3456.28, percent: 4.785, data1: [144705823767, 144559095511, 145532407824, 142332265290, 142712068281, 141047579185, 142155488297, 140235249257, 142919691145, 139754094335, 138431320116, 138887294806], data2: [8150.05, 8131.74, 8196.65, 8016.49, 8037.97, 7944.31, 8006.76, 7898.73, 8049.92, 7871.69, 7797.70, 7823.34] },
            "ETH": { value: 1456.28, percent: 1.285, data1: this.randomData(100), data2: this.randomData(10000) },
            "GAME": { value: 856.28, percent: 0.453, data1: this.randomData(100), data2: this.randomData(10000) },
            "LBC": { value: 1256.28, percent: 3.115, data1: this.randomData(100), data2: this.randomData(10000) },
        };
    }
    Chart3Component.prototype.ngOnInit = function () {
        this.data = this.testData["BTC"];
        this.setOption(this.data.data1, this.data.data2);
    };
    Chart3Component.prototype.randomData = function (x) {
        var data = [];
        for (var i = 0; i < 12; i++) {
            data.push((Math.random() * x).toFixed(2));
        }
        return data;
    };
    Chart3Component.prototype.change = function (e) {
        this.data = this.testData[e];
        this.setOption(this.data.data1, this.data.data2);
    };
    Chart3Component.prototype.setOption = function (data1, data2) {
        this.chartOption = {
            grid: {
                top: 50,
                bottom: 50,
                left: 50,
                right: 50
            },
            tooltip: {
                show: true,
                trigger: "axis",
                padding: 16,
                formatter: function (p) {
                    var time = p[0].axisValue;
                    var left = p[0].value;
                    var right = "$" + p[1].value;
                    return "Time: " + time + " <br> " + "Market Cap: " + left + " <br> " + "Price: " + right;
                }
            },
            xAxis: [
                {
                    type: "category",
                    axisLine: {
                        show: false,
                    },
                    axisPointer: {
                        z: -1,
                        show: true,
                        lineStyle: {
                            color: "#5350ad",
                            type: "solid",
                            width: 2,
                        },
                        label: {
                            show: false
                        }
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#fff"
                    },
                    data: ["01:00", "03:00", "05:00", "07:00", "09:00", "11:00", "13:00", "15:00", "17:00", "19:00", "21:00", "23:00"],
                    position: "bottom"
                }
            ],
            yAxis: [
                {
                    type: "value",
                    splitLine: {
                        lineStyle: {
                            type: "dashed"
                        }
                    },
                    axisLine: {
                        show: false
                    },
                    axisPointer: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#fff",
                        formatter: function (v) { return "$" + v / 1000000000 + "B"; }
                    },
                    position: "left"
                },
                {
                    type: "value",
                    splitLine: {
                        lineStyle: {
                            type: "dashed"
                        }
                    },
                    axisLine: {
                        show: false
                    },
                    axisPointer: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#d1d1ff",
                        formatter: function (v) { return "$" + v; }
                    },
                    position: "right"
                }
            ],
            series: [
                {
                    type: 'line',
                    id: "one",
                    smooth: true,
                    itemStyle: {
                        zIndex: 999999,
                        normal: {
                            opacity: 0,
                        },
                        emphasis: {
                            color: '#75fa5d',
                            borderColor: "#59ff8c",
                            borderWidth: 3,
                            opacity: 1,
                            zIndex: 999999,
                        },
                    },
                    symbolSize: 9,
                    lineStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 1, 0, [
                            {
                                offset: 0,
                                color: '#59ff8c'
                            },
                            {
                                offset: 1,
                                color: '#75fa5d'
                            }
                        ]),
                        width: 5,
                        curveness: 0.88,
                        shadowColor: "#8fff94",
                        shadowBlur: 10,
                        opacity: 1,
                    },
                    data: data1
                },
                {
                    type: 'line',
                    id: "two",
                    smooth: true,
                    itemStyle: {
                        normal: {
                            opacity: 0
                        },
                        emphasis: {
                            color: '#715ff6',
                            borderColor: "#a196f8",
                            borderWidth: 3,
                            opacity: 1,
                        },
                    },
                    symbolSize: 9,
                    yAxisIndex: 1,
                    lineStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 1, 0, [
                            {
                                offset: 0,
                                color: '#a196f8'
                            },
                            {
                                offset: 1,
                                color: '#715ff6'
                            }
                        ]),
                        width: 5,
                        curveness: 0.88,
                        shadowColor: "#6143e1",
                        shadowBlur: 10,
                        opacity: 1,
                    },
                    data: data2
                }
            ]
        };
    };
    Chart3Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart3',
            template: __webpack_require__(/*! ./chart3.component.html */ "./src/app/pages/trader-v/chart3/chart3.component.html"),
            styles: [__webpack_require__(/*! ./chart3.component.scss */ "./src/app/pages/trader-v/chart3/chart3.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart3Component);
    return Chart3Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart3m/chart3m.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart3m/chart3m.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\r\n<nb-card class=\"f-h mb-3\"[nbSpinner]=\"loading\">\r\n  <nb-card-header class=\"p-2\" >\r\n    <div class=\"flex\">\r\n\r\n      <nb-select selected=\"BTC\" class=\"button-width p-0 transparent\" (selectedChange)=\"change($event)\">\r\n        <nb-option value=\"BTC\">BTC</nb-option>\r\n        <nb-option value=\"XRP\">XRP</nb-option>\r\n        <nb-option value=\"ETH\">ETH</nb-option>\r\n        <nb-option value=\"LTC\">LTC</nb-option>\r\n      </nb-select>\r\n      <button nbTooltip=\"The multi-line chart displays the selected coin's market cap value (in purple) and the coin's price (in green). The candlestick chart is a one minute candlestick chart of the selected coin.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n    </div>\r\n\r\n  </nb-card-header>\r\n  <nb-tabset fullWidth=\"true\">\r\n    <nb-tab tabTitle=\"Line\">\r\n    <nb-card-body class=\"p-0 chart-card\">\r\n      <div class=\"d-flex justify-content-center price-font-size\" style=\"margin-top:35px\">\r\n        <span class=\"green\">$</span><span class=\"mr-3 white\" id=\"btcplc\">{{coinPrice | number:'.2'}}</span>\r\n        <span [ngClass]=\"(percentNumber<0)?'red':'green'\"  id=\"btcPerc\">{{percent}}\r\n          <i [ngClass]=\"(percentNumber<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" ></i>\r\n        </span>\r\n      </div>    \r\n      <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"f-h chart\"></div>\r\n    </nb-card-body>\r\n    </nb-tab>\r\n    <nb-tab tabTitle=\"Candlestick\">\r\n\t<app-chart10></app-chart10>\r\n    </nb-tab>\r\n  </nb-tabset>  \r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart3m/chart3m.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/chart3m/chart3m.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.f-h {\n  height: 100% !important;\n  min-height: 430px; }\n.button-width {\n  width: 120px; }\n.price-font-size {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .price-font-size {\n      font-size: 20px; } }\n@media (min-width: 992px) {\n    .price-font-size {\n      font-size: 20px; } }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvbm9kZV9tb2R1bGVzL0BuZWJ1bGFyL3RoZW1lL3N0eWxlcy9fdGhlbWluZy5zY3NzIiwiL1VzZXJzL29zY2FyL0Rvd25sb2Fkcy9Gcm9udGVuZF9WMy9ub2RlX21vZHVsZXMvQG5lYnVsYXIvdGhlbWUvc3R5bGVzL2NvcmUvX21peGlucy5zY3NzIiwiL1VzZXJzL29zY2FyL0Rvd25sb2Fkcy9Gcm9udGVuZF9WMy9ub2RlX21vZHVsZXMvQG5lYnVsYXIvdGhlbWUvc3R5bGVzL2NvcmUvX2Z1bmN0aW9ucy5zY3NzIiwiL1VzZXJzL29zY2FyL0Rvd25sb2Fkcy9Gcm9udGVuZF9WMy9ub2RlX21vZHVsZXMvQG5lYnVsYXIvdGhlbWUvc3R5bGVzL3RoZW1lcy9fZGVmYXVsdC5zY3NzIiwiL1VzZXJzL29zY2FyL0Rvd25sb2Fkcy9Gcm9udGVuZF9WMy9ub2RlX21vZHVsZXMvQG5lYnVsYXIvdGhlbWUvc3R5bGVzL3RoZW1lcy9fY29zbWljLnNjc3MiLCIvVXNlcnMvb3NjYXIvRG93bmxvYWRzL0Zyb250ZW5kX1YzL25vZGVfbW9kdWxlcy9AbmVidWxhci90aGVtZS9zdHlsZXMvdGhlbWVzL19jb3Jwb3JhdGUuc2NzcyIsIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDNtL2NoYXJ0M20uY29tcG9uZW50LnNjc3MiLCIvVXNlcnMvb3NjYXIvRG93bmxvYWRzL0Zyb250ZW5kX1YzL25vZGVfbW9kdWxlcy9ib290c3RyYXAvc2Nzcy9taXhpbnMvX2JyZWFrcG9pbnRzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUdIOztHQUVHO0FDVEg7Ozs7R0FJRztBQXNLSDs7OztHQUlHO0FBc0JIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBbUhFO0FDdlRGOzs7O0dBSUc7QUNKSDs7OztHQUlHO0FESkg7Ozs7R0FJRztBREpIOzs7O0dBSUc7QUFzS0g7Ozs7R0FJRztBQXNCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1IRTtBR3ZURjs7OztHQUlHO0FGSkg7Ozs7R0FJRztBREpIOzs7O0dBSUc7QUFzS0g7Ozs7R0FJRztBQXNCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1IRTtBRXZURjs7OztHQUlHO0FESkg7Ozs7R0FJRztBREpIOzs7O0dBSUc7QUFzS0g7Ozs7R0FJRztBQXNCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1IRTtBSXZURjs7OztHQUlHO0FISkg7Ozs7R0FJRztBREpIOzs7O0dBSUc7QUFzS0g7Ozs7R0FJRztBQXNCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1IRTtBRXZURjs7OztHQUlHO0FESkg7Ozs7R0FJRztBREpIOzs7O0dBSUc7QUFzS0g7Ozs7R0FJRztBQXNCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1IRTtBRHJNRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW1CRTtBTXpIQTtFQUNDLGdCQUFlLEVBSWY7QUMyQ0g7SURoREU7TUFHRSxvQkFBbUIsRUFFcEIsRUFBQTtBTmlHSDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW1CRTtBTXpIQTtFQUNDLGdCQUFlLEVBSWY7QUMyQ0g7SURoREU7TUFHRSxvQkFBbUIsRUFFcEIsRUFBQTtBTmlHSDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW1CRTtBTXpIQTtFQUNDLGdCQUFlLEVBSWY7QUMyQ0g7SURoREU7TUFHRSxvQkFBbUIsRUFFcEIsRUFBQTtBQU1QO0VBQ0Usd0JBQXNCO0VBQ3RCLGtCQUFpQixFQUNsQjtBQUNEO0VBQ0MsYUFBWSxFQUNaO0FBRUQ7RUFDQyxnQkFBZSxFQU9mO0FDcUJHO0lEN0JKO01BR0UsZ0JBQWUsRUFLaEIsRUFBQTtBQ3FCRztJRDdCSjtNQU1FLGdCQUFlLEVBRWhCLEVBQUE7QUFDRDtFQUNDLHdCQUF1QjtFQUN2QixhQUFZO0VBQ1osZUFBeUI7RUFDekIsV0FBVSxFQUNWIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvY2hhcnQzbS9jaGFydDNtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuXG5cbi8qKlxuICogVGhpcyBpcyBhIHN0YXJ0aW5nIHBvaW50IHdoZXJlIHdlIGRlY2xhcmUgdGhlIG1hcHMgb2YgdGhlbWVzIGFuZCBnbG9iYWxseSBhdmFpbGFibGUgZnVuY3Rpb25zL21peGluc1xuICovXG5cbkBpbXBvcnQgJ2NvcmUvbWl4aW5zJztcbkBpbXBvcnQgJ2NvcmUvZnVuY3Rpb25zJztcbkBpbXBvcnQgJ2NvcmUvYnJlYWtpbmctbm90aWNlJztcblxuJG5iLWVuYWJsZWQtdGhlbWVzOiAoKSAhZ2xvYmFsO1xuJG5iLWVuYWJsZS1jc3MtdmFyaWFibGVzOiBmYWxzZSAhZ2xvYmFsO1xuXG4kbmItdGhlbWVzOiAoKSAhZ2xvYmFsO1xuJG5iLXRoZW1lcy1ub24tcHJvY2Vzc2VkOiAoKSAhZ2xvYmFsO1xuJG5iLXRoZW1lcy1leHBvcnQ6ICgpICFnbG9iYWw7XG5cbkBmdW5jdGlvbiBuYi10aGVtZSgka2V5KSB7XG4gIEByZXR1cm4gbWFwLWdldCgkdGhlbWUsICRrZXkpO1xufVxuXG5AZnVuY3Rpb24gbmItZ2V0LXZhbHVlKCR0aGVtZSwgJGtleSwgJHZhbHVlKSB7XG4gIEBpZiAodHlwZS1vZigkdmFsdWUpID09ICdzdHJpbmcnKSB7XG4gICAgJHRtcDogbWFwLWdldCgkdGhlbWUsICR2YWx1ZSk7XG5cbiAgICBAaWYgKCR0bXAgIT0gbnVsbCkge1xuICAgICAgQHJldHVybiBuYi1nZXQtdmFsdWUoJHRoZW1lLCAkdmFsdWUsICR0bXApO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gbWFwLWdldCgkdGhlbWUsICRrZXkpO1xufVxuXG5AZnVuY3Rpb24gY29udmVydC10by1jc3MtdmFyaWFibGVzKCR2YXJpYWJsZXMpIHtcbiAgJHJlc3VsdDogKCk7XG4gIEBlYWNoICR2YXIsICR2YWx1ZSBpbiAkdmFyaWFibGVzIHtcbiAgICAkcmVzdWx0OiBtYXAtc2V0KCRyZXN1bHQsICR2YXIsICctLXZhcigjeyR2YXJ9KScpO1xuICB9XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG5AZnVuY3Rpb24gc2V0LWdsb2JhbC10aGVtZS12YXJzKCR0aGVtZSwgJHRoZW1lLW5hbWUpIHtcbiAgJHRoZW1lOiAkdGhlbWUgIWdsb2JhbDtcbiAgJHRoZW1lLW5hbWU6ICR0aGVtZS1uYW1lICFnbG9iYWw7XG4gIEBpZiAoJG5iLWVuYWJsZS1jc3MtdmFyaWFibGVzKSB7XG4gICAgJHRoZW1lOiBjb252ZXJ0LXRvLWNzcy12YXJpYWJsZXMoJHRoZW1lKSAhZ2xvYmFsO1xuICB9XG4gIEByZXR1cm4gJHRoZW1lO1xufVxuXG5AZnVuY3Rpb24gbmItcmVnaXN0ZXItdGhlbWUoJHRoZW1lLCAkbmFtZSwgJGRlZmF1bHQ6IG51bGwpIHtcblxuICAkdGhlbWUtZGF0YTogKCk7XG5cblxuICBAaWYgKCRkZWZhdWx0ICE9IG51bGwpIHtcblxuICAgICR0aGVtZTogbWFwLW1lcmdlKG1hcC1nZXQoJG5iLXRoZW1lcy1ub24tcHJvY2Vzc2VkLCAkZGVmYXVsdCksICR0aGVtZSk7XG4gICAgJG5iLXRoZW1lcy1ub24tcHJvY2Vzc2VkOiBtYXAtc2V0KCRuYi10aGVtZXMtbm9uLXByb2Nlc3NlZCwgJG5hbWUsICR0aGVtZSkgIWdsb2JhbDtcblxuICAgICR0aGVtZS1kYXRhOiBtYXAtc2V0KCR0aGVtZS1kYXRhLCBkYXRhLCAkdGhlbWUpO1xuICAgICRuYi10aGVtZXMtZXhwb3J0OiBtYXAtc2V0KCRuYi10aGVtZXMtZXhwb3J0LCAkbmFtZSwgbWFwLXNldCgkdGhlbWUtZGF0YSwgcGFyZW50LCAkZGVmYXVsdCkpICFnbG9iYWw7XG5cbiAgfSBAZWxzZSB7XG4gICAgJG5iLXRoZW1lcy1ub24tcHJvY2Vzc2VkOiBtYXAtc2V0KCRuYi10aGVtZXMtbm9uLXByb2Nlc3NlZCwgJG5hbWUsICR0aGVtZSkgIWdsb2JhbDtcblxuICAgICR0aGVtZS1kYXRhOiBtYXAtc2V0KCR0aGVtZS1kYXRhLCBkYXRhLCAkdGhlbWUpO1xuICAgICRuYi10aGVtZXMtZXhwb3J0OiBtYXAtc2V0KCRuYi10aGVtZXMtZXhwb3J0LCAkbmFtZSwgbWFwLXNldCgkdGhlbWUtZGF0YSwgcGFyZW50LCBudWxsKSkgIWdsb2JhbDtcbiAgfVxuXG4gICR0aGVtZS1wYXJzZWQ6ICgpO1xuICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHRoZW1lIHtcbiAgICAkdGhlbWUtcGFyc2VkOiBtYXAtc2V0KCR0aGVtZS1wYXJzZWQsICRrZXksIG5iLWdldC12YWx1ZSgkdGhlbWUsICRrZXksICR2YWx1ZSkpO1xuICB9XG5cbiAgLy8gZW5hYmxlIHJpZ2h0IGF3YXkgd2hlbiBpbnN0YWxsZWRcbiAgJHRoZW1lLXBhcnNlZDogc2V0LWdsb2JhbC10aGVtZS12YXJzKCR0aGVtZS1wYXJzZWQsICRuYW1lKTtcbiAgQHJldHVybiBtYXAtc2V0KCRuYi10aGVtZXMsICRuYW1lLCAkdGhlbWUtcGFyc2VkKTtcbn1cblxuQGZ1bmN0aW9uIGdldC1lbmFibGVkLXRoZW1lcygpIHtcbiAgJHRoZW1lcy10by1pbnN0YWxsOiAoKTtcblxuICBAaWYgKGxlbmd0aCgkbmItZW5hYmxlZC10aGVtZXMpID4gMCkge1xuICAgIEBlYWNoICR0aGVtZS1uYW1lIGluICRuYi1lbmFibGVkLXRoZW1lcyB7XG4gICAgICAkdGhlbWVzLXRvLWluc3RhbGw6IG1hcC1zZXQoJHRoZW1lcy10by1pbnN0YWxsLCAkdGhlbWUtbmFtZSwgbWFwLWdldCgkbmItdGhlbWVzLCAkdGhlbWUtbmFtZSkpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgJHRoZW1lcy10by1pbnN0YWxsOiAkbmItdGhlbWVzO1xuICB9XG5cbiAgQHJldHVybiAkdGhlbWVzLXRvLWluc3RhbGw7XG59XG5cbkBtaXhpbiBpbnN0YWxsLWNzcy12YXJpYWJsZXMoJHRoZW1lLW5hbWUsICR2YXJpYWJsZXMpIHtcbiAgLm5iLXRoZW1lLSN7JHRoZW1lLW5hbWV9IHtcbiAgICBAZWFjaCAkdmFyLCAkdmFsdWUgaW4gJHZhcmlhYmxlcyB7XG4gICAgICAtLSN7JHZhcn06ICR2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVE9ETzogd2UgaGlkZSA6aG9zdCBpbnNpZGUgb2YgaXQgd2hpY2ggaXMgbm90IG9idmlvdXNcbkBtaXhpbiBuYi1pbnN0YWxsLWNvbXBvbmVudCgpIHtcblxuICAkdGhlbWVzLXRvLWluc3RhbGw6IGdldC1lbmFibGVkLXRoZW1lcygpO1xuXG4gIEBlYWNoICR0aGVtZS1uYW1lLCAkdGhlbWUgaW4gJHRoZW1lcy10by1pbnN0YWxsIHtcbiAgICAvKlxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXG4gICAgICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvOGQwZWUzNDkzOWYxNGMwNzg3NmQyMjJjMjViNDA1ZWQ0NThhMzRkMy9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxXG5cbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXG4gICAgICB3aXRoIHNvbWV0aGluZyBkZWZpbmVkIGluc2lkZSBvZiBAY29udGVudCwgYnkgcHJlZml4aW5nICYuXG4gICAgICBGb3IgZXhhbXBsZSB0aGlzIHNjc3MgY29kZTpcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xuICAgICAgICAgIC5zb21lLXNlbGVjdG9yICYge1xuICAgICAgICAgICAgLi4uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBXaWxsIHJlc3VsdCBpbiBuZXh0IGNzczpcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xuICAgICAgICAgIC4uLlxuICAgICAgICB9XG5cbiAgICAgIEl0IGRvZXNuJ3Qgd29yayB3aXRoIDpob3N0LWNvbnRleHQgYmVjYXVzZSBhbmd1bGFyIHNwbGl0dGluZyBpdCBpbiB0d28gc2VsZWN0b3JzIGFuZCByZW1vdmVzXG4gICAgICBwcmVmaXggaW4gb25lIG9mIHRoZSBzZWxlY3RvcnMuXG4gICAgKi9cbiAgICAubmItdGhlbWUtI3skdGhlbWUtbmFtZX0gOmhvc3Qge1xuICAgICAgJHRoZW1lOiBzZXQtZ2xvYmFsLXRoZW1lLXZhcnMoJHRoZW1lLCAkdGhlbWUtbmFtZSk7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG5iLWZvci10aGVtZSgkbmFtZSkge1xuICBAaWYgKCR0aGVtZS1uYW1lID09ICRuYW1lKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gQWRkIGNvbnRlbnQgZm9yIHRoZW1lIGludG8gYSBsaXN0IG9mIHRoZW1lc1xuQG1peGluIG5iLWZvci10aGVtZXMoJG5hbWVzLi4uKSB7XG4gIEBlYWNoICRuYW1lIGluICRuYW1lcyB7XG4gICAgQGluY2x1ZGUgbmItZm9yLXRoZW1lKCRuYW1lKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG5iLWV4Y2VwdC10aGVtZSgkbmFtZSkge1xuICBAaWYgKCR0aGVtZS1uYW1lICE9ICRuYW1lKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gQWRkIGNvbnRlbnQgZXhjZXB0IGZvciB0aGVtZSBpbnRvIGEgbGlzdCBvZiB0aGVtZXNcbkBtaXhpbiBuYi1leGNlcHQtZm9yLXRoZW1lcygkbmFtZXMuLi4pIHtcbiAgQGVhY2ggJG5hbWUgaW4gJG5hbWVzIHtcbiAgICBAaW5jbHVkZSBuYi1leGNlcHQtdGhlbWUoJG5hbWUpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLyBUT0RPOiBhbm90aGVyIG1peGluZyBmb3IgdGhlIGFsbW9zdCBzYW1lIHRoaW5nXG5AbWl4aW4gbmItaW5zdGFsbC1yb290LWNvbXBvbmVudCgpIHtcbiAgQHdhcm4gJ2BuYi1pbnN0YWxsLXJvb3QtY29tcG9uZW50YCBpcyBkZXByaWNhdGVkLCByZXBsYWNlIHdpdGggYG5iLWluc3RhbGwtY29tcG9uZW50YCwgYXMgYGJvZHlgIGlzIHJvb3QgZWxlbWVudCBub3cnO1xuXG4gIEBpbmNsdWRlIG5iLWluc3RhbGwtY29tcG9uZW50KCkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBuYi1pbnN0YWxsLWdsb2JhbCgpIHtcbiAgJHRoZW1lcy10by1pbnN0YWxsOiBnZXQtZW5hYmxlZC10aGVtZXMoKTtcblxuICBAZWFjaCAkdGhlbWUtbmFtZSwgJHRoZW1lIGluICR0aGVtZXMtdG8taW5zdGFsbCB7XG4gICAgLm5iLXRoZW1lLSN7JHRoZW1lLW5hbWV9IHtcbiAgICAgICR0aGVtZTogc2V0LWdsb2JhbC10aGVtZS12YXJzKCR0aGVtZSwgJHRoZW1lLW5hbWUpO1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgJHRlbXA6IG5iLWJyZWFraW5nLW5vdGljZS1zaG93KCR0aGVtZSk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5cbkBtaXhpbiBuYi1zY3JvbGxiYXJzKCRmZywgJGJnLCAkc2l6ZSwgJGJvcmRlci1yYWRpdXM6ICRzaXplIC8gMikge1xuICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICB3aWR0aDogJHNpemU7XG4gICAgaGVpZ2h0OiAkc2l6ZTtcbiAgfVxuXG4gIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIGJhY2tncm91bmQ6IG5iLXRoZW1lKHNjcm9sbGJhci1jaXJjbGUpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcbiAgfVxuXG4gIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGJhY2tncm91bmQ6IG5iLXRoZW1lKHNjcm9sbGJhci1iYWNrZ3JvdW5kKTtcbiAgfVxuXG4gIC8vIFRPRE86IHJlbW92ZVxuICAvLyBGb3IgSW50ZXJuZXQgRXhwbG9yZXJcbiAgc2Nyb2xsYmFyLWZhY2UtY29sb3I6ICRmZztcbiAgc2Nyb2xsYmFyLXRyYWNrLWNvbG9yOiAkYmc7XG59XG5cbkBtaXhpbiBuYi1yYWRpYWwtZ3JhZGllbnQoJGNvbG9yLTEsICRjb2xvci0yLCAkY29sb3ItMykge1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItMjsgLyogT2xkIGJyb3dzZXJzICovXG4gIGJhY2tncm91bmQ6IC1tb3otcmFkaWFsLWdyYWRpZW50KGJvdHRvbSwgZWxsaXBzZSBjb3ZlciwgJGNvbG9yLTEgMCUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yLTIgNDUlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvci0zIDEwMCUpOyAvKiBGRjMuNi0xNSAqL1xuICBiYWNrZ3JvdW5kOiAtd2Via2l0LXJhZGlhbC1ncmFkaWVudChib3R0b20sIGVsbGlwc2UgY292ZXIsICRjb2xvci0xIDAlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvci0yIDQ1JSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sb3ItMyAxMDAlKTsgLyogQ2hyb21lMTAtMjUsU2FmYXJpNS4xLTYgKi9cbiAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGVsbGlwc2UgYXQgYm90dG9tLCAkY29sb3ItMSAwJSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sb3ItMiA0NSUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yLTMgMTAwJSk7IC8qIFczQywgSUUxMCssIEZGMTYrLCBDaHJvbWUyNissIE9wZXJhMTIrLCBTYWZhcmk3KyAqL1xuICBmaWx0ZXI6IHByb2dpZDpkeGltYWdldHJhbnNmb3JtLm1pY3Jvc29mdC5ncmFkaWVudChzdGFydENvbG9yc3RyPSckY29sb3ItMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbG9yc3RyPSckY29sb3ItMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyYWRpZW50VHlwZT0xKTsgLyogSUU2LTkgZmFsbGJhY2sgb24gaG9yaXpvbnRhbCBncmFkaWVudCAqL1xufVxuXG5AbWl4aW4gbmItcmlnaHQtZ3JhZGllbnQoJGxlZnQtY29sb3IsICRyaWdodC1jb2xvcikge1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICRsZWZ0LWNvbG9yLCAkcmlnaHQtY29sb3IpO1xufVxuXG5AbWl4aW4gbmItaGVhZGluZ3MoJGZyb206IDEsICR0bzogNikge1xuICBAZm9yICRpIGZyb20gJGZyb20gdGhyb3VnaCAkdG8ge1xuICAgIGgjeyRpfSB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBob3Zlci1mb2N1cy1hY3RpdmUge1xuICAmOmZvY3VzLFxuICAmOmFjdGl2ZSxcbiAgJjpob3ZlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIGNlbnRlci1ob3Jpem9udGFsLWFic29sdXRlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcbiAgbGVmdDogNTAlO1xufVxuXG5AbWl4aW4gaW5zdGFsbC10aHVtYigpIHtcbiAgJHRodW1iLXNlbGVjdG9yczogKFxuICAgICc6Oi13ZWJraXQtc2xpZGVyLXRodW1iJ1xuICAgICc6Oi1tb3otcmFuZ2UtdGh1bWInXG4gICAgJzo6LW1zLXRodW1iJ1xuICApO1xuXG4gIEBlYWNoICRzZWxlY3RvciBpbiAkdGh1bWItc2VsZWN0b3JzIHtcbiAgICAmI3skc2VsZWN0b3J9IHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gaW5zdGFsbC10cmFjaygpIHtcbiAgJHRodW1iLXNlbGVjdG9yczogKFxuICAgICc6Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNrJ1xuICAgICc6Oi1tb3otcmFuZ2UtdHJhY2snXG4gICAgJzo6LW1zLXRyYWNrJ1xuICApO1xuXG4gIEBlYWNoICRzZWxlY3RvciBpbiAkdGh1bWItc2VsZWN0b3JzIHtcbiAgICAmI3skc2VsZWN0b3J9IHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gaW5zdGFsbC1wbGFjZWhvbGRlcigkY29sb3IsICRmb250LXNpemUpIHtcbiAgJHBsYWNlaG9sZGVyLXNlbGVjdG9yczogKFxuICAgICc6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInXG4gICAgJzo6LW1vei1wbGFjZWhvbGRlcidcbiAgICAnOi1tb3otcGxhY2Vob2xkZXInXG4gICAgJzotbXMtaW5wdXQtcGxhY2Vob2xkZXInXG4gICk7XG5cbiAgJjo6cGxhY2Vob2xkZXIge1xuICAgIEBpbmNsdWRlIHBsYWNlaG9sZGVyKCRjb2xvciwgJGZvbnQtc2l6ZSk7XG4gIH1cblxuICBAZWFjaCAkc2VsZWN0b3IgaW4gJHBsYWNlaG9sZGVyLXNlbGVjdG9ycyB7XG4gICAgJiN7JHNlbGVjdG9yfSB7XG4gICAgICBAaW5jbHVkZSBwbGFjZWhvbGRlcigkY29sb3IsICRmb250LXNpemUpO1xuICAgIH1cblxuICAgICY6Zm9jdXMjeyRzZWxlY3Rvcn0ge1xuICAgICAgQGluY2x1ZGUgcGxhY2Vob2xkZXItZm9jdXMoKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHBsYWNlaG9sZGVyKCRjb2xvciwgJGZvbnQtc2l6ZSkge1xuICBjb2xvcjogJGNvbG9yO1xuICBmb250LXNpemU6ICRmb250LXNpemU7XG4gIG9wYWNpdHk6IDE7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuQG1peGluIHBsYWNlaG9sZGVyLWZvY3VzKCkge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTtcbn1cblxuQG1peGluIGFuaW1hdGlvbigkYW5pbWF0ZS4uLikge1xuICAkbWF4OiBsZW5ndGgoJGFuaW1hdGUpO1xuICAkYW5pbWF0aW9uczogJyc7XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkbWF4IHtcbiAgICAkYW5pbWF0aW9uczogI3skYW5pbWF0aW9ucyArIG50aCgkYW5pbWF0ZSwgJGkpfTtcblxuICAgIEBpZiAkaSA8ICRtYXgge1xuICAgICAgJGFuaW1hdGlvbnM6ICN7JGFuaW1hdGlvbnMgKyAnLCAnfTtcbiAgICB9XG4gIH1cbiAgLXdlYmtpdC1hbmltYXRpb246ICRhbmltYXRpb25zO1xuICAtbW96LWFuaW1hdGlvbjogICAgJGFuaW1hdGlvbnM7XG4gIC1vLWFuaW1hdGlvbjogICAgICAkYW5pbWF0aW9ucztcbiAgYW5pbWF0aW9uOiAgICAgICAgICRhbmltYXRpb25zO1xufVxuXG5AbWl4aW4ga2V5ZnJhbWVzKCRhbmltYXRpb25OYW1lKSB7XG4gIEAtd2Via2l0LWtleWZyYW1lcyAjeyRhbmltYXRpb25OYW1lfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbiAgQC1tb3ota2V5ZnJhbWVzICN7JGFuaW1hdGlvbk5hbWV9IHtcbiAgICBAY29udGVudDtcbiAgfVxuICBALW8ta2V5ZnJhbWVzICN7JGFuaW1hdGlvbk5hbWV9IHtcbiAgICBAY29udGVudDtcbiAgfVxuICBAa2V5ZnJhbWVzICN7JGFuaW1hdGlvbk5hbWV9IHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcbiAqIHdlIG5lZWQgdG8gcHV0cyB1bmlxdWUgbmFtZSBpbiBlYWNoIGJ0bi1wdWxzZSBjYWxsLlxuICovXG5AbWl4aW4gYnRuLXB1bHNlKCRuYW1lLCAkY29sb3IpIHtcbiAgJi5idG4tcHVsc2Uge1xuICAgIEBpbmNsdWRlIGFuaW1hdGlvbihidG4tI3skbmFtZX0tcHVsc2UgMS41cyBpbmZpbml0ZSk7XG4gIH1cblxuICBAaW5jbHVkZSBrZXlmcmFtZXMoYnRuLSN7JG5hbWV9LXB1bHNlKSB7XG4gICAgMCUge1xuICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgIG9wYWNpdHk6IG5iLXRoZW1lKGJ0bi1kaXNhYmxlZC1vcGFjaXR5KTtcbiAgICB9XG4gICAgNTAlIHtcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAxcmVtIDAgJGNvbG9yO1xuICAgICAgb3BhY2l0eTogMC44O1xuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICBvcGFjaXR5OiBuYi10aGVtZShidG4tZGlzYWJsZWQtb3BhY2l0eSk7XG4gICAgfVxuICB9XG59XG5cbi8qXG5cbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXG46aG9zdCBhbmQgOmhvc3QtY29udGV4dCBhcmUgcHNldWRvLWNsYXNzZXMuIFNvIHdlIGFzc3VtZSB0aGV5IGNvdWxkIGJlIGNvbWJpbmVkLFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxuXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxuc28gZGlyZWN0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gb24gYW55IGNvbXBvbmVudCBsZXZlbC5cblxuSW1wbGVtZW50YXRpb24gY29kZTpcblxuQG1peGluIG5iLXJ0bCgpIHtcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cbiAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQW5kIHdoZW4gd2UgY2FsbCBpdCBzb21ld2hlcmU6XG5cbjpob3N0IHtcbiAgLnNvbWUtY2xhc3Mge1xuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcbiAgICAgIC4uLlxuICAgIH1cbiAgfVxufVxuOmhvc3QtY29udGV4dCguLi4pIHtcbiAgLnNvbWUtY2xhc3Mge1xuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcbiAgICAgIC4uLlxuICAgIH1cbiAgfVxufVxuXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XG5cbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcbiAgLi4uXG59XG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xuICAuLi5cbn1cblxuKlxuICBTaWRlIG5vdGU6XG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxuXG4gIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSBzaG91bGQgbWF0Y2ggYW55IHBlcm11dGF0aW9uLFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxuKlxuXG5cbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcblxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxuOmhvc3Qge1xuICA6aG9zdC1jb250ZXh0KC4uLikge1xuICAgIC4uLlxuICB9XG59XG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XG46aG9zdCB7XG4gIHAge1xuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cbiAgfVxufVxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxuXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cbiAgKlxuICAgIFNpZGUgbm90ZTpcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxuICAgIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNWI5NjA3ODYyNGIwYTQ3NjBmMmRiY2Y2ZmRmMGJkNjI3OTFiZTViYi9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxKSxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cbiAgKlxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cbldlIGNhbiBicmVhayBzdWNoIHNlbGVjdG9ycywgYnkganVzdCBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIHRoZW0uXG4gICoqKlxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXG4gICAgY2hlY2sgaWYgd2UgaW4gdGhlbWUgYnkgc29tZSB0aGVtZSB2YXJpYWJsZXMgYW5kIGlmIHNvIGFwcGVuZCwgb3RoZXJ3aXNlIG5lc3QgbGlrZVxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxuICAgICAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXG4gICAgICB7Jn0ge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xuICAgIE9yIG1heWJlIGFkZCA6aG9zdCBzZWxlY3RvciBhbnl3YXk/IElmIG11bHRpcGxlIDpob3N0IHNlbGVjdG9ycyBhcmUgYWxsb3dlZFxuICAqKipcblxuXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxuXG4xLiBEaXJlY3Rpb24gY2FuIGJlIGFwcGxpZWQgb25seSBvbiBkb2N1bWVudCBsZXZlbCwgYmVjYXVzZSBtaXhpbiBwcmVwZW5kcyB0aGVtZSBjbGFzcyxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxuYXR0cmlidXRlIHRvIFtkaXI9cnRsXSBhdHRyaWJ1dGUgYXMgd2VsbC5cblxuXG5HZW5lcmFsIHByb2JsZW1zLlxuXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXG5bZGlyPWx0cl0gc2hvdWxkIGJlIHNwZWNpZmllZCBhdCBsZWFzdCBzb21ld2hlcmUuICc6bm90KFtkaXI9cnRsXScgbm90IGFwcGxpY2FibGUgaGVyZSxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxuQnV0IHNvbWV0aW1lcyBpdCdzIGhhcmQgdG8gZmluZCwgd2hhdCB0aGUgcHJldmlvdXMgdmFsdWUgc2hvdWxkIGJlLiBBbmQgc3VjaCBtaXhpbiBjYWxsIGxvb2tzIHRvbyB2ZXJib3NlLlxuKi9cblxuQG1peGluIF9wcmVwZW5kLXdpdGgtc2VsZWN0b3IoJHNlbGVjdG9yLCAkcHJvcDogbnVsbCwgJHZhbHVlOiBudWxsKSB7XG4gICN7JHNlbGVjdG9yfSAmIHtcbiAgICBAaWYgJHByb3AgIT0gbnVsbCB7XG4gICAgICAjeyRwcm9wfTogJHZhbHVlO1xuICAgIH1cblxuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBuYi1sdHIoJHByb3A6IG51bGwsICR2YWx1ZTogbnVsbCkge1xuICBAaW5jbHVkZSBfcHJlcGVuZC13aXRoLXNlbGVjdG9yKCdbZGlyPWx0cl0nLCAkcHJvcCwgJHZhbHVlKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIG5iLXJ0bCgkcHJvcDogbnVsbCwgJHZhbHVlOiBudWxsKSB7XG4gIEBpbmNsdWRlIF9wcmVwZW5kLXdpdGgtc2VsZWN0b3IoJ1tkaXI9cnRsXScsICRwcm9wLCAkdmFsdWUpIHtcbiAgICBAY29udGVudDtcbiAgfTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cblxuLy8vIFNsaWdodGx5IGxpZ2h0ZW4gYSBjb2xvclxuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gY29sb3IgdG8gdGludFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcGVyY2VudGFnZSAtIHBlcmNlbnRhZ2Ugb2YgYCRjb2xvcmAgaW4gcmV0dXJuZWQgY29sb3Jcbi8vLyBAcmV0dXJuIHtDb2xvcn1cbkBmdW5jdGlvbiB0aW50KCRjb2xvciwgJHBlcmNlbnRhZ2UpIHtcbiAgQHJldHVybiBtaXgod2hpdGUsICRjb2xvciwgJHBlcmNlbnRhZ2UpO1xufVxuXG4vLy8gU2xpZ2h0bHkgZGFya2VuIGEgY29sb3Jcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIGNvbG9yIHRvIHNoYWRlXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRwZXJjZW50YWdlIC0gcGVyY2VudGFnZSBvZiBgJGNvbG9yYCBpbiByZXR1cm5lZCBjb2xvclxuLy8vIEByZXR1cm4ge0NvbG9yfVxuQGZ1bmN0aW9uIHNoYWRlKCRjb2xvciwgJHBlcmNlbnRhZ2UpIHtcbiAgQHJldHVybiBtaXgoYmxhY2ssICRjb2xvciwgJHBlcmNlbnRhZ2UpO1xufVxuXG5AZnVuY3Rpb24gbWFwLXNldCgkbWFwLCAka2V5LCAkdmFsdWU6IG51bGwpIHtcbiAgJG5ldzogKCRrZXk6ICR2YWx1ZSk7XG4gIEByZXR1cm4gbWFwLW1lcmdlKCRtYXAsICRuZXcpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuXG5AaW1wb3J0ICcuLi9jb3JlL2Z1bmN0aW9ucyc7XG5AaW1wb3J0ICcuLi9jb3JlL21peGlucyc7XG5cbiR0aGVtZTogKFxuXG4gIFxuXG4gIGNvbG9yLWJnLTI6ICMzYzM3ODAsXG4gIGNvbG9yLWJnLTM6ICMzMzJlNzMsXG4gICAgXG4gIFxuICBjb2xvci1DYWwtVGl0bGU6ICM0MGZmYTksXG4gIFxuICBjYWxlbmRhclJvdzogIzU4NTk4ZSxcbiAgXG4gIGNvbG9yLWZnLXRleHQtMjogIzNiMzY3ZixcbiAgY29sb3ItZmctdGV4dC0zOiAjZDFkMWZmLFxuICBjb2xvci1mZy10ZXh0LTQ6ICNjMTk4ZmIsXG4gIFxuICBjb2xvci1saWdodC0yOiAjZDFkMWZmLFxuICBcbiAgZm9udC1tYWluOiB1bnF1b3RlKCdcIkV4b1wiLCBcIlNlZ29lIFVJXCIsIFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgc2Fucy1zZXJpZicpLFxuICBmb250LXNlY29uZGFyeTogZm9udC1tYWluLFxuXG4gIGZvbnQtd2VpZ2h0LXRoaW46IDIwMCxcbiAgZm9udC13ZWlnaHQtbGlnaHQ6IDMwMCxcbiAgZm9udC13ZWlnaHQtbm9ybWFsOiA0MDAsXG4gIGZvbnQtd2VpZ2h0LWJvbGRlcjogNTAwLFxuICBmb250LXdlaWdodC1ib2xkOiA2MDAsXG4gIGZvbnQtd2VpZ2h0LXVsdHJhLWJvbGQ6IDgwMCxcblxuICAvLyBUT0RPOiB1c2UgaXQgYXMgYSBkZWZhdWx0IGZvbnQtc2l6ZVxuICBiYXNlLWZvbnQtc2l6ZTogMTZweCxcblxuICBmb250LXNpemUteGxnOiAxLjI1cmVtLFxuICBmb250LXNpemUtbGc6IDEuMTI1cmVtLFxuICBmb250LXNpemU6IDFyZW0sXG4gIGZvbnQtc2l6ZS1zbTogMC44NzVyZW0sXG4gIGZvbnQtc2l6ZS14czogMC43NXJlbSxcblxuICByYWRpdXM6IDAuMzc1cmVtLFxuICBwYWRkaW5nOiAxLjI1cmVtLFxuICBtYXJnaW46IDEuNXJlbSxcbiAgbGluZS1oZWlnaHQ6IDEuMjUsXG5cbiAgY29sb3ItYmc6ICNmZmZmZmYsXG4gIGNvbG9yLWJnLWFjdGl2ZTogI2U5ZWRmMixcbiAgY29sb3ItZmc6ICNhNGFiYjMsXG4gIGNvbG9yLWZnLWhlYWRpbmc6ICMyYTJhMmEsXG4gIGNvbG9yLWZnLXRleHQ6ICM0YjRiNGIsXG4gIGNvbG9yLWZnLWhpZ2hsaWdodDogIzQwZGM3ZSxcblxuICBzZXBhcmF0b3I6ICNlYmVlZjIsXG5cbiAgY29sb3ItZ3JheTogcmdiYSg4MSwgMTEzLCAxNjUsIDAuMTUpLFxuICBjb2xvci1uZXV0cmFsOiB0cmFuc3BhcmVudCxcbiAgY29sb3Itd2hpdGU6ICNmZmZmZmYsXG4gIGNvbG9yLWRpc2FibGVkOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCksXG5cbiAgY29sb3ItcHJpbWFyeTogIzhhN2ZmZixcbiAgY29sb3Itc3VjY2VzczogIzBkZmY5MixcbiAgY29sb3ItaW5mbzogIzRjYTZmZixcbiAgY29sb3Itd2FybmluZzogI2ZmYTEwMCxcbiAgY29sb3ItZGFuZ2VyOiAjZmY0YzZhLFxuXG4gIC8vIFRPRE86IG1vdmUgdG8gY29uc3RhbnRzXG4gIHNvY2lhbC1jb2xvci1mYWNlYm9vazogIzNiNTk5OCxcbiAgc29jaWFsLWNvbG9yLXR3aXR0ZXI6ICM1NWFjZWUsXG4gIHNvY2lhbC1jb2xvci1nb29nbGU6ICNkZDRiMzksXG4gIHNvY2lhbC1jb2xvci1saW5rZWRpbjogIzAxNzdiNSxcbiAgc29jaWFsLWNvbG9yLWdpdGh1YjogIzZiNmI2YixcbiAgc29jaWFsLWNvbG9yLXN0YWNrb3ZlcmZsb3c6ICMyZjk2ZTgsXG4gIHNvY2lhbC1jb2xvci1kcmliYmxlOiAjZjI2Nzk4LFxuICBzb2NpYWwtY29sb3ItYmVoYW5jZTogIzAwOTNmYSxcblxuICBib3JkZXItY29sb3I6IGNvbG9yLWdyYXksXG4gIHNoYWRvdzogMCAycHggMTJweCAwICNkZmUzZWIsXG5cbiAgbGluay1jb2xvcjogIzNkY2M2ZCxcbiAgbGluay1jb2xvci1ob3ZlcjogIzJlZTU2YixcbiAgbGluay1jb2xvci12aXNpdGVkOiBsaW5rLWNvbG9yLFxuXG4gIHNjcm9sbGJhci1mZzogI2RhZGFkYSxcbiAgc2Nyb2xsYmFyLWJnOiAjZjJmMmYyLFxuICBzY3JvbGxiYXItd2lkdGg6IDVweCxcbiAgc2Nyb2xsYmFyLXRodW1iLXJhZGl1czogMi41cHgsXG5cbiAgcmFkaWFsLWdyYWRpZW50OiBub25lLFxuICBsaW5lYXItZ3JhZGllbnQ6IG5vbmUsXG5cbiAgY2FyZC1mb250LXNpemU6IGZvbnQtc2l6ZSxcbiAgY2FyZC1saW5lLWhlaWdodDogbGluZS1oZWlnaHQsXG4gIGNhcmQtZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LW5vcm1hbCxcbiAgY2FyZC1mZzogY29sb3ItZmcsIC8vIFRPRE86IG5vdCB1c2VkXG4gIGNhcmQtZmctdGV4dDogY29sb3ItZmctdGV4dCxcbiAgY2FyZC1mZy1oZWFkaW5nOiBjb2xvci1mZy1oZWFkaW5nLCAvLyBUT0RPOiBub3QgdXNlZFxuICBjYXJkLWJnOiBjb2xvci1iZyxcbiAgY2FyZC1oZWlnaHQteHhzbWFsbDogOTZweCxcbiAgY2FyZC1oZWlnaHQteHNtYWxsOiAyMTZweCxcbiAgY2FyZC1oZWlnaHQtc21hbGw6IDMzNnB4LFxuICBjYXJkLWhlaWdodC1tZWRpdW06IDQ1NnB4LFxuICBjYXJkLWhlaWdodC1sYXJnZTogNTc2cHgsXG4gIGNhcmQtaGVpZ2h0LXhsYXJnZTogNjk2cHgsXG4gIGNhcmQtaGVpZ2h0LXh4bGFyZ2U6IDgxNnB4LFxuICBjYXJkLXNoYWRvdzogc2hhZG93LFxuICBjYXJkLWJvcmRlci13aWR0aDogMCxcbiAgY2FyZC1ib3JkZXItdHlwZTogc29saWQsXG4gIGNhcmQtYm9yZGVyLWNvbG9yOiBjb2xvci1iZyxcbiAgY2FyZC1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIGNhcmQtcGFkZGluZzogcGFkZGluZyxcbiAgY2FyZC1tYXJnaW46IG1hcmdpbixcbiAgY2FyZC1oZWFkZXItZm9udC1mYW1pbHk6IGZvbnQtc2Vjb25kYXJ5LFxuICBjYXJkLWhlYWRlci1mb250LXNpemU6IGZvbnQtc2l6ZS1sZyxcbiAgY2FyZC1oZWFkZXItZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LWJvbGQsXG4gIGNhcmQtc2VwYXJhdG9yOiBzZXBhcmF0b3IsXG4gIGNhcmQtaGVhZGVyLWZnOiBjb2xvci1mZywgLy8gVE9ETzogbm90IHVzZWRcbiAgY2FyZC1oZWFkZXItZmctaGVhZGluZzogY29sb3ItZmctaGVhZGluZyxcbiAgY2FyZC1oZWFkZXItYWN0aXZlLWJnOiBjb2xvci1mZyxcbiAgY2FyZC1oZWFkZXItYWN0aXZlLWZnOiBjb2xvci1iZyxcbiAgY2FyZC1oZWFkZXItZGlzYWJsZWQtYmc6IGNvbG9yLWRpc2FibGVkLFxuICBjYXJkLWhlYWRlci1wcmltYXJ5LWJnOiBjb2xvci1wcmltYXJ5LFxuICBjYXJkLWhlYWRlci1pbmZvLWJnOiBjb2xvci1pbmZvLFxuICBjYXJkLWhlYWRlci1zdWNjZXNzLWJnOiBjb2xvci1zdWNjZXNzLFxuICBjYXJkLWhlYWRlci13YXJuaW5nLWJnOiBjb2xvci13YXJuaW5nLFxuICBjYXJkLWhlYWRlci1kYW5nZXItYmc6IGNvbG9yLWRhbmdlcixcbiAgY2FyZC1oZWFkZXItYm9yZGVyLXdpZHRoOiAxcHgsXG4gIGNhcmQtaGVhZGVyLWJvcmRlci10eXBlOiBzb2xpZCxcbiAgY2FyZC1oZWFkZXItYm9yZGVyLWNvbG9yOiBjYXJkLXNlcGFyYXRvcixcblxuICBoZWFkZXItZm9udC1mYW1pbHk6IGZvbnQtc2Vjb25kYXJ5LFxuICBoZWFkZXItZm9udC1zaXplOiBmb250LXNpemUsXG4gIGhlYWRlci1saW5lLWhlaWdodDogbGluZS1oZWlnaHQsXG4gIGhlYWRlci1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgaGVhZGVyLWJnOiBjb2xvci1iZyxcbiAgaGVhZGVyLWhlaWdodDogNC43NXJlbSxcbiAgaGVhZGVyLXBhZGRpbmc6IDEuMjVyZW0sXG4gIGhlYWRlci1zaGFkb3c6IHNoYWRvdyxcblxuICBmb290ZXItaGVpZ2h0OiA0LjcyNXJlbSxcbiAgZm9vdGVyLXBhZGRpbmc6IDEuMjVyZW0sXG4gIGZvb3Rlci1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgZm9vdGVyLWZnLWhpZ2hsaWdodDogY29sb3ItZmctaGVhZGluZyxcbiAgZm9vdGVyLWJnOiBjb2xvci1iZyxcbiAgZm9vdGVyLXNlcGFyYXRvcjogc2VwYXJhdG9yLFxuICBmb290ZXItc2hhZG93OiBzaGFkb3csXG5cbiAgbGF5b3V0LWZvbnQtZmFtaWx5OiBmb250LW1haW4sXG4gIGxheW91dC1mb250LXNpemU6IGZvbnQtc2l6ZSxcbiAgbGF5b3V0LWxpbmUtaGVpZ2h0OiBsaW5lLWhlaWdodCxcbiAgbGF5b3V0LWZnOiBjb2xvci1mZyxcbiAgbGF5b3V0LWJnOiAjZWJlZmY1LFxuICBsYXlvdXQtbWluLWhlaWdodDogMTAwdmgsXG4gIGxheW91dC1jb250ZW50LXdpZHRoOiA5MDBweCxcbiAgbGF5b3V0LXdpbmRvdy1tb2RlLW1pbi13aWR0aDogMzAwcHgsXG4gIGxheW91dC13aW5kb3ctbW9kZS1tYXgtd2lkdGg6IDE5MjBweCxcbiAgbGF5b3V0LXdpbmRvdy1tb2RlLWJnOiBsYXlvdXQtYmcsXG4gIGxheW91dC13aW5kb3ctbW9kZS1wYWRkaW5nLXRvcDogNC43NXJlbSxcbiAgbGF5b3V0LXdpbmRvdy1zaGFkb3c6IHNoYWRvdyxcbiAgbGF5b3V0LXBhZGRpbmc6IDIuMjVyZW0gMi4yNXJlbSAwLjc1cmVtLFxuICBsYXlvdXQtbWVkaXVtLXBhZGRpbmc6IDEuNXJlbSAxLjVyZW0gMC41cmVtLFxuICBsYXlvdXQtc21hbGwtcGFkZGluZzogMXJlbSAxcmVtIDAsXG5cbiAgc2lkZWJhci1mb250LXNpemU6IGZvbnQtc2l6ZSxcbiAgc2lkZWJhci1saW5lLWhlaWdodDogbGluZS1oZWlnaHQsXG4gIHNpZGViYXItZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHNpZGViYXItYmc6IGNvbG9yLWJnLFxuICBzaWRlYmFyLWhlaWdodDogMTAwdmgsXG4gIHNpZGViYXItd2lkdGg6IDE2cmVtLFxuICBzaWRlYmFyLXdpZHRoLWNvbXBhY3Q6IDMuNXJlbSxcbiAgc2lkZWJhci1wYWRkaW5nOiBwYWRkaW5nLFxuICBzaWRlYmFyLWhlYWRlci1oZWlnaHQ6IDMuNXJlbSxcbiAgc2lkZWJhci1mb290ZXItaGVpZ2h0OiAzLjVyZW0sXG4gIHNpZGViYXItc2hhZG93OiBzaGFkb3csXG5cbiAgbWVudS1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIG1lbnUtZm9udC1zaXplOiBmb250LXNpemUsXG4gIG1lbnUtZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LWJvbGRlcixcbiAgbWVudS1mZzogY29sb3ItZmctdGV4dCxcbiAgbWVudS1iZzogY29sb3ItYmcsXG4gIG1lbnUtYWN0aXZlLWZnOiBjb2xvci1mZy1oZWFkaW5nLFxuICBtZW51LWFjdGl2ZS1iZzogY29sb3ItYmcsXG4gIG1lbnUtYWN0aXZlLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ib2xkLFxuXG4gIG1lbnUtc3VibWVudS1iZzogY29sb3ItYmcsXG4gIG1lbnUtc3VibWVudS1mZzogY29sb3ItZmctdGV4dCxcbiAgbWVudS1zdWJtZW51LWFjdGl2ZS1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgbWVudS1zdWJtZW51LWFjdGl2ZS1iZzogY29sb3ItYmcsXG4gIG1lbnUtc3VibWVudS1hY3RpdmUtYm9yZGVyLWNvbG9yOiBjb2xvci1mZy1oaWdobGlnaHQsXG4gIG1lbnUtc3VibWVudS1hY3RpdmUtc2hhZG93OiBub25lLFxuICBtZW51LXN1Ym1lbnUtaG92ZXItZmc6IG1lbnUtc3VibWVudS1hY3RpdmUtZmcsXG4gIG1lbnUtc3VibWVudS1ob3Zlci1iZzogbWVudS1zdWJtZW51LWJnLFxuICBtZW51LXN1Ym1lbnUtaXRlbS1ib3JkZXItd2lkdGg6IDAuMTI1cmVtLFxuICBtZW51LXN1Ym1lbnUtaXRlbS1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIG1lbnUtc3VibWVudS1pdGVtLXBhZGRpbmc6IDAuNXJlbSAxcmVtLFxuICBtZW51LXN1Ym1lbnUtaXRlbS1jb250YWluZXItcGFkZGluZzogMCAxLjI1cmVtLFxuICBtZW51LXN1Ym1lbnUtcGFkZGluZzogMC41cmVtLFxuXG4gIG1lbnUtZ3JvdXAtZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LWJvbGRlcixcbiAgbWVudS1ncm91cC1mb250LXNpemU6IDAuODc1cmVtLFxuICBtZW51LWdyb3VwLWZnOiBjb2xvci1mZyxcbiAgbWVudS1ncm91cC1wYWRkaW5nOiAxcmVtIDEuMjVyZW0sXG4gIG1lbnUtaXRlbS1wYWRkaW5nOiAwLjY3NXJlbSAwLjc1cmVtLFxuICBtZW51LWl0ZW0tc2VwYXJhdG9yOiBzZXBhcmF0b3IsXG4gIG1lbnUtaWNvbi1mb250LXNpemU6IDIuNXJlbSxcbiAgbWVudS1pY29uLW1hcmdpbjogMCAwLjI1cmVtIDAsXG4gIG1lbnUtaWNvbi1jb2xvcjogY29sb3ItZmcsXG4gIG1lbnUtaWNvbi1hY3RpdmUtY29sb3I6IGNvbG9yLWZnLWhlYWRpbmcsXG5cbiAgdGFicy1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIHRhYnMtZm9udC1zaXplOiBmb250LXNpemUtbGcsXG4gIHRhYnMtY29udGVudC1mb250LWZhbWlseTogZm9udC1tYWluLFxuICB0YWJzLWNvbnRlbnQtZm9udC1zaXplOiBmb250LXNpemUsXG4gIHRhYnMtYWN0aXZlLWJnOiB0cmFuc3BhcmVudCxcbiAgdGFicy1hY3RpdmUtZm9udC13ZWlnaHQ6IDcwMCxcbiAgdGFicy1wYWRkaW5nOiBwYWRkaW5nLFxuICB0YWJzLWNvbnRlbnQtcGFkZGluZzogMCxcbiAgdGFicy1oZWFkZXItYmc6IHRyYW5zcGFyZW50LFxuICB0YWJzLXNlcGFyYXRvcjogc2VwYXJhdG9yLFxuICB0YWJzLWZnOiBjb2xvci1mZyxcbiAgdGFicy1mZy1kaXNhYmxlZDogdGFicy1mZyxcbiAgdGFicy1mZy10ZXh0OiBjb2xvci1mZy10ZXh0LFxuICB0YWJzLWZnLWhlYWRpbmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHRhYnMtYmc6IHRyYW5zcGFyZW50LFxuICB0YWJzLXNlbGVjdGVkOiBjb2xvci1zdWNjZXNzLFxuICB0YWJzLXNlbGVjdGVkLXNlY29uZC1jb2xvcjogY29sb3Itc3VjY2VzcyxcbiAgdGFicy1zZWxlY3RlZC1kZWdyZWVzOiAwLFxuICB0YWJzLWljb24tb25seS1tYXgtd2lkdGg6IDU3NnB4LFxuXG4gIHJvdXRlLXRhYnMtZm9udC1mYW1pbHk6IGZvbnQtc2Vjb25kYXJ5LFxuICByb3V0ZS10YWJzLWZvbnQtc2l6ZTogZm9udC1zaXplLWxnLFxuICByb3V0ZS10YWJzLWFjdGl2ZS1iZzogdHJhbnNwYXJlbnQsXG4gIHJvdXRlLXRhYnMtYWN0aXZlLWZvbnQtd2VpZ2h0OiBjYXJkLWhlYWRlci1mb250LXdlaWdodCxcbiAgcm91dGUtdGFicy1wYWRkaW5nOiBwYWRkaW5nLFxuICByb3V0ZS10YWJzLWhlYWRlci1iZzogdHJhbnNwYXJlbnQsXG4gIHJvdXRlLXRhYnMtc2VwYXJhdG9yOiBzZXBhcmF0b3IsXG4gIHJvdXRlLXRhYnMtZmc6IGNvbG9yLWZnLFxuICByb3V0ZS10YWJzLWZnLWRpc2FibGVkOiByb3V0ZS10YWJzLWZnLFxuICByb3V0ZS10YWJzLWZnLWhlYWRpbmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHJvdXRlLXRhYnMtYmc6IHRyYW5zcGFyZW50LFxuICByb3V0ZS10YWJzLXNlbGVjdGVkOiBjb2xvci1zdWNjZXNzLFxuICByb3V0ZS10YWJzLWljb24tb25seS1tYXgtd2lkdGg6IDU3NnB4LFxuXG4gIHVzZXItZm9udC1zaXplOiBmb250LXNpemUsXG4gIHVzZXItbGluZS1oZWlnaHQ6IGxpbmUtaGVpZ2h0LFxuICB1c2VyLWJnOiBjb2xvci1iZyxcbiAgdXNlci1mZzogY29sb3ItZmcsXG4gIHVzZXItZmctaGlnaGxpZ2h0OiAjYmNjM2NjLFxuICB1c2VyLWZvbnQtZmFtaWx5LXNlY29uZGFyeTogZm9udC1zZWNvbmRhcnksXG4gIHVzZXItc2l6ZS1zbWFsbDogMS41cmVtLFxuICB1c2VyLXNpemUtbWVkaXVtOiAyLjVyZW0sXG4gIHVzZXItc2l6ZS1sYXJnZTogMy4yNXJlbSxcbiAgdXNlci1zaXplLXhsYXJnZTogNHJlbSxcblxuICBwb3BvdmVyLWZnOiBjb2xvci1mZy1oZWFkaW5nLFxuICBwb3BvdmVyLWJnOiBjb2xvci1iZyxcbiAgcG9wb3Zlci1ib3JkZXI6IGNvbG9yLXN1Y2Nlc3MsXG4gIHBvcG92ZXItYm9yZGVyLXJhZGl1czogcmFkaXVzLFxuICBwb3BvdmVyLXNoYWRvdzogbm9uZSxcbiAgcG9wb3Zlci1hcnJvdy1zaXplOiAxMXB4LFxuXG4gIGNvbnRleHQtbWVudS1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgY29udGV4dC1tZW51LWJnOiBjb2xvci1iZyxcbiAgY29udGV4dC1tZW51LWFjdGl2ZS1mZzogY29sb3Itd2hpdGUsXG4gIGNvbnRleHQtbWVudS1hY3RpdmUtYmc6IGNvbG9yLXN1Y2Nlc3MsXG4gIGNvbnRleHQtbWVudS1ib3JkZXI6IGNvbG9yLXN1Y2Nlc3MsXG4gIGNvbnRleHQtbWVudS1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIGNvbnRleHQtbWVudS1zaGFkb3c6IG5vbmUsXG4gIGNvbnRleHQtbWVudS1hcnJvdy1zaXplOiAxMXB4LFxuXG4gIGFjdGlvbnMtZm9udC1zaXplOiBmb250LXNpemUsXG4gIGFjdGlvbnMtZm9udC1mYW1pbHk6IGZvbnQtc2Vjb25kYXJ5LFxuICBhY3Rpb25zLWxpbmUtaGVpZ2h0OiBsaW5lLWhlaWdodCxcbiAgYWN0aW9ucy1mZzogY29sb3ItZmcsXG4gIGFjdGlvbnMtYmc6IGNvbG9yLWJnLFxuICBhY3Rpb25zLXNlcGFyYXRvcjogc2VwYXJhdG9yLFxuICBhY3Rpb25zLXBhZGRpbmc6IHBhZGRpbmcsXG4gIGFjdGlvbnMtc2l6ZS1zbWFsbDogMS41cmVtLFxuICBhY3Rpb25zLXNpemUtbWVkaXVtOiAyLjI1cmVtLFxuICBhY3Rpb25zLXNpemUtbGFyZ2U6IDMuNXJlbSxcblxuICBzZWFyY2gtYnRuLW9wZW4tZmc6IGNvbG9yLWZnLFxuICBzZWFyY2gtYnRuLWNsb3NlLWZnOlx0Y29sb3ItZmcsXG4gIHNlYXJjaC1iZzogbGF5b3V0LWJnLFxuICBzZWFyY2gtYmctc2Vjb25kYXJ5OiBjb2xvci1mZyxcbiAgc2VhcmNoLXRleHQ6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHNlYXJjaC1pbmZvOiBjb2xvci1mZyxcbiAgc2VhcmNoLWRhc2g6IGNvbG9yLWZnLFxuICBzZWFyY2gtcGxhY2Vob2xkZXI6IGNvbG9yLWZnLFxuXG4gIHNtYXJ0LXRhYmxlLWhlYWRlci1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIHNtYXJ0LXRhYmxlLWhlYWRlci1mb250LXNpemU6IGZvbnQtc2l6ZSxcbiAgc21hcnQtdGFibGUtaGVhZGVyLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ib2xkLFxuICBzbWFydC10YWJsZS1oZWFkZXItbGluZS1oZWlnaHQ6IGxpbmUtaGVpZ2h0LFxuICBzbWFydC10YWJsZS1oZWFkZXItZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHNtYXJ0LXRhYmxlLWhlYWRlci1iZzogY29sb3ItYmcsXG5cbiAgc21hcnQtdGFibGUtZm9udC1mYW1pbHk6IGZvbnQtbWFpbixcbiAgc21hcnQtdGFibGUtZm9udC1zaXplOiBmb250LXNpemUsXG4gIHNtYXJ0LXRhYmxlLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ub3JtYWwsXG4gIHNtYXJ0LXRhYmxlLWxpbmUtaGVpZ2h0OiBsaW5lLWhlaWdodCxcbiAgc21hcnQtdGFibGUtZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIHNtYXJ0LXRhYmxlLWJnOiBjb2xvci1iZyxcblxuICBzbWFydC10YWJsZS1iZy1ldmVuOiAjZjVmN2ZjLFxuICBzbWFydC10YWJsZS1mZy1zZWNvbmRhcnk6IGNvbG9yLWZnLFxuICBzbWFydC10YWJsZS1iZy1hY3RpdmU6ICNlNmYzZmYsXG4gIHNtYXJ0LXRhYmxlLXBhZGRpbmc6IDAuODc1cmVtIDEuMjVyZW0sXG4gIHNtYXJ0LXRhYmxlLWZpbHRlci1wYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0sXG4gIHNtYXJ0LXRhYmxlLXNlcGFyYXRvcjogc2VwYXJhdG9yLFxuICBzbWFydC10YWJsZS1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG5cbiAgc21hcnQtdGFibGUtcGFnaW5nLWJvcmRlci1jb2xvcjogc2VwYXJhdG9yLFxuICBzbWFydC10YWJsZS1wYWdpbmctYm9yZGVyLXdpZHRoOiAxcHgsXG4gIHNtYXJ0LXRhYmxlLXBhZ2luZy1mZy1hY3RpdmU6ICNmZmZmZmYsXG4gIHNtYXJ0LXRhYmxlLXBhZ2luZy1iZy1hY3RpdmU6IGNvbG9yLXN1Y2Nlc3MsXG4gIHNtYXJ0LXRhYmxlLXBhZ2luZy1ob3ZlcjogcmdiYSgwLCAwLCAwLCAwLjA1KSxcblxuICB0b2FzdHItYmc6IGNvbG9yLWJnLFxuICB0b2FzdHItcGFkZGluZzogMS4xMjVyZW0sXG4gIHRvYXN0ci1mZzogY29sb3ItZmctdGV4dCxcbiAgdG9hc3RyLWJvcmRlcjogMC4xMjVyZW0gc29saWQsXG4gIHRvYXN0ci1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIHRvYXN0ci1ib3JkZXItY29sb3I6ICNiY2MzY2MsXG4gIHRvYXN0ci1pY29uLXJhZGl1czogMC4yNXJlbSxcbiAgdG9hc3RyLXNoYWRvdzogc2hhZG93LFxuXG4gIGJ0bi1mZzogY29sb3Itd2hpdGUsXG4gIGJ0bi1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIGJ0bi1saW5lLWhlaWdodDogbGluZS1oZWlnaHQsXG4gIGJ0bi1kaXNhYmxlZC1vcGFjaXR5OiAwLjMsXG4gIGJ0bi1jdXJzb3I6IGRlZmF1bHQsXG5cbiAgYnRuLXByaW1hcnktYmc6IGNvbG9yLXByaW1hcnksXG4gIGJ0bi1zZWNvbmRhcnktYmc6IHRyYW5zcGFyZW50LFxuICBidG4taW5mby1iZzogY29sb3ItaW5mbyxcbiAgYnRuLXN1Y2Nlc3MtYmc6IGNvbG9yLXN1Y2Nlc3MsXG4gIGJ0bi13YXJuaW5nLWJnOiBjb2xvci13YXJuaW5nLFxuICBidG4tZGFuZ2VyLWJnOiBjb2xvci1kYW5nZXIsXG5cbiAgYnRuLXNlY29uZGFyeS1ib3JkZXI6ICNkYWRmZTYsXG4gIGJ0bi1zZWNvbmRhcnktYm9yZGVyLXdpZHRoOiAycHgsXG5cbiAgYnRuLXBhZGRpbmcteS1sZzogMC44NzVyZW0sXG4gIGJ0bi1wYWRkaW5nLXgtbGc6IDEuNzVyZW0sXG4gIGJ0bi1mb250LXNpemUtbGc6IGZvbnQtc2l6ZS1sZyxcblxuICAvLyBkZWZhdWx0IHNpemVcbiAgYnRuLXBhZGRpbmcteS1tZDogMC43NXJlbSxcbiAgYnRuLXBhZGRpbmcteC1tZDogMS41cmVtLFxuICBidG4tZm9udC1zaXplLW1kOiAxcmVtLFxuXG4gIGJ0bi1wYWRkaW5nLXktc206IDAuNjI1cmVtLFxuICBidG4tcGFkZGluZy14LXNtOiAxLjVyZW0sXG4gIGJ0bi1mb250LXNpemUtc206IDAuODc1cmVtLFxuXG4gIGJ0bi1wYWRkaW5nLXkteHM6IDAuNXJlbSxcbiAgYnRuLXBhZGRpbmcteC14czogMS4yNXJlbSxcbiAgYnRuLWZvbnQtc2l6ZS14czogMC43NXJlbSxcblxuICBidG4tYm9yZGVyLXJhZGl1czogcmFkaXVzLFxuICBidG4tcmVjdGFuZ2xlLWJvcmRlci1yYWRpdXM6IDAuMjVyZW0sXG4gIGJ0bi1zZW1pLXJvdW5kLWJvcmRlci1yYWRpdXM6IDAuNzVyZW0sXG4gIGJ0bi1yb3VuZC1ib3JkZXItcmFkaXVzOiAxLjVyZW0sXG5cbiAgYnRuLWhlcm8tc2hhZG93OiBub25lLFxuICBidG4taGVyby10ZXh0LXNoYWRvdzogbm9uZSxcbiAgYnRuLWhlcm8tYmV2ZWwtc2l6ZTogMCAwIDAgMCxcbiAgYnRuLWhlcm8tZ2xvdy1zaXplOiAwIDAgMCAwLFxuICBidG4taGVyby1wcmltYXJ5LWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1zdWNjZXNzLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby13YXJuaW5nLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1pbmZvLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1kYW5nZXItZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gIGJ0bi1oZXJvLXNlY29uZGFyeS1nbG93LXNpemU6IGJ0bi1oZXJvLWdsb3ctc2l6ZSxcbiAgYnRuLWhlcm8tZGVncmVlOiAyMGRlZyxcbiAgYnRuLWhlcm8tcHJpbWFyeS1kZWdyZWU6IGJ0bi1oZXJvLWRlZ3JlZSxcbiAgYnRuLWhlcm8tc3VjY2Vzcy1kZWdyZWU6IGJ0bi1oZXJvLWRlZ3JlZSxcbiAgYnRuLWhlcm8td2FybmluZy1kZWdyZWU6IDEwZGVnLFxuICBidG4taGVyby1pbmZvLWRlZ3JlZTogLTEwZGVnLFxuICBidG4taGVyby1kYW5nZXItZGVncmVlOiAtMjBkZWcsXG4gIGJ0bi1oZXJvLXNlY29uZGFyeS1kZWdyZWU6IGJ0bi1oZXJvLWRlZ3JlZSxcbiAgYnRuLWhlcm8tYm9yZGVyLXJhZGl1czogcmFkaXVzLFxuXG4gIGJ0bi1vdXRsaW5lLWZnOiBjb2xvci1mZy1oZWFkaW5nLFxuICBidG4tb3V0bGluZS1ob3Zlci1mZzogI2ZmZmZmZixcbiAgYnRuLW91dGxpbmUtZm9jdXMtZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG5cbiAgYnRuLWdyb3VwLWJnOiBsYXlvdXQtYmcsXG4gIGJ0bi1ncm91cC1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgYnRuLWdyb3VwLXNlcGFyYXRvcjogI2RhZGZlNixcblxuICBmb3JtLWNvbnRyb2wtdGV4dC1wcmltYXJ5LWNvbG9yOiBjb2xvci1mZy1oZWFkaW5nLFxuICBmb3JtLWNvbnRyb2wtYmc6IGNvbG9yLWJnLFxuICBmb3JtLWNvbnRyb2wtZm9jdXMtYmc6IGNvbG9yLWJnLFxuXG4gIGZvcm0tY29udHJvbC1ib3JkZXItd2lkdGg6IDJweCxcbiAgZm9ybS1jb250cm9sLWJvcmRlci10eXBlOiBzb2xpZCxcbiAgZm9ybS1jb250cm9sLWJvcmRlci1yYWRpdXM6IHJhZGl1cyxcbiAgZm9ybS1jb250cm9sLXNlbWktcm91bmQtYm9yZGVyLXJhZGl1czogMC43NXJlbSxcbiAgZm9ybS1jb250cm9sLXJvdW5kLWJvcmRlci1yYWRpdXM6IDEuNXJlbSxcbiAgZm9ybS1jb250cm9sLWJvcmRlci1jb2xvcjogI2RhZGZlNixcbiAgZm9ybS1jb250cm9sLXNlbGVjdGVkLWJvcmRlci1jb2xvcjogY29sb3Itc3VjY2VzcyxcblxuICBmb3JtLWNvbnRyb2wtaW5mby1ib3JkZXItY29sb3I6IGNvbG9yLWluZm8sXG4gIGZvcm0tY29udHJvbC1zdWNjZXNzLWJvcmRlci1jb2xvcjogY29sb3Itc3VjY2VzcyxcbiAgZm9ybS1jb250cm9sLWRhbmdlci1ib3JkZXItY29sb3I6IGNvbG9yLWRhbmdlcixcbiAgZm9ybS1jb250cm9sLXdhcm5pbmctYm9yZGVyLWNvbG9yOiBjb2xvci13YXJuaW5nLFxuXG4gIGZvcm0tY29udHJvbC1wbGFjZWhvbGRlci1jb2xvcjogY29sb3ItZmcsXG4gIGZvcm0tY29udHJvbC1wbGFjZWhvbGRlci1mb250LXNpemU6IDFyZW0sXG5cbiAgZm9ybS1jb250cm9sLWZvbnQtc2l6ZTogMXJlbSxcbiAgZm9ybS1jb250cm9sLXBhZGRpbmc6IDAuNzVyZW0gMS4xMjVyZW0sXG4gIGZvcm0tY29udHJvbC1mb250LXNpemUtc206IGZvbnQtc2l6ZS1zbSxcbiAgZm9ybS1jb250cm9sLXBhZGRpbmctc206IDAuMzc1cmVtIDEuMTI1cmVtLFxuICBmb3JtLWNvbnRyb2wtZm9udC1zaXplLWxnOiBmb250LXNpemUtbGcsXG4gIGZvcm0tY29udHJvbC1wYWRkaW5nLWxnOiAxLjEyNXJlbSxcblxuICBmb3JtLWNvbnRyb2wtbGFiZWwtZm9udC13ZWlnaHQ6IDQwMCxcblxuICBmb3JtLWNvbnRyb2wtZmVlZGJhY2stZm9udC1zaXplOiAwLjg3NXJlbSxcbiAgZm9ybS1jb250cm9sLWZlZWRiYWNrLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ub3JtYWwsXG5cbiAgY2hlY2tib3gtYmc6IHRyYW5zcGFyZW50LFxuICBjaGVja2JveC1zaXplOiAxLjI1cmVtLFxuICBjaGVja2JveC1ib3JkZXItc2l6ZTogMnB4LFxuICBjaGVja2JveC1ib3JkZXItY29sb3I6IGNvbG9yLWxpZ2h0LTIsXG4gIGNoZWNrYm94LWNoZWNrbWFyazogdHJhbnNwYXJlbnQsXG5cbiAgY2hlY2tib3gtY2hlY2tlZC1iZzogdHJhbnNwYXJlbnQsXG4gIGNoZWNrYm94LWNoZWNrZWQtc2l6ZTogMS4yNXJlbSxcbiAgY2hlY2tib3gtY2hlY2tlZC1ib3JkZXItc2l6ZTogMnB4LFxuICBjaGVja2JveC1jaGVja2VkLWJvcmRlci1jb2xvcjogY29sb3Itc3VjY2VzcyxcbiAgY2hlY2tib3gtY2hlY2tlZC1jaGVja21hcms6IGNvbG9yLWZnLWhlYWRpbmcsXG5cbiAgY2hlY2tib3gtZGlzYWJsZWQtYmc6IHRyYW5zcGFyZW50LFxuICBjaGVja2JveC1kaXNhYmxlZC1zaXplOiAxLjI1cmVtLFxuICBjaGVja2JveC1kaXNhYmxlZC1ib3JkZXItc2l6ZTogMnB4LFxuICBjaGVja2JveC1kaXNhYmxlZC1ib3JkZXItY29sb3I6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIGNoZWNrYm94LWRpc2FibGVkLWNoZWNrbWFyazogY29sb3ItZmctaGVhZGluZyxcblxuICBtb2RhbC1mb250LXNpemU6IGZvbnQtc2l6ZSxcbiAgbW9kYWwtbGluZS1oZWlnaHQ6IGxpbmUtaGVpZ2h0LFxuICBtb2RhbC1mb250LXdlaWdodDogZm9udC13ZWlnaHQtbm9ybWFsLFxuICBtb2RhbC1mZzogY29sb3ItZmctdGV4dCxcbiAgbW9kYWwtZmctaGVhZGluZzogY29sb3ItZmctaGVhZGluZyxcbiAgbW9kYWwtYmc6IGNvbG9yLWJnLFxuICBtb2RhbC1ib3JkZXI6IHRyYW5zcGFyZW50LFxuICBtb2RhbC1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIG1vZGFsLXBhZGRpbmc6IHBhZGRpbmcsXG4gIG1vZGFsLWhlYWRlci1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIG1vZGFsLWhlYWRlci1mb250LXdlaWdodDogZm9udC13ZWlnaHQtYm9sZGVyLFxuICBtb2RhbC1oZWFkZXItZm9udC1zaXplOiBmb250LXNpemUtbGcsXG4gIG1vZGFsLWJvZHktZm9udC1mYW1pbHk6IGZvbnQtbWFpbixcbiAgbW9kYWwtYm9keS1mb250LXdlaWdodDogZm9udC13ZWlnaHQtbm9ybWFsLFxuICBtb2RhbC1ib2R5LWZvbnQtc2l6ZTogZm9udC1zaXplLFxuICBtb2RhbC1zZXBhcmF0b3I6IHNlcGFyYXRvcixcblxuICBiYWRnZS1mZy10ZXh0OiBjb2xvci13aGl0ZSxcbiAgYmFkZ2UtcHJpbWFyeS1iZy1jb2xvcjogY29sb3ItcHJpbWFyeSxcbiAgYmFkZ2Utc3VjY2Vzcy1iZy1jb2xvcjogY29sb3Itc3VjY2VzcyxcbiAgYmFkZ2UtaW5mby1iZy1jb2xvcjogY29sb3ItaW5mbyxcbiAgYmFkZ2Utd2FybmluZy1iZy1jb2xvcjogY29sb3Itd2FybmluZyxcbiAgYmFkZ2UtZGFuZ2VyLWJnLWNvbG9yOiBjb2xvci1kYW5nZXIsXG5cbiAgcHJvZ3Jlc3MtYmFyLWhlaWdodC14bGc6IDEuNzVyZW0sXG4gIHByb2dyZXNzLWJhci1oZWlnaHQtbGc6IDEuNXJlbSxcbiAgcHJvZ3Jlc3MtYmFyLWhlaWdodDogMS4zNzVyZW0sXG4gIHByb2dyZXNzLWJhci1oZWlnaHQtc206IDEuMjVyZW0sXG4gIHByb2dyZXNzLWJhci1oZWlnaHQteHM6IDFyZW0sXG4gIHByb2dyZXNzLWJhci1hbmltYXRpb24tZHVyYXRpb246IDQwMG1zLFxuICBwcm9ncmVzcy1iYXItZm9udC1zaXplLXhsZzogZm9udC1zaXplLXhsZyxcbiAgcHJvZ3Jlc3MtYmFyLWZvbnQtc2l6ZS1sZzogZm9udC1zaXplLWxnLFxuICBwcm9ncmVzcy1iYXItZm9udC1zaXplOiBmb250LXNpemUsXG4gIHByb2dyZXNzLWJhci1mb250LXNpemUtc206IGZvbnQtc2l6ZS1zbSxcbiAgcHJvZ3Jlc3MtYmFyLWZvbnQtc2l6ZS14czogZm9udC1zaXplLXhzLFxuICBwcm9ncmVzcy1iYXItcmFkaXVzOiByYWRpdXMsXG4gIHByb2dyZXNzLWJhci1iZzogbGF5b3V0LWJnLFxuICBwcm9ncmVzcy1iYXItZm9udC1jb2xvcjogY29sb3Itd2hpdGUsXG4gIHByb2dyZXNzLWJhci1mb250LXdlaWdodDogZm9udC13ZWlnaHQtYm9sZCxcbiAgcHJvZ3Jlc3MtYmFyLWRlZmF1bHQtYmc6IGNvbG9yLWluZm8sXG4gIHByb2dyZXNzLWJhci1wcmltYXJ5LWJnOiBjb2xvci1wcmltYXJ5LFxuICBwcm9ncmVzcy1iYXItc3VjY2Vzcy1iZzogY29sb3Itc3VjY2VzcyxcbiAgcHJvZ3Jlc3MtYmFyLWluZm8tYmc6IGNvbG9yLWluZm8sXG4gIHByb2dyZXNzLWJhci13YXJuaW5nLWJnOiBjb2xvci13YXJuaW5nLFxuICBwcm9ncmVzcy1iYXItZGFuZ2VyLWJnOiBjb2xvci1kYW5nZXIsXG5cbiAgYWxlcnQtZm9udC1zaXplOiBmb250LXNpemUsXG4gIGFsZXJ0LWxpbmUtaGVpZ2h0OiBsaW5lLWhlaWdodCxcbiAgYWxlcnQtZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LW5vcm1hbCxcbiAgYWxlcnQtZmc6IGNvbG9yLXdoaXRlLFxuICBhbGVydC1vdXRsaW5lLWZnOiBjb2xvci1mZyxcbiAgYWxlcnQtYmc6IGNvbG9yLWJnLFxuICBhbGVydC1hY3RpdmUtYmc6IGNvbG9yLWZnLFxuICBhbGVydC1kaXNhYmxlZC1iZzogY29sb3ItZGlzYWJsZWQsXG4gIGFsZXJ0LWRpc2FibGVkLWZnOiBjb2xvci1mZyxcbiAgYWxlcnQtcHJpbWFyeS1iZzogY29sb3ItcHJpbWFyeSxcbiAgYWxlcnQtaW5mby1iZzogY29sb3ItaW5mbyxcbiAgYWxlcnQtc3VjY2Vzcy1iZzogY29sb3Itc3VjY2VzcyxcbiAgYWxlcnQtd2FybmluZy1iZzogY29sb3Itd2FybmluZyxcbiAgYWxlcnQtZGFuZ2VyLWJnOiBjb2xvci1kYW5nZXIsXG4gIGFsZXJ0LWhlaWdodC14eHNtYWxsOiA1MnB4LFxuICBhbGVydC1oZWlnaHQteHNtYWxsOiA3MnB4LFxuICBhbGVydC1oZWlnaHQtc21hbGw6IDkycHgsXG4gIGFsZXJ0LWhlaWdodC1tZWRpdW06IDExMnB4LFxuICBhbGVydC1oZWlnaHQtbGFyZ2U6IDEzMnB4LFxuICBhbGVydC1oZWlnaHQteGxhcmdlOiAxNTJweCxcbiAgYWxlcnQtaGVpZ2h0LXh4bGFyZ2U6IDE3MnB4LFxuICBhbGVydC1zaGFkb3c6IG5vbmUsXG4gIGFsZXJ0LWJvcmRlci1yYWRpdXM6IHJhZGl1cyxcbiAgYWxlcnQtcGFkZGluZzogMXJlbSAxLjEyNXJlbSxcbiAgYWxlcnQtY2xvc2FibGUtcGFkZGluZzogM3JlbSxcbiAgYWxlcnQtYnV0dG9uLXBhZGRpbmc6IDNyZW0sXG4gIGFsZXJ0LW1hcmdpbjogbWFyZ2luLFxuXG4gIGNoYXQtZm9udC1zaXplOiBmb250LXNpemUsXG4gIGNoYXQtZmc6IGNvbG9yLXdoaXRlLFxuICBjaGF0LWJnOiBjb2xvci1iZyxcbiAgY2hhdC1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIGNoYXQtZmctdGV4dDogY29sb3ItZmctdGV4dCxcbiAgY2hhdC1oZWlnaHQteHhzbWFsbDogOTZweCxcbiAgY2hhdC1oZWlnaHQteHNtYWxsOiAyMTZweCxcbiAgY2hhdC1oZWlnaHQtc21hbGw6IDMzNnB4LFxuICBjaGF0LWhlaWdodC1tZWRpdW06IDQ1NnB4LFxuICBjaGF0LWhlaWdodC1sYXJnZTogNTc2cHgsXG4gIGNoYXQtaGVpZ2h0LXhsYXJnZTogNjk2cHgsXG4gIGNoYXQtaGVpZ2h0LXh4bGFyZ2U6IDgxNnB4LFxuICBjaGF0LWJvcmRlcjogYm9yZGVyLFxuICBjaGF0LXBhZGRpbmc6IHBhZGRpbmcsXG4gIGNoYXQtc2hhZG93OiBzaGFkb3csXG4gIGNoYXQtc2VwYXJhdG9yOiBzZXBhcmF0b3IsXG4gIGNoYXQtbWVzc2FnZS1mZzogY29sb3Itd2hpdGUsXG4gIGNoYXQtbWVzc2FnZS1iZzogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjNGNhNmZmLCAjNTliZmZmKSxcbiAgY2hhdC1tZXNzYWdlLXJlcGx5LWJnOiBjb2xvci1iZy1hY3RpdmUsXG4gIGNoYXQtbWVzc2FnZS1yZXBseS1mZzogY29sb3ItZmctdGV4dCxcbiAgY2hhdC1tZXNzYWdlLWF2YXRhci1iZzogY29sb3ItZmcsXG4gIGNoYXQtbWVzc2FnZS1zZW5kZXItZmc6IGNvbG9yLWZnLFxuICBjaGF0LW1lc3NhZ2UtcXVvdGUtZmc6IGNvbG9yLWZnLFxuICBjaGF0LW1lc3NhZ2UtcXVvdGUtYmc6IGNvbG9yLWJnLWFjdGl2ZSxcbiAgY2hhdC1tZXNzYWdlLWZpbGUtZmc6IGNvbG9yLWZnLFxuICBjaGF0LW1lc3NhZ2UtZmlsZS1iZzogdHJhbnNwYXJlbnQsXG4gIGNoYXQtZm9ybS1iZzogdHJhbnNwYXJlbnQsXG4gIGNoYXQtZm9ybS1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgY2hhdC1mb3JtLWJvcmRlcjogc2VwYXJhdG9yLFxuICBjaGF0LWZvcm0tcGxhY2Vob2xkZXItZmc6IGNvbG9yLWZnLFxuICBjaGF0LWZvcm0tYWN0aXZlLWJvcmRlcjogY29sb3ItZmcsXG4gIGNoYXQtYWN0aXZlLWJnOiBjb2xvci1mZyxcbiAgY2hhdC1kaXNhYmxlZC1iZzogY29sb3ItZGlzYWJsZWQsXG4gIGNoYXQtZGlzYWJsZWQtZmc6IGNvbG9yLWZnLFxuICBjaGF0LXByaW1hcnktYmc6IGNvbG9yLXByaW1hcnksXG4gIGNoYXQtaW5mby1iZzogY29sb3ItaW5mbyxcbiAgY2hhdC1zdWNjZXNzLWJnOiBjb2xvci1zdWNjZXNzLFxuICBjaGF0LXdhcm5pbmctYmc6IGNvbG9yLXdhcm5pbmcsXG4gIGNoYXQtZGFuZ2VyLWJnOiBjb2xvci1kYW5nZXIsXG5cbiAgc3Bpbm5lci1iZzogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgzKSxcbiAgc3Bpbm5lci1jaXJjbGUtYmc6IGNvbG9yLWJnLTIsXG4gIHNwaW5uZXItZmc6IGNvbG9yLWZnLXRleHQsXG4gIHNwaW5uZXItYWN0aXZlLWJnOiBjb2xvci1mZyxcbiAgc3Bpbm5lci1kaXNhYmxlZC1iZzogY29sb3ItZGlzYWJsZWQsXG4gIHNwaW5uZXItZGlzYWJsZWQtZmc6IGNvbG9yLWZnLFxuICBzcGlubmVyLXByaW1hcnktYmc6IGNvbG9yLXByaW1hcnksXG4gIHNwaW5uZXItaW5mby1iZzogY29sb3ItaW5mbyxcbiAgc3Bpbm5lci1zdWNjZXNzLWJnOiBjb2xvci1zdWNjZXNzLFxuICBzcGlubmVyLXdhcm5pbmctYmc6IGNvbG9yLXdhcm5pbmcsXG4gIHNwaW5uZXItZGFuZ2VyLWJnOiBjb2xvci1kYW5nZXIsXG4gIHNwaW5uZXIteHhzbWFsbDogMS4yNXJlbSxcbiAgc3Bpbm5lci14c21hbGw6IDEuNXJlbSxcbiAgc3Bpbm5lci1zbWFsbDogMS43NXJlbSxcbiAgc3Bpbm5lci1tZWRpdW06IDJyZW0sXG4gIHNwaW5uZXItbGFyZ2U6IDIuMjVyZW0sXG4gIHNwaW5uZXIteGxhcmdlOiAyLjVyZW0sXG4gIHNwaW5uZXIteHhsYXJnZTogM3JlbSxcblxuICBzdGVwcGVyLWluZGV4LXNpemU6IDJyZW0sXG4gIHN0ZXBwZXItbGFiZWwtZm9udC1zaXplOiBmb250LXNpemUtc20sXG4gIHN0ZXBwZXItbGFiZWwtZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LWJvbGRlcixcbiAgc3RlcHBlci1hY2NlbnQtY29sb3I6IGNvbG9yLXByaW1hcnksXG4gIHN0ZXBwZXItY29tcGxldGVkLWZnOiBjb2xvci13aGl0ZSxcbiAgc3RlcHBlci1mZzogY29sb3ItZmcsXG4gIHN0ZXBwZXItY29tcGxldGVkLWljb24tc2l6ZTogMS41cmVtLFxuICBzdGVwcGVyLWNvbXBsZXRlZC1pY29uLXdlaWdodDogZm9udC13ZWlnaHQtdWx0cmEtYm9sZCxcbiAgc3RlcHBlci1zdGVwLXBhZGRpbmc6IHBhZGRpbmcsXG5cbiAgYWNjb3JkaW9uLXBhZGRpbmc6IHBhZGRpbmcsXG4gIGFjY29yZGlvbi1zZXBhcmF0b3I6IHNlcGFyYXRvcixcbiAgYWNjb3JkaW9uLWhlYWRlci1mb250LWZhbWlseTogZm9udC1zZWNvbmRhcnksXG4gIGFjY29yZGlvbi1oZWFkZXItZm9udC1zaXplOiBmb250LXNpemUtbGcsXG4gIGFjY29yZGlvbi1oZWFkZXItZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0LW5vcm1hbCxcbiAgYWNjb3JkaW9uLWhlYWRlci1mZy1oZWFkaW5nOiBjb2xvci1mZy1oZWFkaW5nLFxuICBhY2NvcmRpb24taGVhZGVyLWRpc2FibGVkLWZnOiBjb2xvci1mZyxcbiAgYWNjb3JkaW9uLWhlYWRlci1ib3JkZXItd2lkdGg6IDFweCxcbiAgYWNjb3JkaW9uLWhlYWRlci1ib3JkZXItdHlwZTogc29saWQsXG4gIGFjY29yZGlvbi1oZWFkZXItYm9yZGVyLWNvbG9yOiBhY2NvcmRpb24tc2VwYXJhdG9yLFxuICBhY2NvcmRpb24tYm9yZGVyLXJhZGl1czogcmFkaXVzLFxuICBhY2NvcmRpb24taXRlbS1iZzogY29sb3ItYmcsXG4gIGFjY29yZGlvbi1pdGVtLWZvbnQtc2l6ZTogZm9udC1zaXplLFxuICBhY2NvcmRpb24taXRlbS1mb250LXdlaWdodDogZm9udC13ZWlnaHQtbm9ybWFsLFxuICBhY2NvcmRpb24taXRlbS1mb250LWZhbWlseTogZm9udC1tYWluLFxuICBhY2NvcmRpb24taXRlbS1mZy10ZXh0OiBjb2xvci1mZy10ZXh0LFxuICBhY2NvcmRpb24taXRlbS1zaGFkb3c6IHNoYWRvdyxcblxuICBsaXN0LWl0ZW0tYm9yZGVyLWNvbG9yOiB0YWJzLXNlcGFyYXRvcixcbiAgbGlzdC1pdGVtLXBhZGRpbmc6IDFyZW0sXG5cbiAgY2FsZW5kYXItd2lkdGg6IDIxLjg3NXJlbSxcbiAgY2FsZW5kYXItYm9keS1oZWlnaHQ6IDI1LjYyNXJlbSxcbiAgY2FsZW5kYXItaGVhZGVyLXRpdGxlLWZvbnQtc2l6ZTogZm9udC1zaXplLXhsZyxcbiAgY2FsZW5kYXItaGVhZGVyLXRpdGxlLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ib2xkLFxuICBjYWxlbmRhci1oZWFkZXItc3ViLXRpdGxlLWZvbnQtc2l6ZTogZm9udC1zaXplLFxuICBjYWxlbmRhci1oZWFkZXItc3ViLXRpdGxlLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC10aGluLFxuICBjYWxlbmRhci1uYXZpZ2F0aW9uLWJ1dHRvbi13aWR0aDogMTByZW0sXG4gIGNhbGVuZGFyLXNlbGVjdGVkLWl0ZW0tYmc6IGNvbG9yLXN1Y2Nlc3MsXG4gIGNhbGVuZGFyLWhvdmVyLWl0ZW0tYmc6IGNhbGVuZGFyLXNlbGVjdGVkLWl0ZW0tYmcsXG4gIGNhbGVuZGFyLXRvZGF5LWl0ZW0tYmc6IGNvbG9yLWJnLWFjdGl2ZSxcbiAgY2FsZW5kYXItYWN0aXZlLWl0ZW0tYmc6IGNvbG9yLXN1Y2Nlc3MsXG4gIGNhbGVuZGFyLWZnOiBjb2xvci1mZy10ZXh0LFxuICBjYWxlbmRhci1zZWxlY3RlZC1mZzogY29sb3Itd2hpdGUsXG4gIGNhbGVuZGFyLXRvZGF5LWZnOiBjYWxlbmRhci1mZyxcbiAgY2FsZW5kYXItZGF5LWNlbGwtd2lkdGg6IDIuNjI1cmVtLFxuICBjYWxlbmRhci1kYXktY2VsbC1oZWlnaHQ6IDIuNjI1cmVtLFxuICBjYWxlbmRhci1tb250aC1jZWxsLXdpZHRoOiA0LjI1cmVtLFxuICBjYWxlbmRhci1tb250aC1jZWxsLWhlaWdodDogMi4zNzVyZW0sXG4gIGNhbGVuZGFyLXllYXItY2VsbC13aWR0aDogY2FsZW5kYXItbW9udGgtY2VsbC13aWR0aCxcbiAgY2FsZW5kYXIteWVhci1jZWxsLWhlaWdodDogY2FsZW5kYXItbW9udGgtY2VsbC1oZWlnaHQsXG4gIGNhbGVuZGFyLWluYWN0aXZlLW9wYWNpdHk6IDAuNSxcbiAgY2FsZW5kYXItZGlzYWJsZWQtb3BhY2l0eTogMC4zLFxuICBjYWxlbmRhci1ib3JkZXItcmFkaXVzOiByYWRpdXMsXG4gIGNhbGVuZGFyLXdlZWtkYXktd2lkdGg6IGNhbGVuZGFyLWRheS1jZWxsLXdpZHRoLFxuICBjYWxlbmRhci13ZWVrZGF5LWhlaWdodDogMS43NXJlbSxcbiAgY2FsZW5kYXItd2Vla2RheS1mb250LXNpemU6IGZvbnQtc2l6ZS14cyxcbiAgY2FsZW5kYXItd2Vla2RheS1mb250LXdlaWdodDogZm9udC13ZWlnaHQtbm9ybWFsLFxuICBjYWxlbmRhci13ZWVrZGF5LWZnOiBjb2xvci1mZyxcbiAgY2FsZW5kYXItd2Vla2RheS1ob2xpZGF5LWZnOiBjb2xvci1kYW5nZXIsXG4gIGNhbGVuZGFyLXJhbmdlLWJnLWluLXJhbmdlOiAjZWJmYmYyLFxuXG4gIGNhbGVuZGFyLWxhcmdlLXdpZHRoOiAxMDAlLFxuICBjYWxlbmRhci1sYXJnZS1ib2R5LWhlaWdodDogMjcuNzVyZW0sXG4gIGNhbGVuZGFyLWRheS1jZWxsLWxhcmdlLXdpZHRoOiAxMDAlLFxuICBjYWxlbmRhci1kYXktY2VsbC1sYXJnZS1oZWlnaHQ6IDUuNXJlbSxcbiAgY2FsZW5kYXItbW9udGgtY2VsbC1sYXJnZS13aWR0aDogNC4yNXJlbSxcbiAgY2FsZW5kYXItbW9udGgtY2VsbC1sYXJnZS1oZWlnaHQ6IDIuMzc1cmVtLFxuICBjYWxlbmRhci15ZWFyLWNlbGwtbGFyZ2Utd2lkdGg6IGNhbGVuZGFyLW1vbnRoLWNlbGwtd2lkdGgsXG4gIGNhbGVuZGFyLXllYXItY2VsbC1sYXJnZS1oZWlnaHQ6IGNhbGVuZGFyLW1vbnRoLWNlbGwtaGVpZ2h0LFxuXG4gIG92ZXJsYXktYmFja2Ryb3AtYmc6IHJnYmEoMCwgMCwgMCwgMC4yODgpLFxuXG4gIHRvb2x0aXAtYmc6IGNvbG9yLWZnLXRleHQsXG4gIHRvb2x0aXAtcHJpbWFyeS1iZzogY29sb3ItcHJpbWFyeSxcbiAgdG9vbHRpcC1pbmZvLWJnOiBjb2xvci1pbmZvLFxuICB0b29sdGlwLXN1Y2Nlc3MtYmc6IGNvbG9yLXN1Y2Nlc3MsXG4gIHRvb2x0aXAtd2FybmluZy1iZzogY29sb3Itd2FybmluZyxcbiAgdG9vbHRpcC1kYW5nZXItYmc6IGNvbG9yLWRhbmdlcixcbiAgdG9vbHRpcC1mZzogY29sb3ItYmctYWN0aXZlLFxuICB0b29sdGlwLXN0YXR1cy1mZzogY29sb3ItYmctYWN0aXZlLFxuICB0b29sdGlwLXNoYWRvdzogc2hhZG93LFxuICB0b29sdGlwLWZvbnQtc2l6ZTogZm9udC1zaXplLFxuXG4gIHNlbGVjdC1ib3JkZXItd2lkdGg6IDJweCxcbiAgc2VsZWN0LW1heC1oZWlnaHQ6IDIwcmVtLFxuICBzZWxlY3QtYmc6IGNvbG9yLWJnLFxuXG4gIHNlbGVjdC1jaGVja2JveC1jb2xvcjogY2hlY2tib3gtYm9yZGVyLWNvbG9yLFxuICBzZWxlY3QtY2hlY2ttYXJrLWNvbG9yOiBjaGVja2JveC1ib3JkZXItY29sb3IsXG5cbiAgc2VsZWN0LW9wdGlvbi1kaXNhYmxlZC1iZzogI2YyZjRmNyxcbiAgc2VsZWN0LW9wdGlvbi1kaXNhYmxlZC1vcGFjaXR5OiAwLjMsXG4gIHNlbGVjdC1vcHRpb24tcGFkZGluZzogMC43NXJlbSAxLjVyZW0sXG5cbiAgZGF0ZXBpY2tlci1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgZGF0ZXBpY2tlci1iZzogY29sb3ItYmcsXG4gIGRhdGVwaWNrZXItYm9yZGVyOiBjb2xvci1zdWNjZXNzLFxuICBkYXRlcGlja2VyLWJvcmRlci1yYWRpdXM6IHJhZGl1cyxcbiAgZGF0ZXBpY2tlci1zaGFkb3c6IG5vbmUsXG4gIGRhdGVwaWNrZXItYXJyb3ctc2l6ZTogMTFweCxcblxuICByYWRpby1iZzogdHJhbnNwYXJlbnQsXG4gIHJhZGlvLWZnOiBjb2xvci1mZy10ZXh0LFxuICByYWRpby1zaXplOiAxLjI1cmVtLFxuICByYWRpby1ib3JkZXItc2l6ZTogMnB4LFxuICByYWRpby1ib3JkZXItY29sb3I6IGZvcm0tY29udHJvbC1ib3JkZXItY29sb3IsXG4gIHJhZGlvLWNoZWNrbWFyazogdHJhbnNwYXJlbnQsXG4gIHJhZGlvLWNoZWNrZWQtYmc6IHRyYW5zcGFyZW50LFxuICByYWRpby1jaGVja2VkLXNpemU6IDEuMjVyZW0sXG4gIHJhZGlvLWNoZWNrZWQtYm9yZGVyLXNpemU6IDJweCxcbiAgcmFkaW8tY2hlY2tlZC1ib3JkZXItY29sb3I6IGNvbG9yLXN1Y2Nlc3MsXG4gIHJhZGlvLWNoZWNrZWQtY2hlY2ttYXJrOiBjb2xvci1zdWNjZXNzLFxuICByYWRpby1kaXNhYmxlZC1iZzogdHJhbnNwYXJlbnQsXG4gIHJhZGlvLWRpc2FibGVkLXNpemU6IDEuMjVyZW0sXG4gIHJhZGlvLWRpc2FibGVkLWJvcmRlci1zaXplOiAycHgsXG4gIHJhZGlvLWRpc2FibGVkLWJvcmRlci1jb2xvcjogcmFkaW8tYm9yZGVyLWNvbG9yLFxuICByYWRpby1kaXNhYmxlZC1jaGVja21hcms6IHJhZGlvLWNoZWNrbWFyayxcblxuICB0cmVlLWdyaWQtY2VsbC1ib3JkZXItd2lkdGg6IDFweCxcbiAgdHJlZS1ncmlkLWNlbGwtYm9yZGVyLXN0eWxlOiBzb2xpZCxcbiAgdHJlZS1ncmlkLWNlbGwtYm9yZGVyLWNvbG9yOiBzZXBhcmF0b3IsXG4gIHRyZWUtZ3JpZC1yb3ctbWluLWhlaWdodDogMnJlbSxcbiAgdHJlZS1ncmlkLWNlbGwtcGFkZGluZzogMC44NzVyZW0gMS4yNXJlbSxcbiAgdHJlZS1ncmlkLXNvcnQtaGVhZGVyLWJ1dHRvbi1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCxcbiAgdHJlZS1ncmlkLXNvcnQtaGVhZGVyLWJ1dHRvbi1ib3JkZXI6IG5vbmUsXG4gIHRyZWUtZ3JpZC1zb3J0LWhlYWRlci1idXR0b24tcGFkZGluZzogMCxcbiAgdHJlZS1ncmlkLXNvcnQtaGVhZGVyLWJ1dHRvbi1mb250LXdlaWdodDogYm9sZCxcbiAgdHJlZS1ncmlkLWhlYWRlci1iZzogY29sb3ItYmcsXG4gIHRyZWUtZ3JpZC1mb290ZXItYmc6IGNvbG9yLWJnLFxuICB0cmVlLWdyaWQtcm93LWJnOiBjb2xvci1iZyxcbiAgdHJlZS1ncmlkLXJvdy1iZy1ldmVuOiBjb2xvci1iZyxcbiAgdHJlZS1ncmlkLXJvdy1ob3Zlci1iZzogY29sb3ItYmcsXG4gIHRyZWUtZ3JpZC1zb3J0LWhlYWRlci1idXR0b24tY29sb3I6IGNvbG9yLWZnLXRleHQsXG4gIHRyZWUtZ3JpZC1pY29uLWNvbG9yOiBjb2xvci1mZy10ZXh0LFxuKTtcbi8vIHJlZ2lzdGVyIHRoZSB0aGVtZVxuJG5iLXRoZW1lczogbmItcmVnaXN0ZXItdGhlbWUoJHRoZW1lLCBkZWZhdWx0KTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cblxuIEBpbXBvcnQgJy4uL2NvcmUvZnVuY3Rpb25zJztcbiBAaW1wb3J0ICcuLi9jb3JlL21peGlucyc7XG4gQGltcG9ydCAnZGVmYXVsdCc7XG4gXG4gLy8gZGVmYXVsdCB0aGUgYmFzZSB0aGVtZVxuICR0aGVtZTogKFxuIFxuICAgY2FyZC1jb2xvcjogIzNkMzc4MCxcbiAgIGNpcmNsZS1iZzogIzJmMjg3OSxcbiAgIGJvdHRvbS1jYXJkLXRleHQ6ICMzYjM2N2YsXG4gICBsaWdodC10ZXh0OiAjZDFkMWZmLFxuICAgbGlnaHQtdGV4dC0yOiAjYTFhMWU1LFxuICAgbGluZS1jb2xvcjogIzM0MmU3MyxcbiAgIHVwY29taW5nLWNhcmQtY29sb3I6ICM5MTRmZWYsXG4gICBub3Rlcy1oZWFkZXI6ICM3NjU5ZmYsXG4gICBub3RpZmljYXRpb25zLWJnOiAjMjkyNDVjLFxuICAgbm90aWZpY2F0aW9uLWhlYWRlcjogIzFjMTk0MCxcbiAgIG5vdGlmaWNhdGlvbi1zaGFkb3c6ICM4MzZiZmYsXG4gICBwYWdlLWJnOiAjMmYyOTZiLFxuICAgdHJhZGVycy1odWItdGV4dDogI2MxOThmYixcbiAgIHNjcm9sbGJhci1iYWNrZ3JvdW5kOiAjMzMyZTczLFxuICAgc2Nyb2xsYmFyLWNpcmNsZTogIzU1NGRiMyxcbiAgIGJnLWNvbG9yLXRhYnNldDogIzBkZmY5MixcbiAgIHNoYWRlLXdoaXRlLTE6ICNmZmYsXG4gICBjYWxlbmRhci1yb3ctMjogIzU4NTk4ZSxcbiAgIHRyYWRlci1jaGFydC1zaWRlOiAjMmEyNjVkLFxuICAgc2hhZG93OiAwIDhweCAyMHB4IDAgcmdiYSg0MCwgMzcsIDg5LCAwLjYpLFxuICAvLyAgLy8gYmFja2dyb3VuZC1pbWc6IHVybChcIi4vLi4vLi4vLi4vLi5cIiksXG4gXG4gICAvLzMwXG4gIC8vICBjYXJkLWNvbG9yOiAjMmM1YzY2LFxuICAvLyAgY2lyY2xlLWJnOiAjMjQ0YzU1LFxuICAvLyAgYm90dG9tLWNhcmQtdGV4dDogIzM0NzE3ZCxcbiAgLy8gIGxpZ2h0LXRleHQ6ICM1ZmNiZTIsXG4gIC8vICBsaWdodC10ZXh0LTI6ICNhNGRhZTYsXG4gIC8vICBsaW5lLWNvbG9yOiAjMjA1MzVlLFxuICAvLyAgdXBjb21pbmctY2FyZC1jb2xvcjogIzQ2OTNhMyxcbiAgLy8gIG5vdGVzLWhlYWRlcjogIzRkODc5MyxcbiAgLy8gIG5vdGlmaWNhdGlvbnMtYmc6ICMxNTJjMzEsXG4gIC8vICBub3RpZmljYXRpb24taGVhZGVyOiAjMTYyZTMzLFxuICAvLyAgbm90aWZpY2F0aW9uLXNoYWRvdzogIzY0OTZhMCwgIFxuICAvLyAgcGFnZS1iZzogIzIwNDM0YixcbiAgLy8gIHRyYWRlcnMtaHViLXRleHQ6ICMzMjZkNzksXG4gIC8vICBzY3JvbGxiYXItYmFja2dyb3VuZDogIzM0NzE3ZCxcbiAgLy8gIHNjcm9sbGJhci1jaXJjbGU6ICMzMjZkNzksXG4gIC8vICBiZy1jb2xvci10YWJzZXQ6ICMwZGZmOTIsXG4gIC8vICBzaGFkZS13aGl0ZS0xOiAjZmZmLFxuICAvLyAgY2FsZW5kYXItcm93LTI6ICMzNDYyNmIsXG4gIC8vICB0cmFkZXItY2hhcnQtc2lkZTogIzFmNDA0NyxcbiAgLy8gIHNoYWRvdzogMCA4cHggMjBweCAwIHJnYmEoMjIsIDQ1LCA1MCwgLjYpLFxuICAvLyAgYmFja2dyb3VuZC1pbWc6IHVybCguLy4uLy4uLy4uLy4uL3NyYy9hc3NldHMvdGhlbWVzX2ltYWdlcy8zMC5qcGcpLFxuICAvLyAgYmFja2dyb3VuZC1pbWctMjogdXJsKC4vLi4vLi4vc3JjL2Fzc2V0cy90aGVtZXNfaW1hZ2VzLzMwLmpwZyksXG4gICBcbiAgIC8vMzFcbiAgLy8gIGNhcmQtY29sb3I6ICMzMDE1MjMsXG4gIC8vICBjaXJjbGUtYmc6ICMyOTEyMWUsXG4gIC8vICBib3R0b20tY2FyZC10ZXh0OiAjNmMyZjRmLFxuICAvLyAgbGlnaHQtdGV4dDogI2NiOGNhZCxcbiAgLy8gIGxpbmUtY29sb3I6ICMyNDEwMWEsXG4gIC8vICB1cGNvbWluZy1jYXJkLWNvbG9yOiAjOWI0NTcyLFxuICAvLyAgbm90ZXMtaGVhZGVyOiAjNmQzMTUwLFxuIFxuICAvLyAgbm90aWZpY2F0aW9ucy1iZzogIzE5MGIxMixcbiAgLy8gIHBhZ2UtYmc6ICMyNTEwMWIsXG4gIC8vICB0cmFkZXJzLWh1Yi10ZXh0OiAjNjkyZTRkLFxuICAvLyAgc2Nyb2xsYmFyLWJhY2tncm91bmQ6ICM2YzJmNGYsXG4gIC8vICBjYWxlbmRhci1yb3ctMjogIzM4MWUyYyxcbiAgLy8gIGxpZ2h0LXRleHQtMjogI2RhYmJjYixcbiAgLy8gIG5vdGlmaWNhdGlvbi1zaGFkb3c6ICM3ZjRjNjcsXG4gIC8vICBub3RpZmljYXRpb24taGVhZGVyOiAjMTkwYjEyLFxuICAvLyAgdHJhZGVyLWNoYXJ0LXNpZGU6ICMyMjBmMTgsXG4gIC8vICBzaGFkb3c6IDAgOHB4IDIwcHggMCByZ2JhKDI0LCAxMCwgMTcsIC42KSxcbiAgLy8gIHNjcm9sbGJhci1jaXJjbGU6ICM2OTJlNGQsXG4gIC8vICBiZy1jb2xvci10YWJzZXQ6ICMwZGZmOTIsXG4gIC8vICBzaGFkZS13aGl0ZS0xOiAjZmZmLFxuICAvLyAgYmFja2dyb3VuZC1pbWc6IHVybCguLy4uLy4uLy4uLy4uL3NyYy9hc3NldHMvdGhlbWVzX2ltYWdlcy8zMS5qcGcpLFxuICAvLyAgYmFja2dyb3VuZC1pbWctMjogdXJsKC4vLi4vLi4vc3JjL2Fzc2V0cy90aGVtZXNfaW1hZ2VzLzMxLmpwZyksXG4gXG4gICAvLzMyXG4gICAvLyBjYXJkLWNvbG9yOiAjOGI0YTM0LFxuICAgLy8gY2lyY2xlLWJnOiAjNzg0MDJkLFxuICAgLy8gYm90dG9tLWNhcmQtdGV4dDogI2FiNTczYixcbiAgIC8vIGxpZ2h0LXRleHQ6ICNmMWFlOTcsXG4gICAvLyBsaW5lLWNvbG9yOiAjNzUzZTJjLFxuICAgLy8gdXBjb21pbmctY2FyZC1jb2xvcjogI2Q1NmQ0YSxcbiAgIC8vIG5vdGVzLWhlYWRlcjogI2FhNTgzZCxcbiBcbiAgIC8vIG5vdGlmaWNhdGlvbnMtYmc6ICM0NzI1MWEsXG4gICAvLyBwYWdlLWJnOiAjNmIzOTI4LFxuICAgLy8gdHJhZGVycy1odWItdGV4dDogI2E2NTQzOSxcbiAgIC8vIHNjcm9sbGJhci1iYWNrZ3JvdW5kOiAjYWI1NzNiLFxuICAgLy8gY2FsZW5kYXItcm93LTI6ICM4ZTUxM2MsXG4gICAvLyBsaWdodC10ZXh0LTI6ICNlZGNjYzAsXG4gICAvLyBub3RpZmljYXRpb24tc2hhZG93OiAjYjM2ZTU3LFxuICAgLy8gbm90aWZpY2F0aW9uLWhlYWRlcjogIzQ4MjYxYixcbiAgIC8vIHRyYWRlci1jaGFydC1zaWRlOiAjNjEzNDI0LFxuICAgLy8gc2hhZG93OiAwIDhweCAyMHB4IDAgcmdiYSg2OCwgMzYsIDI1LCAuNiksXG4gICAvLyBzY3JvbGxiYXItY2lyY2xlOiAjYTY1NDM5LFxuICAgLy8gYmctY29sb3ItdGFic2V0OiAjMGRmZjkyLFxuICAgLy8gc2hhZGUtd2hpdGUtMTogI2ZmZixcbiAgIC8vIGJhY2tncm91bmQtaW1nOiB1cmwoLi8uLi8uLi8uLi8uLi9zcmMvYXNzZXRzL3RoZW1lc19pbWFnZXMvMzIuanBnKSxcbiAgIC8vIGJhY2tncm91bmQtaW1nLTI6IHVybCguLy4uLy4uL3NyYy9hc3NldHMvdGhlbWVzX2ltYWdlcy8zMi5qcGcpLFxuIFxuICAgLy8zM1xuICAgLy8gY2FyZC1jb2xvcjogIzI4MjgyOCxcbiAgIC8vIGNpcmNsZS1iZzogIzIwMjAyMCxcbiAgIC8vIGJvdHRvbS1jYXJkLXRleHQ6ICM1MjUyNTIsXG4gICAvLyBsaWdodC10ZXh0OiAjYWZhZWFlLFxuICAgLy8gbGluZS1jb2xvcjogIzIxMjEyMSxcbiAgIC8vIHVwY29taW5nLWNhcmQtY29sb3I6ICM4ZDhjOGMsXG4gICAvLyBub3Rlcy1oZWFkZXI6ICM2MzYxNjEsXG4gXG4gICAvLyBub3RpZmljYXRpb25zLWJnOiAjMTMxMzEzLFxuICAgLy8gcGFnZS1iZzogIzFjMWMxYyxcbiAgIC8vIHRyYWRlcnMtaHViLXRleHQ6ICM0ZjRmNGYsXG4gICAvLyBzY3JvbGxiYXItYmFja2dyb3VuZDogIzUyNTI1MixcbiAgIC8vIGNhbGVuZGFyLXJvdy0yOiAjMzAzMDMwLFxuICAgLy8gbGlnaHQtdGV4dC0yOiAjY2NjY2NjLFxuICAgLy8gbm90aWZpY2F0aW9uLXNoYWRvdzogIzc3NzU3NSxcbiAgIC8vIG5vdGlmaWNhdGlvbi1oZWFkZXI6ICMxMzEzMTMsXG4gICAvLyB0cmFkZXItY2hhcnQtc2lkZTogIzFjMWMxYyxcbiAgIC8vIHNoYWRvdzogMCA4cHggMjBweCAwIHJnYmEoMjAsIDIwLCAyMCwgLjYpLFxuICAgLy8gc2Nyb2xsYmFyLWNpcmNsZTogIzRmNGY0ZixcbiAgIC8vIGJnLWNvbG9yLXRhYnNldDogIzBkZmY5MixcbiAgIC8vIHNoYWRlLXdoaXRlLTE6ICNmZmYsXG4gICAvLyBiYWNrZ3JvdW5kLWltZzogdXJsKC4vLi4vLi4vLi4vLi4vc3JjL2Fzc2V0cy90aGVtZXNfaW1hZ2VzLzMzLmpwZyksXG4gICAvLyBiYWNrZ3JvdW5kLWltZy0yOiB1cmwoLi8uLi8uLi9zcmMvYXNzZXRzL3RoZW1lc19pbWFnZXMvMzMuanBnKSxcbiBcbiAgIC8vMzRcbiAgIC8vIGNhcmQtY29sb3I6ICM2NjVjNDUsXG4gICAvLyBjaXJjbGUtYmc6ICM1NjRkMzksXG4gICAvLyBib3R0b20tY2FyZC10ZXh0OiAjNGU0NjMzLFxuICAgLy8gbGlnaHQtdGV4dDogI2M3YjQ4OSxcbiAgIC8vIGxpbmUtY29sb3I6ICM0YTQyMzEsXG4gICAvLyB1cGNvbWluZy1jYXJkLWNvbG9yOiAjYWU5YTZjLFxuICAgLy8gbm90ZXMtaGVhZGVyOiAjODQ3ODVjLFxuIFxuICAgLy8gbm90aWZpY2F0aW9ucy1iZzogIzMzMmMyMSxcbiAgIC8vIHBhZ2UtYmc6ICM0ZDQ0MzMsXG4gICAvLyB0cmFkZXJzLWh1Yi10ZXh0OiAjNGM0NDMxLFxuICAgLy8gc2Nyb2xsYmFyLWJhY2tncm91bmQ6ICM0ZTQ2MzMsXG4gICAvLyBjYWxlbmRhci1yb3ctMjogIzZiNjI0YyxcbiAgIC8vIGxpZ2h0LXRleHQtMjogI2Q4Y2ZiOSxcbiAgIC8vIG5vdGlmaWNhdGlvbi1zaGFkb3c6ICM5Mzg5NzEsXG4gICAvLyBub3RpZmljYXRpb24taGVhZGVyOiAjMzQyZTIyLFxuICAgLy8gdHJhZGVyLWNoYXJ0LXNpZGU6ICM0NzQwMzAsXG4gICAvLyBzaGFkb3c6IDAgOHB4IDIwcHggMCByZ2JhKDUwLCA0NSwgMzQsIC42KSxcbiAgIC8vIHNjcm9sbGJhci1jaXJjbGU6ICM0YzQ0MzEsXG4gICAvLyBiZy1jb2xvci10YWJzZXQ6ICMwZGZmOTIsXG4gICAvLyBzaGFkZS13aGl0ZS0xOiAjZmZmLFxuICAgLy8gYmFja2dyb3VuZC1pbWc6IHVybCguLy4uLy4uLy4uLy4uL3NyYy9hc3NldHMvdGhlbWVzX2ltYWdlcy8zNC5qcGcpLFxuICAgLy8gYmFja2dyb3VuZC1pbWctMjogdXJsKC4vLi4vLi4vc3JjL2Fzc2V0cy90aGVtZXNfaW1hZ2VzLzM0LmpwZyksXG4gXG4gICAvLzM1XG4gICAvLyBjYXJkLWNvbG9yOiAjMTEyOTQwLFxuICAgLy8gY2lyY2xlLWJnOiAjMGYyNDM4LFxuICAgLy8gYm90dG9tLWNhcmQtdGV4dDogIzJjNDg2NCxcbiAgIC8vIGxpZ2h0LXRleHQ6ICM4NGE5Y2QsXG4gICAvLyBsaW5lLWNvbG9yOiAjMGUyMTMzLFxuICAgLy8gdXBjb21pbmctY2FyZC1jb2xvcjogIzNmNjg5MCxcbiAgIC8vIG5vdGVzLWhlYWRlcjogIzI1NDQ2MixcbiBcbiAgIC8vIG5vdGlmaWNhdGlvbnMtYmc6ICMwOTE1MjAsXG4gICAvLyBwYWdlLWJnOiAjMGQyMDMyLFxuICAgLy8gdHJhZGVycy1odWItdGV4dDogIzJiNDY2MSxcbiAgIC8vIHNjcm9sbGJhci1iYWNrZ3JvdW5kOiAjMmM0ODY0LFxuICAgLy8gY2FsZW5kYXItcm93LTI6ICMxYTMxNDcsXG4gICAvLyBsaWdodC10ZXh0LTI6ICNiN2M5ZGIsXG4gICAvLyBub3RpZmljYXRpb24tc2hhZG93OiAjNDI1ZDc2LFxuICAgLy8gbm90aWZpY2F0aW9uLWhlYWRlcjogIzA5MTYyMixcbiAgIC8vIHRyYWRlci1jaGFydC1zaWRlOiAjMGMxZDJkLFxuICAgLy8gc2hhZG93OiAwIDhweCAyMHB4IDAgcmdiYSg4LCAyMCwgMzEsIC42KSxcbiAgIC8vIHNjcm9sbGJhci1jaXJjbGU6ICMyYjQ2NjEsXG4gICAvLyBiZy1jb2xvci10YWJzZXQ6ICMwZGZmOTIsXG4gICAvLyBzaGFkZS13aGl0ZS0xOiAjZmZmLFxuICAgLy8gYmFja2dyb3VuZC1pbWc6IHVybCguLy4uLy4uLy4uLy4uL3NyYy9hc3NldHMvdGhlbWVzX2ltYWdlcy8zNS5qcGcpLFxuICAgLy8gYmFja2dyb3VuZC1pbWctMjogdXJsKC4vLi4vLi4vc3JjL2Fzc2V0cy90aGVtZXNfaW1hZ2VzLzM1LmpwZyksXG4gXG4gIC8vICBDaHJpc3RtYXNcbiAgLy8gIGNhcmQtY29sb3I6ICNhODQwMzUsXG4gIC8vICBjaXJjbGUtYmc6ICNiZDU2NGMsXG4gIC8vICBib3R0b20tY2FyZC10ZXh0OiAjYmEzYzJmLFxuICAvLyAgbGlnaHQtdGV4dDogI2Y2OTQ4YSxcbiAgLy8gIGxpbmUtY29sb3I6ICM4MjMwMjcsXG4gIC8vICB1cGNvbWluZy1jYXJkLWNvbG9yOiAjZWE0NjM0LFxuICAvLyAgbm90ZXMtaGVhZGVyOiAjYjM1ZDU0LFxuIFxuICAvLyAgbm90aWZpY2F0aW9ucy1iZzogI2EyMzIyYyxcbiAgLy8gIHBhZ2UtYmc6ICNiNjRjNDMsXG4gIC8vICB0cmFkZXJzLWh1Yi10ZXh0OiAjYjQzYTJlLFxuICAvLyAgc2Nyb2xsYmFyLWJhY2tncm91bmQ6ICNiYTNjMmYsXG4gIC8vICBjYWxlbmRhci1yb3ctMjogI2FhNDczZCxcbiAgLy8gIGxpZ2h0LXRleHQtMjogI2VmYmZiYSxcbiAgLy8gIG5vdGlmaWNhdGlvbi1zaGFkb3c6ICNiYjcyNmEsXG4gIC8vICBub3RpZmljYXRpb24taGVhZGVyOiAjNzEzNDJlLFxuICAvLyAgdHJhZGVyLWNoYXJ0LXNpZGU6ICM3NTJkMjUsXG4gIC8vICBzaGFkb3c6IDAgOHB4IDIwcHggMCByZ2JhKDExNywgNDUsIDM3LCAuNiksXG4gIC8vICBzY3JvbGxiYXItY2lyY2xlOiAjYjQzYTJlLFxuICAvLyAgYmctY29sb3ItdGFic2V0OiAjMGRmZjkyLFxuICAvLyAgc2hhZGUtd2hpdGUtMTogI2ZmZixcbiAgLy8gIGJhY2tncm91bmQtaW1nOiB1cmwoaHR0cHM6Ly9kMzA4ZmFrYnFlYms3Yy5jbG91ZGZyb250Lm5ldC93aXptYXNfYmcuanBnKSxcbiAgLy8gIGJhY2tncm91bmQtaW1nLTI6IHVybChodHRwczovL2QzMDhmYWticWViazdjLmNsb3VkZnJvbnQubmV0L3dpem1hc19iZy5qcGcpLFxuICAgXG4gICBjb2xvci1iZy0yOiAjM2MzNThjLFxuICAgY29sb3ItYmctMzogI2EyMzIyYyxcbiAgIGNvbG9yLWJnLTQ6ICM1NTRkYjMsXG4gICBjb2xvci1iZy01OiAjMzczMTdhLFxuICAgY29sb3ItYmctNjogIzU1NGRiMyxcbiAgIGNvbG9yLWJnLTc6ICM5MTRmZWYsXG4gICBcbiAgIHJhZGl1czogMC41cmVtLFxuIFxuICAgY29sb3ItYmc6ICMzZDM3ODAsXG4gICBjb2xvci1iZy1hY3RpdmU6ICM0OTQyOTksXG4gICBjb2xvci1mZzogI2ExYTFlNSxcbiAgIGNvbG9yLWZnLWhlYWRpbmc6ICNmZmZmZmYsXG4gICBjb2xvci1mZy10ZXh0OiAjZDFkMWZmLFxuICAgY29sb3ItZmctaGlnaGxpZ2h0OiAjMDBmOWE2LFxuIFxuICAgY29sb3ItZ3JheTogcmdiYSg4MSwgMTEzLCAxNjUsIDAuMTUpLFxuICAgY29sb3ItbmV1dHJhbDogdHJhbnNwYXJlbnQsXG4gICBjb2xvci13aGl0ZTogI2ZmZmZmZixcbiAgIGNvbG9yLWRpc2FibGVkOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCksXG4gXG4gICBjb2xvci1wcmltYXJ5OiAjNzY1OWZmLFxuICAgY29sb3Itc3VjY2VzczogIzBkZmY5MixcbiAgIGNvbG9yLWluZm86ICMwMDg4ZmYsXG4gICBjb2xvci13YXJuaW5nOiAjZmZhMTAwLFxuICAgY29sb3ItZGFuZ2VyOiAjZmYzODZhLFxuIFxuICAgbGluay1jb2xvcjogIzAwZjlhNixcbiAgIGxpbmstY29sb3ItaG92ZXI6ICMxNGZmYmUsXG4gXG4gICBzZXBhcmF0b3I6ICMzNDJlNzMsICBcbiBcbiAgIGNhcmQtaGVhZGVyLWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ib2xkZXIsXG4gICBsYXlvdXQtYmc6ICMyZjI5NmIsXG4gICBcbiBcbiAgIHNjcm9sbGJhci1mZzogIzU1NGRiMyxcbiAgIHNjcm9sbGJhci1iZzogIzMzMmU3MyxcbiBcbiAgIHJhZGlhbC1ncmFkaWVudDogcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA1MCUgNTAlLCAjNDIzZjhjLCAjMzAyYzZlKSxcbiAgIGxpbmVhci1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMTcxNzQ5LCAjNDEzNzg5KSxcbiBcbiAgIHNpZGViYXItZmc6IGNvbG9yLXNlY29uZGFyeSxcbiAgIHNpZGViYXItYmc6IGNvbG9yLWJnLFxuIFxuICAgaGVhZGVyLWZnOiBjb2xvci13aGl0ZSxcbiAgIGhlYWRlci1iZzogY2FyZC1jb2xvcixcbiBcbiAgIGZvb3Rlci1mZzogY29sb3ItZmcsXG4gICBmb290ZXItYmc6IGNvbG9yLWJnLFxuIFxuICAgYWN0aW9ucy1mZzogY29sb3ItZmcsXG4gICBhY3Rpb25zLWJnOiBjb2xvci1iZyxcbiBcbiAgIHVzZXItZmc6IGNvbG9yLWJnLFxuICAgdXNlci1iZzogY29sb3ItZmcsXG4gICB1c2VyLWZnLWhpZ2hsaWdodDogY29sb3ItZmctaGlnaGxpZ2h0LFxuIFxuICAgcG9wb3Zlci1ib3JkZXI6IGNvbG9yLXByaW1hcnksXG4gICBwb3BvdmVyLXNoYWRvdzogc2hhZG93LFxuIFxuICAgY29udGV4dC1tZW51LWFjdGl2ZS1iZzogY29sb3ItcHJpbWFyeSxcbiAgIGNvbnRleHQtbWVudS1ib3JkZXI6IGNvbG9yLXByaW1hcnksXG4gXG4gICBmb290ZXItaGVpZ2h0OiBoZWFkZXItaGVpZ2h0LFxuIFxuICAgc2lkZWJhci13aWR0aDogMTYuMjVyZW0sXG4gICBzaWRlYmFyLXdpZHRoLWNvbXBhY3Q6IDMuNDVyZW0sXG4gXG4gICBtZW51LWZnOiBjb2xvci1mZyxcbiAgIG1lbnUtYmc6IGNvbG9yLWJnLFxuICAgbWVudS1hY3RpdmUtZmc6IGNvbG9yLXdoaXRlLFxuICAgbWVudS1ncm91cC1mZzogY29sb3Itd2hpdGUsXG4gICBtZW51LWZvbnQtd2VpZ2h0OiBmb250LXdlaWdodC1ub3JtYWwsXG4gICBtZW51LWFjdGl2ZS1mb250LXdlaWdodDogZm9udC13ZWlnaHQtYm9sZGVyLFxuICAgbWVudS1zdWJtZW51LWJnOiBsYXlvdXQtYmcsXG4gICBtZW51LXN1Ym1lbnUtZmc6IGNvbG9yLWZnLFxuICAgbWVudS1zdWJtZW51LWFjdGl2ZS1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgIG1lbnUtc3VibWVudS1hY3RpdmUtYmc6IHJnYmEoMCwgMjU1LCAxNzAsIDAuMjUpLFxuICAgbWVudS1zdWJtZW51LWFjdGl2ZS1ib3JkZXItY29sb3I6IGNvbG9yLWZnLWhpZ2hsaWdodCxcbiAgIG1lbnUtc3VibWVudS1hY3RpdmUtc2hhZG93OiAwIDJweCAxMnB4IDAgcmdiYSgwLCAyNTUsIDE3MCwgMC4yNSksXG4gICBtZW51LWl0ZW0tcGFkZGluZzogMC4yNXJlbSAwLjc1cmVtLFxuICAgbWVudS1pdGVtLXNlcGFyYXRvcjogdHJhbnNwYXJlbnQsXG4gXG4gICBidG4taGVyby1zaGFkb3c6IDAgNHB4IDEwcHggMCByZ2JhKDMzLCA3LCA3NywgMC41KSxcbiAgIGJ0bi1oZXJvLXRleHQtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjMpLFxuICAgYnRuLWhlcm8tYmV2ZWwtc2l6ZTogMCAzcHggMCAwLFxuICAgYnRuLWhlcm8tZ2xvdy1zaXplOiAwIDJweCA4cHggMCxcbiAgIGJ0bi1oZXJvLXByaW1hcnktZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gICBidG4taGVyby1zdWNjZXNzLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICAgYnRuLWhlcm8td2FybmluZy1nbG93LXNpemU6IGJ0bi1oZXJvLWdsb3ctc2l6ZSxcbiAgIGJ0bi1oZXJvLWluZm8tZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gICBidG4taGVyby1kYW5nZXItZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gICBidG4taGVyby1zZWNvbmRhcnktZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gICBidG4tc2Vjb25kYXJ5LWJvcmRlcjogY29sb3ItcHJpbWFyeSxcbiAgIGJ0bi1vdXRsaW5lLWZnOiBjb2xvci1mZy1oZWFkaW5nLFxuICAgYnRuLW91dGxpbmUtaG92ZXItZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gICBidG4tb3V0bGluZS1mb2N1cy1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgIGJ0bi1ncm91cC1iZzogIzM3MzI3MyxcbiAgIGJ0bi1ncm91cC1zZXBhcmF0b3I6ICMzMTJjNjYsXG4gXG4gICBmb3JtLWNvbnRyb2wtYmc6ICMzNzMxN2EsXG4gICBmb3JtLWNvbnRyb2wtZm9jdXMtYmc6IHNlcGFyYXRvcixcbiAgIGZvcm0tY29udHJvbC1ib3JkZXItY29sb3I6IHNlcGFyYXRvcixcbiAgIGZvcm0tY29udHJvbC1zZWxlY3RlZC1ib3JkZXItY29sb3I6IGNvbG9yLXByaW1hcnksXG4gXG4gICBjaGVja2JveC1iZzogdHJhbnNwYXJlbnQsXG4gICBjaGVja2JveC1zaXplOiAxLjI1cmVtLFxuICAgY2hlY2tib3gtYm9yZGVyLXNpemU6IDJweCxcbiAgIGNoZWNrYm94LWJvcmRlci1jb2xvcjogY29sb3ItbGlnaHQtMixcbiAgIGNoZWNrYm94LWNoZWNrbWFyazogdHJhbnNwYXJlbnQsXG4gXG4gICBjaGVja2JveC1jaGVja2VkLWJnOiB0cmFuc3BhcmVudCxcbiAgIGNoZWNrYm94LWNoZWNrZWQtc2l6ZTogMS4yNXJlbSxcbiAgIGNoZWNrYm94LWNoZWNrZWQtYm9yZGVyLXNpemU6IDJweCxcbiAgIGNoZWNrYm94LWNoZWNrZWQtYm9yZGVyLWNvbG9yOiBjb2xvci1zdWNjZXNzLFxuICAgY2hlY2tib3gtY2hlY2tlZC1jaGVja21hcms6IGNvbG9yLWZnLWhlYWRpbmcsXG4gXG4gICBjaGVja2JveC1kaXNhYmxlZC1iZzogdHJhbnNwYXJlbnQsXG4gICBjaGVja2JveC1kaXNhYmxlZC1zaXplOiAxLjI1cmVtLFxuICAgY2hlY2tib3gtZGlzYWJsZWQtYm9yZGVyLXNpemU6IDJweCxcbiAgIGNoZWNrYm94LWRpc2FibGVkLWJvcmRlci1jb2xvcjogY29sb3ItZmctaGVhZGluZyxcbiAgIGNoZWNrYm94LWRpc2FibGVkLWNoZWNrbWFyazogY29sb3ItZmctaGVhZGluZyxcbiBcbiAgIHNlYXJjaC1iZzogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMTcxNzQ5LCAjNDEzNzg5KSxcbiBcbiAgIHNtYXJ0LXRhYmxlLWhlYWRlci1mb250LXdlaWdodDogZm9udC13ZWlnaHQtbm9ybWFsLFxuICAgc21hcnQtdGFibGUtaGVhZGVyLWJnOiBjb2xvci1iZy1hY3RpdmUsXG4gICBzbWFydC10YWJsZS1iZy1ldmVuOiAjM2EzNDdhLFxuICAgc21hcnQtdGFibGUtYmctYWN0aXZlOiBjb2xvci1iZy1hY3RpdmUsXG4gXG4gICBzbWFydC10YWJsZS1wYWdpbmctYm9yZGVyLWNvbG9yOiBjb2xvci1wcmltYXJ5LFxuICAgc21hcnQtdGFibGUtcGFnaW5nLWJvcmRlci13aWR0aDogMnB4LFxuICAgc21hcnQtdGFibGUtcGFnaW5nLWZnLWFjdGl2ZTogY29sb3ItZmctaGVhZGluZyxcbiAgIHNtYXJ0LXRhYmxlLXBhZ2luZy1iZy1hY3RpdmU6IGNvbG9yLXByaW1hcnksXG4gICBzbWFydC10YWJsZS1wYWdpbmctaG92ZXI6IHJnYmEoMCwgMCwgMCwgMC4yKSxcbiBcbiAgIGJhZGdlLWZnLXRleHQ6IGNvbG9yLXdoaXRlLFxuICAgYmFkZ2UtcHJpbWFyeS1iZy1jb2xvcjogY29sb3ItcHJpbWFyeSxcbiAgIGJhZGdlLXN1Y2Nlc3MtYmctY29sb3I6IGNvbG9yLXN1Y2Nlc3MsXG4gICBiYWRnZS1pbmZvLWJnLWNvbG9yOiBjb2xvci1pbmZvLFxuICAgYmFkZ2Utd2FybmluZy1iZy1jb2xvcjogY29sb3Itd2FybmluZyxcbiAgIGJhZGdlLWRhbmdlci1iZy1jb2xvcjogY29sb3ItZGFuZ2VyLFxuIFxuICAgc3Bpbm5lci1iZzogY29sb3ItYmcsXG4gICBzdGVwcGVyLWFjY2VudC1jb2xvcjogY29sb3Itc3VjY2VzcyxcbiBcbiAgIHRhYnMtc2VsZWN0ZWQtc2Vjb25kLWNvbG9yOiBjb2xvci1zdWNjZXNzLFxuICAgdGFicy1zZWxlY3RlZC1kZWdyZWVzOiAyMGRlZyxcbiBcbiAgIGNhbGVuZGFyLWFjdGl2ZS1pdGVtLWJnOiBjb2xvci1wcmltYXJ5LFxuICAgY2FsZW5kYXItc2VsZWN0ZWQtaXRlbS1iZzogY29sb3ItcHJpbWFyeSxcbiAgIGNhbGVuZGFyLXJhbmdlLWJnLWluLXJhbmdlOiAjNGU0MDk1LFxuICAgY2FsZW5kYXItdG9kYXktaXRlbS1iZzogIzM1MmY2ZSxcbiBcbiAgIHNlbGVjdC1vcHRpb24tZGlzYWJsZWQtYmc6ICMzMTJlNzUsXG4gXG4gICB0b2FzdHItY29sb3ItZmc6IGNvbG9yLXdoaXRlLFxuICAgdG9hc3RyLXBhZGRpbmc6IDEuMjVyZW0sXG4gICB0b2FzdHItYm9yZGVyOiAwLFxuICAgdG9hc3RyLWRlZmF1bHQtYmFja2dyb3VuZDogI2JjYzNjYyxcbiBcbiAgIHRvb2x0aXAtZmc6IGNvbG9yLWJnLFxuICAgdG9vbHRpcC1zdGF0dXMtZmc6IGNvbG9yLXdoaXRlLFxuIFxuICAgZGF0ZXBpY2tlci1ib3JkZXI6IGNvbG9yLXByaW1hcnksXG4gICBkYXRlcGlja2VyLXNoYWRvdzogc2hhZG93LFxuIFxuICAgcmFkaW8tY2hlY2tlZC1ib3JkZXItY29sb3I6IGNvbG9yLXByaW1hcnksXG4gICByYWRpby1jaGVja2VkLWNoZWNrbWFyazogY29sb3ItcHJpbWFyeSxcbiAgIFxuICAgY2FsZW5kYXItcm93LWJnOiAjZmZmLFxuICAgY2FsZW5kYXItbGFyZ2Utd2lkdGg6IDEwMCUsXG4gICBjYWxlbmRhci1sYXJnZS1ib2R5LWhlaWdodDogMjcuNzVyZW0sXG4gICBjYWxlbmRhci1kYXktY2VsbC1sYXJnZS13aWR0aDogMTAwJSxcbiAgIGNhbGVuZGFyLWRheS1jZWxsLWxhcmdlLWhlaWdodDogNS41cmVtLFxuICAgY2FsZW5kYXItbW9udGgtY2VsbC1sYXJnZS13aWR0aDogNC4yNXJlbSxcbiAgIGNhbGVuZGFyLW1vbnRoLWNlbGwtbGFyZ2UtaGVpZ2h0OiAyLjM3NXJlbSxcbiAgIGNhbGVuZGFyLXllYXItY2VsbC1sYXJnZS13aWR0aDogY2FsZW5kYXItbW9udGgtY2VsbC13aWR0aCxcbiAgIGNhbGVuZGFyLXllYXItY2VsbC1sYXJnZS1oZWlnaHQ6IGNhbGVuZGFyLW1vbnRoLWNlbGwtaGVpZ2h0LFxuICk7XG4gLy8gcmVnaXN0ZXIgdGhlIHRoZW1lXG4gJG5iLXRoZW1lczogbmItcmVnaXN0ZXItdGhlbWUoJHRoZW1lLCBjb3NtaWMsIGRlZmF1bHQpO1xuICIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cblxuQGltcG9ydCAnLi4vY29yZS9mdW5jdGlvbnMnO1xuQGltcG9ydCAnLi4vY29yZS9taXhpbnMnO1xuQGltcG9ydCAnZGVmYXVsdCc7XG5cbi8vIGRlZmF1bHQgdGhlIGJhc2UgdGhlbWVcbiR0aGVtZTogKFxuXG4gIGNvbG9yLWJnLTI6ICM3N2IxZmYsXG4gIFxuICBoZWFkZXItZmc6ICNmN2ZhZmIsXG4gIGhlYWRlci1iZzogIzExMTIxOCxcblxuICBsYXlvdXQtYmc6ICNmMWY1ZjgsXG5cbiAgY29sb3ItZmctaGVhZGluZzogIzE4MTgxOCxcbiAgY29sb3ItZmctdGV4dDogIzRiNGI0YixcbiAgY29sb3ItZmctaGlnaGxpZ2h0OiBjb2xvci1mZyxcblxuICBzZXBhcmF0b3I6ICNjZGQ1ZGMsXG5cbiAgcmFkaXVzOiAwLjE3cmVtLFxuXG4gIHNjcm9sbGJhci1iZzogI2UzZTllZSxcblxuICBjb2xvci1wcmltYXJ5OiAjNzNhMWZmLFxuICBjb2xvci1zdWNjZXNzOiAjNWRjZmUzLFxuICBjb2xvci1pbmZvOiAjYmE3ZmVjLFxuICBjb2xvci13YXJuaW5nOiAjZmZhMzZiLFxuICBjb2xvci1kYW5nZXI6ICNmZjZiODMsXG5cbiAgYnRuLXNlY29uZGFyeS1iZzogI2VkZjJmNSxcbiAgYnRuLXNlY29uZGFyeS1ib3JkZXI6ICNlZGYyZjUsXG5cbiAgYWN0aW9ucy1mZzogI2QzZGJlNSxcbiAgYWN0aW9ucy1iZzogY29sb3ItYmcsXG5cbiAgc2lkZWJhci1iZzogI2UzZTllZSxcblxuICBib3JkZXItY29sb3I6ICNkNWRiZTAsXG5cbiAgbWVudS1mb250LXdlaWdodDogZm9udC13ZWlnaHQtYm9sZGVyLFxuICBtZW51LWZnOiBjb2xvci1mZy10ZXh0LFxuICBtZW51LWJnOiAjZTNlOWVlLFxuICBtZW51LWFjdGl2ZS1mZzogY29sb3ItZmctaGVhZGluZyxcbiAgbWVudS1hY3RpdmUtYmc6IG1lbnUtYmcsXG5cbiAgbWVudS1zdWJtZW51LWJnOiBtZW51LWJnLFxuICBtZW51LXN1Ym1lbnUtZmc6IGNvbG9yLWZnLXRleHQsXG4gIG1lbnUtc3VibWVudS1hY3RpdmUtZmc6IGNvbG9yLWZnLWhlYWRpbmcsXG4gIG1lbnUtc3VibWVudS1hY3RpdmUtYmc6ICNjZGQ1ZGMsXG4gIG1lbnUtc3VibWVudS1hY3RpdmUtYm9yZGVyLWNvbG9yOiBtZW51LXN1Ym1lbnUtYWN0aXZlLWJnLFxuICBtZW51LXN1Ym1lbnUtYWN0aXZlLXNoYWRvdzogbm9uZSxcbiAgbWVudS1zdWJtZW51LWhvdmVyLWZnOiBtZW51LXN1Ym1lbnUtYWN0aXZlLWZnLFxuICBtZW51LXN1Ym1lbnUtaG92ZXItYmc6IG1lbnUtYmcsXG4gIG1lbnUtc3VibWVudS1pdGVtLWJvcmRlci13aWR0aDogMC4xMjVyZW0sXG4gIG1lbnUtc3VibWVudS1pdGVtLWJvcmRlci1yYWRpdXM6IHJhZGl1cyxcbiAgbWVudS1zdWJtZW51LWl0ZW0tcGFkZGluZzogMC41cmVtIDFyZW0sXG4gIG1lbnUtc3VibWVudS1pdGVtLWNvbnRhaW5lci1wYWRkaW5nOiAwIDEuMjVyZW0sXG4gIG1lbnUtc3VibWVudS1wYWRkaW5nOiAwLjVyZW0sXG5cbiAgYnRuLWJvcmRlci1yYWRpdXM6IGJ0bi1zZW1pLXJvdW5kLWJvcmRlci1yYWRpdXMsXG5cbiAgYnRuLWhlcm8tZGVncmVlOiAwZGVnLFxuICBidG4taGVyby1wcmltYXJ5LWRlZ3JlZTogYnRuLWhlcm8tZGVncmVlLFxuICBidG4taGVyby1zdWNjZXNzLWRlZ3JlZTogYnRuLWhlcm8tZGVncmVlLFxuICBidG4taGVyby13YXJuaW5nLWRlZ3JlZTogYnRuLWhlcm8tZGVncmVlLFxuICBidG4taGVyby1pbmZvLWRlZ3JlZTogYnRuLWhlcm8tZGVncmVlLFxuICBidG4taGVyby1kYW5nZXItZGVncmVlOiBidG4taGVyby1kZWdyZWUsXG4gIGJ0bi1oZXJvLXNlY29uZGFyeS1kZWdyZWU6IGJ0bi1oZXJvLWRlZ3JlZSxcbiAgYnRuLWhlcm8tZ2xvdy1zaXplOiAwIDAgMjBweCAwLFxuICBidG4taGVyby1wcmltYXJ5LWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1zdWNjZXNzLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby13YXJuaW5nLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1pbmZvLWdsb3ctc2l6ZTogYnRuLWhlcm8tZ2xvdy1zaXplLFxuICBidG4taGVyby1kYW5nZXItZ2xvdy1zaXplOiBidG4taGVyby1nbG93LXNpemUsXG4gIGJ0bi1oZXJvLXNlY29uZGFyeS1nbG93LXNpemU6IDAgMCAwIDAsXG4gIGJ0bi1oZXJvLWJvcmRlci1yYWRpdXM6IGJ0bi1ib3JkZXItcmFkaXVzLFxuICBcbiAgY2hlY2tib3gtY2hlY2tlZC1ib3JkZXItY29sb3I6IGNvbG9yLWxpZ2h0LTIsXG5cbiAgY2FyZC1zaGFkb3c6IG5vbmUsXG4gIGNhcmQtYm9yZGVyLXdpZHRoOiAwLFxuICBjYXJkLWJvcmRlci1jb2xvcjogYm9yZGVyLWNvbG9yLFxuICBjYXJkLWhlYWRlci1ib3JkZXItd2lkdGg6IDAsXG5cbiAgbGluay1jb2xvcjogIzVkY2ZlMyxcbiAgbGluay1jb2xvci1ob3ZlcjogIzdkY2ZlMyxcbiAgbGluay1jb2xvci12aXNpdGVkOiBsaW5rLWNvbG9yLFxuXG4gIGFjdGlvbnMtc2VwYXJhdG9yOiAjZjFmNGY1LFxuXG4gIG1vZGFsLXNlcGFyYXRvcjogYm9yZGVyLWNvbG9yLFxuXG4gIHRhYnMtc2VsZWN0ZWQ6IGNvbG9yLXByaW1hcnksXG4gIHRhYnMtc2VsZWN0ZWQtc2Vjb25kLWNvbG9yOiBjb2xvci1wcmltYXJ5LFxuICB0YWJzLXNlcGFyYXRvcjogI2ViZWNlZSxcblxuICBzbWFydC10YWJsZS1wYWdpbmctYmctYWN0aXZlOiBjb2xvci1wcmltYXJ5LFxuXG4gIHJvdXRlLXRhYnMtc2VsZWN0ZWQ6IGNvbG9yLXByaW1hcnksXG5cbiAgcG9wb3Zlci1ib3JkZXI6IGNvbG9yLXByaW1hcnksXG5cbiAgZm9vdGVyLXNoYWRvdzogbm9uZSxcbiAgZm9vdGVyLXNlcGFyYXRvcjogYm9yZGVyLWNvbG9yLFxuICBmb290ZXItZmctaGlnaGxpZ2h0OiAjMmEyYTJhLFxuXG4gIGNhbGVuZGFyLXRvZGF5LWl0ZW0tYmc6ICNhMmIyYzcsXG4gIGNhbGVuZGFyLWFjdGl2ZS1pdGVtLWJnOiBjb2xvci1wcmltYXJ5LFxuICBjYWxlbmRhci1yYW5nZS1iZy1pbi1yYW5nZTogI2UzZWNmZSxcbiAgY2FsZW5kYXItdG9kYXktZmc6IGNvbG9yLXdoaXRlLFxuXG4gIHRvYXN0ci1pY29uLXJhZGl1czogcmFkaXVzLFxuXG4gIGRhdGVwaWNrZXItYm9yZGVyOiBjb2xvci1wcmltYXJ5LFxuICBcbiAgY2FsZW5kYXItbGFyZ2Utd2lkdGg6IDEwMCUsXG4gIGNhbGVuZGFyLWxhcmdlLWJvZHktaGVpZ2h0OiAyNy43NXJlbSxcbiAgY2FsZW5kYXItZGF5LWNlbGwtbGFyZ2Utd2lkdGg6IDEwMCUsXG4gIGNhbGVuZGFyLWRheS1jZWxsLWxhcmdlLWhlaWdodDogNS41cmVtLFxuICBjYWxlbmRhci1tb250aC1jZWxsLWxhcmdlLXdpZHRoOiA0LjI1cmVtLFxuICBjYWxlbmRhci1tb250aC1jZWxsLWxhcmdlLWhlaWdodDogMi4zNzVyZW0sXG4gIGNhbGVuZGFyLXllYXItY2VsbC1sYXJnZS13aWR0aDogY2FsZW5kYXItbW9udGgtY2VsbC13aWR0aCxcbiAgY2FsZW5kYXIteWVhci1jZWxsLWxhcmdlLWhlaWdodDogY2FsZW5kYXItbW9udGgtY2VsbC1oZWlnaHQsXG4pO1xuXG4vLyByZWdpc3RlciB0aGUgdGhlbWVcbiRuYi10aGVtZXM6IG5iLXJlZ2lzdGVyLXRoZW1lKCR0aGVtZSwgY29ycG9yYXRlLCBkZWZhdWx0KTtcbiIsIkBpbXBvcnQgJ35ib290c3RyYXAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MnO1xyXG5AaW1wb3J0ICd+Ym9vdHN0cmFwL3Njc3MvX3ZhcmlhYmxlcy5zY3NzJztcclxuQGltcG9ydCAnfmJvb3RzdHJhcC9zY3NzL21peGlucy9fYnJlYWtwb2ludHMuc2Nzcyc7XHJcbkBpbXBvcnQgJ35AbmVidWxhci90aGVtZS9zdHlsZXMvdGhlbWluZyc7XHJcbkBpbXBvcnQgJ35AbmVidWxhci90aGVtZS9zdHlsZXMvdGhlbWVzL2RlZmF1bHQnO1xyXG5AaW1wb3J0ICd+QG5lYnVsYXIvdGhlbWUvc3R5bGVzL3RoZW1lcy9jb3NtaWMnO1xyXG5AaW1wb3J0ICd+QG5lYnVsYXIvdGhlbWUvc3R5bGVzL3RoZW1lcy9jb3Jwb3JhdGUnO1xyXG5cclxuQGluY2x1ZGUgbmItaW5zdGFsbC1jb21wb25lbnQge1xyXG5cdDo6bmctZGVlcCBuYi1jYXJkIHtcclxuXHRcdFx0XHRuYi1jYXJkLWhlYWRlciB7XHJcblx0XHRcdFx0XHRuYi1zZWxlY3Qge1xyXG5cdFx0XHRcdFx0XHQuYnRuLXByaW1hcnkge1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMTZweDtcclxuXHRcdFx0XHRcdFx0XHRAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LXVwKG1kKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDEuMTI1cmVtO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cdFx0XHJcblx0fVxyXG59XHJcblxyXG4uZi1oIHtcclxuICBoZWlnaHQ6IDEwMCUhaW1wb3J0YW50O1xyXG4gIG1pbi1oZWlnaHQ6IDQzMHB4O1xyXG59XHJcbi5idXR0b24td2lkdGgge1xyXG5cdHdpZHRoOiAxMjBweDtcclxufVxyXG5cclxuLnByaWNlLWZvbnQtc2l6ZSB7XHJcblx0Zm9udC1zaXplOiAxNnB4O1xyXG5cdEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAobWQpIHtcclxuXHRcdGZvbnQtc2l6ZTogMjBweDtcclxuXHR9XHJcblx0QGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cChsZykge1xyXG5cdFx0Zm9udC1zaXplOiAyMHB4O1xyXG5cdH1cclxufVxyXG4ubmJCdXR0b25JY29uIHtcclxuXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuXHRib3JkZXI6IG5vbmU7XHJcblx0Y29sb3I6IHJnYigyMDksIDIwOSwgMjU1KTtcclxuXHRwYWRkaW5nOiAwO1xyXG59IiwiLy8gQnJlYWtwb2ludCB2aWV3cG9ydCBzaXplcyBhbmQgbWVkaWEgcXVlcmllcy5cbi8vXG4vLyBCcmVha3BvaW50cyBhcmUgZGVmaW5lZCBhcyBhIG1hcCBvZiAobmFtZTogbWluaW11bSB3aWR0aCksIG9yZGVyIGZyb20gc21hbGwgdG8gbGFyZ2U6XG4vL1xuLy8gICAgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KVxuLy9cbi8vIFRoZSBtYXAgZGVmaW5lZCBpbiB0aGUgYCRncmlkLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gTmFtZSBvZiB0aGUgbmV4dCBicmVha3BvaW50LCBvciBudWxsIGZvciB0aGUgbGFzdCBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSlcbi8vICAgIG1kXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAkYnJlYWtwb2ludC1uYW1lczogKHhzIHNtIG1kIGxnIHhsKSlcbi8vICAgIG1kXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludC1uYW1lczogbWFwLWtleXMoJGJyZWFrcG9pbnRzKSkge1xuICAkbjogaW5kZXgoJGJyZWFrcG9pbnQtbmFtZXMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbiAhPSBudWxsIGFuZCAkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIDU3NnB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbWluICE9IDAsICRtaW4sIG51bGwpO1xufVxuXG4vLyBNYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE51bGwgZm9yIHRoZSBsYXJnZXN0IChsYXN0KSBicmVha3BvaW50LlxuLy8gVGhlIG1heGltdW0gdmFsdWUgaXMgY2FsY3VsYXRlZCBhcyB0aGUgbWluaW11bSBvZiB0aGUgbmV4dCBvbmUgbGVzcyAwLjAycHhcbi8vIHRvIHdvcmsgYXJvdW5kIHRoZSBsaW1pdGF0aW9ucyBvZiBgbWluLWAgYW5kIGBtYXgtYCBwcmVmaXhlcyBhbmQgdmlld3BvcnRzIHdpdGggZnJhY3Rpb25hbCB3aWR0aHMuXG4vLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhcXVlcmllcy00LyNtcS1taW4tbWF4XG4vLyBVc2VzIDAuMDJweCByYXRoZXIgdGhhbiAwLjAxcHggdG8gd29yayBhcm91bmQgYSBjdXJyZW50IHJvdW5kaW5nIGJ1ZyBpbiBTYWZhcmkuXG4vLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNzY3Ljk4cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbmV4dDogYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAcmV0dXJuIGlmKCRuZXh0LCBicmVha3BvaW50LW1pbigkbmV4dCwgJGJyZWFrcG9pbnRzKSAtIC4wMiwgbnVsbCk7XG59XG5cbi8vIFJldHVybnMgYSBibGFuayBzdHJpbmcgaWYgc21hbGxlc3QgYnJlYWtwb2ludCwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIG5hbWUgd2l0aCBhIGRhc2ggaW4gZnJvbnQuXG4vLyBVc2VmdWwgZm9yIG1ha2luZyByZXNwb25zaXZlIHV0aWxpdGllcy5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHhzLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCJcIiAgKFJldHVybnMgYSBibGFuayBzdHJpbmcpXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgXCItc21cIlxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaW5maXgoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgQHJldHVybiBpZihicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKSA9PSBudWxsLCBcIlwiLCBcIi0jeyRuYW1lfVwiKTtcbn1cblxuLy8gTWVkaWEgb2YgYXQgbGVhc3QgdGhlIG1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTm8gcXVlcnkgZm9yIHRoZSBzbWFsbGVzdCBicmVha3BvaW50LlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50IGFuZCB3aWRlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LXVwKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1pbiB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRtaW4pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gTWVkaWEgb2YgYXQgbW9zdCB0aGUgbWF4aW11bSBicmVha3BvaW50IHdpZHRoLiBObyBxdWVyeSBmb3IgdGhlIGxhcmdlc3QgYnJlYWtwb2ludC5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCBhbmQgbmFycm93ZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC1kb3duKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtYXg6IGJyZWFrcG9pbnQtbWF4KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAaWYgJG1heCB7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gTWVkaWEgdGhhdCBzcGFucyBtdWx0aXBsZSBicmVha3BvaW50IHdpZHRocy5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSBiZXR3ZWVuIHRoZSBtaW4gYW5kIG1heCBicmVha3BvaW50c1xuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtYmV0d2VlbigkbG93ZXIsICR1cHBlciwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbG93ZXIsICRicmVha3BvaW50cyk7XG4gICRtYXg6IGJyZWFrcG9pbnQtbWF4KCR1cHBlciwgJGJyZWFrcG9pbnRzKTtcblxuICBAaWYgJG1pbiAhPSBudWxsIGFuZCAkbWF4ICE9IG51bGwge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSBhbmQgKG1heC13aWR0aDogJG1heCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtYXggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkbG93ZXIsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtaW4gPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKCR1cHBlciwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuLy8gTWVkaWEgYmV0d2VlbiB0aGUgYnJlYWtwb2ludCdzIG1pbmltdW0gYW5kIG1heGltdW0gd2lkdGhzLlxuLy8gTm8gbWluaW11bSBmb3IgdGhlIHNtYWxsZXN0IGJyZWFrcG9pbnQsIGFuZCBubyBtYXhpbXVtIGZvciB0aGUgbGFyZ2VzdCBvbmUuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgb25seSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCwgbm90IHZpZXdwb3J0cyBhbnkgd2lkZXIgb3IgbmFycm93ZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC1vbmx5KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzKTtcblxuICBAaWYgJG1pbiAhPSBudWxsIGFuZCAkbWF4ICE9IG51bGwge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSBhbmQgKG1heC13aWR0aDogJG1heCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtYXggPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC11cCgkbmFtZSwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJG1pbiA9PSBudWxsIHtcbiAgICBAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LWRvd24oJG5hbWUsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG4iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart3m/chart3m.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart3m/chart3m.component.ts ***!
  \*************************************************************/
/*! exports provided: Chart3Componentm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart3Componentm", function() { return Chart3Componentm; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chart10/chart10.component */ "./src/app/pages/trader-v/chart10/chart10.component.ts");
/* harmony import */ var _pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../pipes/short-number.pipe */ "./src/app/pipes/short-number.pipe.ts");





var Chart3Componentm = /** @class */ (function () {
    function Chart3Componentm(pipe) {
        var _this = this;
        this.pipe = pipe;
        this.m3changed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.testData = {
            "BTC": { value: 3456.28, percent: 4.785 },
            "ETH": { value: 1456.28, percent: 1.285 },
            "XRP": { value: 856.28, percent: 0.453 },
            "LTC": { value: 1256.28, percent: 3.115 },
        };
        this.coins = [
            { name: "BTC", price: 8421, percent: 0, change: 200, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "ETH", price: 885, percent: 0, change: 80, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "XRP", price: 75, percent: 0, change: 5, arrow: "nb-arrow-dropup", color: "#00ff39" },
            { name: "LTC", price: 175, percent: 0, change: 14, arrow: "nb-arrow-dropup", color: "#00ff39" },
        ];
        this.selected = this.coins[0];
        this.data1 = [];
        this.data2 = [];
        this.data3 = [];
        this.percentNumber = 0;
        this.loading = true;
        this.clearData = function () {
            _this.data = [];
        };
        this.setClearForChart10 = function () {
            _this.Chart10Component.removeChartData();
        };
        this.setDataForChart = function (data) {
            _this.Chart10Component.setChartData(data.price);
            _this.coinPrice = data.price;
            _this.percent = data.percent;
            _this.percentNumber = parseFloat(_this.percent);
            _this.arrow = data.arrow;
            _this.color = data.color;
            _this.data1.push(data.mktCap);
            _this.data2.push(data.price);
            _this.data3.push(data.time);
            var min = Math.min.apply(null, _this.data2);
            var max = Math.max.apply(null, _this.data1);
            var minM = Math.min.apply(null, _this.data1) - Math.min.apply(null, _this.data1) * .0001;
            ;
            var maxM = Math.max.apply(null, _this.data1) + Math.max.apply(null, _this.data1) * .0002;
            var minP = Math.min.apply(null, _this.data2) - Math.min.apply(null, _this.data2) * .0001;
            var maxP = Math.max.apply(null, _this.data2) + Math.max.apply(null, _this.data2) * .0001;
            if (_this.data1.length > 10) {
                _this.data1.shift();
                _this.data2.shift();
                _this.data3.shift();
            }
            _this.setOption(_this.data1, _this.data2, _this.data3, minM, maxM, minP, maxP, true);
            //  this.dataOptions={
            //   series: [{
            //     data: this.data
            //   }]
            // };
            _this.loading = false;
        };
    }
    Chart3Componentm.prototype.ngOnInit = function () {
        this.setOption([], [], [], [], [], 0, 0, false);
        if (window.innerWidth < 768) {
            this.fontSize = 8;
            this.leftMargin = 50;
        }
        else if (768 <= window.innerWidth && window.innerWidth < 992) {
            this.fontSize = 10;
            this.leftMargin = 55;
        }
        else if (window.innerWidth >= 992 && window.innerWidth < 1200) {
            this.fontSize = 12;
            this.leftMargin = 60;
        }
        else if (window.innerWidth >= 1200) {
            this.fontSize = 14;
            this.leftMargin = 80;
        }
    };
    Chart3Componentm.prototype.randomData = function (x, data, isNew, val) {
        for (var i = 0; i < val; i++) {
            isNew ? '' : data.shift();
            data.push((Math.random() * x + 100 * (Math.round(Math.random()) * 2 - 1) + 7800).toFixed(2));
        }
        return data;
    };
    Chart3Componentm.prototype.randomDataMC = function (y, data, isNew, val) {
        for (var j = 0; j < val; j++) {
            isNew ? '' : data.shift();
            data.push((17755312 * y + Math.random() * 1775555312 * Math.round(Math.random()) * 2 - 1).toFixed(2));
        }
        return data;
    };
    Chart3Componentm.prototype.randomTime = function (z, data, isNew, val3) {
        for (var k = 0; k < val3; k++) {
            isNew ? '' : data.shift();
            data.push(this.timeStart + (this.timeMilli + (1)).toString());
        }
        return data;
    };
    Chart3Componentm.prototype.change = function (e) {
        this.m3changed.emit(e);
        // this.data.length = 0;
        this.data1.length = 0;
        this.data2.length = 0;
        this.data3.length = 0;
        this.loading = true;
        this.selected = this.coins.find(function (v) { return v.name === e; });
        //   this.data = this.testData[e];    
        //   this.data2 = this.randomData(1000, [], true, 12);
        // this.data1 = this.data2.map(v=> v * 17755312);
        // this.data3 = this.randomTime(1000, [], true, 10);
        //   this.setOption(this.data1, this.data2, this.data3, true)
    };
    Chart3Componentm.prototype.setOption = function (data1, data2, data3, minM, maxM, minP, maxP, animation) {
        var _this = this;
        this.chartOption = {
            animation: animation,
            grid: {
                top: 50,
                bottom: 50,
                left: this.leftMargin,
                right: this.leftMargin,
            },
            tooltip: {
                show: true,
                trigger: "axis",
                padding: 16,
                formatter: function (p) {
                    var time = p[0].axisValue;
                    var left = _this.pipe.transform(p[0].value);
                    var right = "$" + p[1].value.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    return "Time: " + time + " <br> " + "Market value: " + "$" + left + " <br> " + "Price: " + right;
                }
            },
            xAxis: [
                {
                    type: "category",
                    axisLine: {
                        show: false,
                    },
                    axisPointer: {
                        z: -1,
                        show: true,
                        lineStyle: {
                            color: "#5350ad",
                            type: "solid",
                            width: 2,
                        },
                        label: {
                            show: false
                        }
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#fff",
                        fontSize: this.fontSize,
                    },
                    data: data3,
                    position: "bottom"
                }
            ],
            yAxis: [
                {
                    type: "value",
                    splitNumber: 6,
                    min: minM,
                    max: maxM,
                    // min: 130000000000,
                    // max: 160000000000,
                    splitLine: {
                        lineStyle: {
                            type: "dashed"
                        }
                    },
                    axisLine: {
                        show: false
                    },
                    axisPointer: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#fff",
                        fontSize: this.fontSize,
                        formatter: function (v) { return (v / 1000000000).toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + "B"; }
                    },
                    position: "left"
                },
                {
                    type: "value",
                    splitNumber: 6,
                    min: minP,
                    max: maxP,
                    // min: 6722,
                    // max: 10000,
                    splitLine: {
                        show: false,
                        lineStyle: {
                            type: "dashed"
                        }
                    },
                    axisLine: {
                        show: false
                    },
                    axisPointer: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        color: "#fff",
                        fontSize: this.fontSize,
                        formatter: function (v) {
                            if (v < 1) {
                                return "$" + v.toLocaleString('en-GB', { minimumFractionDigits: 4, maximumFractionDigits: 4 });
                            }
                            else {
                                return "$" + v.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                            }
                        }
                    },
                    position: "right"
                }
            ],
            legend: {
                data: ['500'],
                textStyle: {
                    color: '#fff',
                },
            },
            series: [
                {
                    type: 'line',
                    id: "one",
                    smooth: true,
                    itemStyle: {
                        normal: {
                            opacity: 0,
                        },
                        emphasis: {
                            color: '#75fa5d',
                            borderColor: "#59ff8c",
                            borderWidth: 3,
                            opacity: 1,
                        },
                    },
                    symbolSize: 9,
                    lineStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 1, 0, [
                            {
                                offset: 0,
                                color: '#59ff8c'
                            },
                            {
                                offset: 1,
                                color: '#75fa5d'
                            }
                        ]),
                        width: 5,
                        curveness: 0.88,
                        shadowColor: "#8fff94",
                        shadowBlur: 10,
                        opacity: 1,
                    },
                    data: data1
                },
                {
                    type: 'line',
                    id: "two",
                    smooth: true,
                    itemStyle: {
                        normal: {
                            opacity: 0
                        },
                        emphasis: {
                            color: '#715ff6',
                            borderColor: "#a196f8",
                            borderWidth: 3,
                            opacity: 1,
                        },
                    },
                    symbolSize: 9,
                    yAxisIndex: 1,
                    lineStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 1, 0, [
                            {
                                offset: 0,
                                color: '#a196f8'
                            },
                            {
                                offset: 1,
                                color: '#715ff6'
                            }
                        ]),
                        width: 5,
                        curveness: 0.88,
                        shadowColor: "#6143e1",
                        shadowBlur: 10,
                    },
                    data: data2
                }
            ]
        };
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], Chart3Componentm.prototype, "m3changed", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart10_chart10_component__WEBPACK_IMPORTED_MODULE_3__["Chart10Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_3__["Chart10Component"])
    ], Chart3Componentm.prototype, "Chart10Component", void 0);
    Chart3Componentm = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart3m',
            template: __webpack_require__(/*! ./chart3m.component.html */ "./src/app/pages/trader-v/chart3m/chart3m.component.html"),
            styles: [__webpack_require__(/*! ./chart3m.component.scss */ "./src/app/pages/trader-v/chart3m/chart3m.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_4__["ShortNumberPipe"]])
    ], Chart3Componentm);
    return Chart3Componentm;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart4/chart4.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart4/chart4.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card class=\"f-h\">\r\n  <nb-card-header>\r\n    Market Cap\r\n  </nb-card-header>\r\n  <nb-card-body class=\"p-0\" style=\"overflow-x: hidden;\">\r\n      <div echarts [options]=\"chartOption\" class=\"f-h chart\"></div>\r\n  </nb-card-body>\r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart4/chart4.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart4/chart4.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".f-h {\n  height: calc(100% - 1.5rem) !important;\n  min-height: 480px; }\n\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDQvY2hhcnQ0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksdUNBQXFDO0VBQ3JDLGtCQUFpQixFQUNwQjs7QUFDRDtFQUNDLHdCQUF1QjtFQUN2QixhQUFZO0VBQ1osZUFBeUI7RUFDekIsV0FBVSxFQUNWIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvY2hhcnQ0L2NoYXJ0NC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mLWgge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxLjVyZW0pIWltcG9ydGFudDtcclxuICAgIG1pbi1oZWlnaHQ6IDQ4MHB4O1xyXG59XHJcbi5uYkJ1dHRvbkljb24ge1xyXG5cdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG5cdGJvcmRlcjogbm9uZTtcclxuXHRjb2xvcjogcmdiKDIwOSwgMjA5LCAyNTUpO1xyXG5cdHBhZGRpbmc6IDA7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart4/chart4.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart4/chart4.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart4Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart4Component", function() { return Chart4Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Chart4Component = /** @class */ (function () {
    function Chart4Component() {
        this.legend = {
            orient: 'horizontal',
            x: 'center',
            y: 'bottom',
            padding: 16,
            textStyle: {
                color: "#fff",
                fontSize: 16
            },
            data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
        };
        this.barStyle = {
            shadowColor: "#fff",
            shadowOffsetY: 1,
            shadowBlur: 12,
        };
        this.chartOption = {
            tooltip: {
                trigger: "none",
                show: false,
            },
            color: ["#007bff", "#d500f9", "#00e5ff", "#76ff03", "#ffea00", "#ff9100"],
            legend: {
                orient: 'horizontal',
                selectedMode: false,
                x: 'center',
                y: 'bottom',
                align: "left",
                itemHeight: 24,
                padding: 16,
                textStyle: {
                    color: "#fff",
                    fontSize: 16,
                },
                data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
            },
            grid: {
                show: true,
                bottom: -10,
                top: -10,
                left: -10,
                right: -10
            },
            series: [
                {
                    type: "pie",
                    radius: ['50%', '70%'],
                    center: ["50%", "40%"],
                    avoidLabelOverlap: false,
                    hoverOffset: 0,
                    hoverAnimation: false,
                    label: {
                        show: true,
                        position: "center",
                        color: "#fff",
                        fontSize: 16,
                        fontWeight: "lighter",
                        formatter: "Total Market Cap \n \n $1.321.132.546,21",
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: [
                        { value: 3350, name: 'Bitcoin', itemStyle: this.barStyle },
                        { value: 2100, name: 'Ethereum', itemStyle: this.barStyle },
                        { value: 2345, name: 'Bitcoin Cash', itemStyle: this.barStyle },
                        { value: 1350, name: 'Lite Coin', itemStyle: this.barStyle },
                        { value: 948, name: 'XRP', itemStyle: this.barStyle },
                        { value: 848, name: 'EOS', itemStyle: this.barStyle }
                    ]
                }
            ]
        };
    }
    Chart4Component.prototype.ngOnInit = function () {
        if (window.innerWidth > 1280) {
            this.chartOption.legend["orient"] = "vertical";
            this.chartOption.legend["x"] = "right";
            this.chartOption.legend["y"] = "center";
            this.chartOption.legend["itemWidth"] = 48;
            this.chartOption.legend["itemHeight"] = 24;
            this.chartOption.legend["left"] = "63%";
            this.chartOption.series[0]["center"] = ["33%", "50%"];
        }
    };
    Chart4Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart4',
            template: __webpack_require__(/*! ./chart4.component.html */ "./src/app/pages/trader-v/chart4/chart4.component.html"),
            styles: [__webpack_require__(/*! ./chart4.component.scss */ "./src/app/pages/trader-v/chart4/chart4.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart4Component);
    return Chart4Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart4new/chart4new.component.html":
/*!*******************************************************************!*\
  !*** ./src/app/pages/trader-v/chart4new/chart4new.component.html ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card class=\"f-h-c test-div\" [showToggleButton]=\"toogle\" [revealed]=\"revealed\" style=\"border-radius: .5rem\">\r\n  <nb-card-front class=\"crd\">\r\n    <nb-card class=\"mb-3 h-100\">\r\n\t  <nb-card-header class=\"p-2 headerBg\" style=\"z-index:999999\">\r\n\t    <div class=\"flex\" style=\"justify-content: space-between; align-items: center;\">\r\n\r\n\t      <div class=\"col-8\">\r\n\t\t\tMarket Performance\r\n\t\t\t<button nbTooltip=\"Displays important figures of the whole market. The bar chart displays the market cap of the top 6 coins (by market cap). Clicking on the individual sections of the pie chart or selecting a coin from the dropdown displays live information about the coin that was selected.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n\t      </div>\r\n\r\n\t      <nb-select [selected]=\"selected\" (selectedChange)=\"select($event)\" class=\"button-width p-0 text-right transparent\">\r\n\t\t\t<nb-option value=\"TOTAL\">TOTAL</nb-option>\r\n\t\t\t<nb-option *ngFor=\"let e of selectData\" value=\"{{e.value}}\"> {{ e.title }} </nb-option>\r\n\t        <!-- <nb-option value=\"Bitcoin\">BTC</nb-option>\r\n\t        <nb-option value=\"Ethereum\">ETH</nb-option>\r\n\t        <nb-option value=\"Ripple\">XRP</nb-option>\r\n\t        <nb-option value=\"Litecoin\">LTC</nb-option>\r\n\t\t\t<nb-option value=\"Bitcoin Cash\">BCH</nb-option>\r\n\t\t\t<nb-option value=\"Binance Coin\">BNB</nb-option> -->\r\n\t      </nb-select>\r\n\t    </div>\r\n\r\n\t  </nb-card-header>\r\n      <nb-card-body class=\"p-0\" style=\"overflow-x: hidden;\">\r\n        <div echarts [options]=\"chartOption1\" [merge]=\"dataOptions1\" class=\"f-h-c chart new-pie-chart\" (chartClick)=\"clicked($event)\"></div>\r\n      </nb-card-body>\r\n\t  \r\n\t  <div class=\"default-view-pie\">\r\n\r\n<div class=\"descriptor-pie\">\r\n\r\n\t        <div class=\"descriptoritem mb-1\">Cryptocurrencies</div>\r\n\t\t\t<div class=\"valuesUnder mb-2 mb-md-4\">{{totalCoins | number:'1.0':'en-GB'}} <span class=\"green mpGreen\"> 0.00%</span><i class=\"nb-arrow-dropup green mpGreen\"></i></div>\r\n\t\t\t\r\n\t\t\t<div class=\"descriptoritem mb-1\">Markets</div>\r\n\t\t\t<div class=\"valuesUnder mb-2 mb-md-4\">{{totalMarkets | number:'1.0':'en-GB'}} <span class=\"green mpGreen\"> 0.00%</span><i class=\"nb-arrow-dropup green mpGreen\"></i></div>\r\n\t\t\t\r\n\t\t\t<div class=\"descriptoritem mb-1\">Market Cap</div>\r\n\t\t\t<div class=\"valuesUnder mb-2 mb-md-4\"><span class=\"green\"\r\n\t\t\t\t>$</span>{{totalMarketCap.value | shortNumber}}<span \r\n\t\t\t\t[ngClass]=\"(totalMarketCap.percent<0)?'red mpGreen':'green mpGreen'\" \r\n\t\t\t\t> {{totalMarketCap.percent | number: '1.2-2'}}%</span><i class=\"nb-arrow-dropup\"\r\n\t\t\t\t[ngClass]=\"(totalMarketCap.percent<0)?'nb-arrow-dropdown red mpGreen':'nb-arrow-dropup green mpGreen'\" \r\n\t\t\t\t></i></div>\r\n\t\t\t\r\n\t\t\t<div class=\"descriptoritem mb-1\">24h Vol</div>\r\n\t\t\t<div class=\"valuesUnder mb-2 mb-md-4\" *ngIf=\"totalVolume\"><span class=\"green\"\r\n\t\t\t\t>$</span>{{totalVolume.value  | shortNumber}}<span \r\n\t\t\t\t[ngClass]=\"(totalVolume.percentNumber<0)?'red mpGreen':'green mpGreen'\" \r\n\t\t\t\t> {{totalVolume.percentNumber | number: '1.2-2'}}%</span><i class=\"arrow-padding\"\r\n\t\t\t\t[ngClass]=\"(totalVolume.percentNumber<0)?'nb-arrow-dropdown red mpGreen':'nb-arrow-dropup green mpGreen'\" \r\n\t\t\t\t></i></div>\r\n\t\t\t\r\n\t\t\t<div class=\"descriptoritem mb-1\">BTC Dominance</div>\r\n\t\t\t<div class=\"valuesUnder mb-2 mb-md-4\"><span class=\"green\"\r\n\t\t\t\t>$</span>{{MarketDominance.BTCDominance}}<span \r\n\t\t\t\t[ngClass]=\"(MarketDominance.percentNumber<0)?'red mpGreen':'green mpGreen'\" \r\n\t\t\t\t> {{MarketDominance.percent}}</span><i class=\"arrow-padding\"\r\n\t\t\t\t[ngClass]=\"(MarketDominance.percentNumber<0)?'nb-arrow-dropdown red mpGreen':'nb-arrow-dropup green mpGreen'\" \r\n\t\t\t\t></i></div>\t\t\t\t\t\t\t\t\r\n</div>\r\n\t  </div>\r\n    </nb-card>\r\n  </nb-card-front>\r\n  \r\n  \r\n  <nb-card-back class=\"crd card-half\">\r\n    <nb-card class=\"market-half-card\" style=\"border-radius: 0;box-shadow: none;\">\r\n      <nb-card-body class=\"card-body-bar\" style=\"overflow-x: visible; overflow: visible;\">\t  \r\n\t  {{selectedCoin}}\r\n\t  <div class=\"p-0 market-info-header\">\r\n\t  \t<span class=\"green exo-font\">$</span><span class=\"price-percent-space\">{{selectedPrice | number: '1.2-2'}}</span>\r\n\t  \t<span [ngClass]=\"(selectedPercent<0)?'red':'green'\">{{selectedPercent}}\r\n\t\t\t  <!-- <span [ngClass]=\"{'nb-arrow-dropdown': selectedPercent === '-2.43', 'nb-arrow-dropup': selectedPercent !== '-2.43' }\"></span> -->\r\n\t\t\t  <i [ngClass]=\"(selectedPercent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\"></i>\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t\t<div echarts #chart2 [options]=\"chartOption2\" [merge]=\"dataOptions2\" class=\"f-h-c chart\"></div>\r\n      </nb-card-body>\r\n    </nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart4new/chart4new.component.scss":
/*!*******************************************************************!*\
  !*** ./src/app/pages/trader-v/chart4new/chart4new.component.scss ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host .card-body-bar {\n  padding-left: 10px;\n  padding-right: 10px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n@media (min-width: 992px) {\n    .nb-theme-default :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n.nb-theme-default :host .nb-arrow-dropup, .nb-theme-default :host .nb-arrow-dropdown {\n  padding: 1px !important; }\n@media (min-width: 768px) {\n    .nb-theme-default :host .nb-arrow-dropup, .nb-theme-default :host .nb-arrow-dropdown {\n      padding: 2px !important; } }\n@media (min-width: 992px) {\n    .nb-theme-default :host .nb-arrow-dropup, .nb-theme-default :host .nb-arrow-dropdown {\n      padding: 4px !important; } }\n.nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.nb-theme-default :host ::ng-deep nb-card nb-reveal-card .second-card-container {\n  width: 50%; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host .card-body-bar {\n  padding-left: 10px;\n  padding-right: 10px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n@media (min-width: 992px) {\n    .nb-theme-cosmic :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n.nb-theme-cosmic :host .nb-arrow-dropup, .nb-theme-cosmic :host .nb-arrow-dropdown {\n  padding: 1px !important; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host .nb-arrow-dropup, .nb-theme-cosmic :host .nb-arrow-dropdown {\n      padding: 2px !important; } }\n@media (min-width: 992px) {\n    .nb-theme-cosmic :host .nb-arrow-dropup, .nb-theme-cosmic :host .nb-arrow-dropdown {\n      padding: 4px !important; } }\n.nb-theme-cosmic :host .default-view-pie {\n  background-color: #3d3780; }\n.nb-theme-cosmic :host .headerBg {\n  background-color: #3d3780; }\n.nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.nb-theme-cosmic :host ::ng-deep nb-card nb-reveal-card .second-card-container {\n  width: 50%; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host .card-body-bar {\n  padding-left: 10px;\n  padding-right: 10px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n@media (min-width: 992px) {\n    .nb-theme-corporate :host .card-body-bar {\n      padding-left: 1.25rem;\n      padding-right: 1.25rem; } }\n.nb-theme-corporate :host .nb-arrow-dropup, .nb-theme-corporate :host .nb-arrow-dropdown {\n  padding: 1px !important; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host .nb-arrow-dropup, .nb-theme-corporate :host .nb-arrow-dropdown {\n      padding: 2px !important; } }\n@media (min-width: 992px) {\n    .nb-theme-corporate :host .nb-arrow-dropup, .nb-theme-corporate :host .nb-arrow-dropdown {\n      padding: 4px !important; } }\n.nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.nb-theme-corporate :host ::ng-deep nb-card nb-reveal-card .second-card-container {\n  width: 50%; }\n.crd {\n  overflow: hidden; }\n.f-h {\n  height: calc(100% - 1rem) !important;\n  min-height: 550px; }\n.f-h .crd {\n    height: 100%; }\n.f-h-c {\n  min-height: 300px;\n  height: calc(100% - 1rem) !important; }\n@media (min-width: 768px) {\n    .f-h-c {\n      height: calc(100% - 1rem) !important;\n      min-height: 550px; }\n      .f-h-c .crd {\n        height: 100%; } }\n.card-half, .market-half-card {\n  background-color: #2a265d; }\n.second-card-container {\n  width: 50% !important; }\n.chart4selector > .revealed > .second-card-container {\n  background-color: #2a265d;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  height: 100%; }\n.market-info-header {\n  text-align: center;\n  padding-top: 1.125rem;\n  margin-top: 10px;\n  font-size: 10px; }\n@media (min-width: 768px) {\n    .market-info-header {\n      margin-top: 12px;\n      font-size: 1rem; } }\n.default-view-pie {\n  color: #fff; }\n@media (min-width: 768px) {\n  .arrow-padding {\n    padding: 0 1px; } }\n@media (min-width: 992px) {\n  .arrow-padding {\n    padding: 0 2px; } }\n@media (min-width: 1200px) {\n  .arrow-padding {\n    padding: 0 4px; } }\n.descriptoritem {\n  font-weight: 700;\n  font-size: 9px;\n  text-transform: uppercase; }\n@media (min-width: 768px) {\n    .descriptoritem {\n      font-size: 2.1vmin; } }\n@media (min-width: 992px) {\n    .descriptoritem {\n      font-size: 1.35vmin; } }\n@media (min-width: 1200px) {\n    .descriptoritem {\n      font-size: 1.4vmin; } }\n.valuesUnder {\n  font-size: 12px; }\n@media (min-width: 768px) {\n    .valuesUnder {\n      font-size: 2.85vmin; } }\n@media (min-width: 992px) {\n    .valuesUnder {\n      font-size: 1.85vmin; } }\n@media (min-width: 1200px) {\n    .valuesUnder {\n      font-size: 1.9vmin; } }\n.mpGreen {\n  font-size: 10px; }\n@media (min-width: 768px) {\n    .mpGreen {\n      font-size: 2.1vmin; } }\n@media (min-width: 992px) {\n    .mpGreen {\n      font-size: 1.35vmin; } }\n@media (min-width: 1200px) {\n    .mpGreen {\n      font-size: 1.4vmin; } }\n.descriptor-pie {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n          flex-direction: column;\n  padding: 0; }\n@media (min-width: 768px) {\n    .descriptor-pie {\n      padding: 8px 16px; } }\n.button-width {\n  width: 108px; }\n@media (min-width: 768px) {\n    .button-width {\n      width: 120px; } }\n.align-flex-end {\n  -webkit-box-align: end;\n          align-items: flex-end; }\n.price-percent-space {\n  padding-right: .5rem;\n  padding-top: 1rem; }\n@media (min-width: 768px) {\n    .price-percent-space {\n      padding-right: 1.125rem;\n      padding-top: 1.125rem; } }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart4new/chart4new.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/pages/trader-v/chart4new/chart4new.component.ts ***!
  \*****************************************************************/
/*! exports provided: Chart4Componentnew */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart4Componentnew", function() { return Chart4Componentnew; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart4Componentnew = /** @class */ (function () {
    function Chart4Componentnew() {
        var _this = this;
        this.c4Changed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.legend = {
            orient: 'horizontal',
            x: 'center',
            y: 'bottom',
            padding: 16,
            textStyle: {
                color: "#fff",
                fontSize: 12
            },
            data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
        };
        this.barStyle = {
            opacity: 1,
        };
        this.toogle = false;
        this.revealed = false;
        this.selectedPercentNumber = 0;
        this.data = [
            { value: 186284553, name: 'Bitcoin', shortCoin: 'BTC' },
            { value: 23796204, name: 'Ethereum', shortCoin: 'ETH' },
            { value: 13904981, name: 'Ripple', shortCoin: 'XRP' },
            { value: 6144005, name: 'Litecoin', shortCoin: 'LTC' },
            { value: 5648801, name: 'Bitcoin Cash', shortCoin: 'BCH' },
            { value: 4655438, name: 'Binance Coin', shortCoin: 'BNB' },
        ];
        this.selectData = [];
        this.setInitials = function (data) {
            if (_this.selectData.length == 0)
                data.map(function (x) {
                    _this.selectData.push({ title: x.type, value: x.type });
                    console.log(x);
                });
        };
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 4535.45, percent: 0, change: 500, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1" },
            { title: "TOTAL MARKET CAP", value: 248.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
            { title: "TOTAL VOLUME", value: 94.54, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1" },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
        ];
        this.selected = "TOTAL";
        this.dbData = [];
        this.totalMarketCap = {};
        this.MarketDominance = {};
        this.arrayData = [];
        this.setData = function (data, totalCoins, totalMarkets, totalMarketCap, totalVolume, MarketDominance) {
            _this.totalCoins = totalCoins;
            _this.totalMarkets = totalMarkets;
            _this.totalMarketCap = totalMarketCap;
            _this.totalVolume = totalVolume;
            _this.MarketDominance = MarketDominance;
            if (_this.selectedCoin && _this.selectedCoin !== "Total") {
                var supp = data.filter(function (x) { return x.name === _this.selectedCoin; })[0];
                console.log(supp);
                if (supp) {
                    _this.selectedPrice = supp.price;
                    _this.selectedPercent = supp.percent;
                    console.log("perc1: " + _this.selectedPercent);
                    _this.selectedArrow = supp.arrow;
                    _this.selectedColor = supp.color;
                    _this.dataOptions2 = {
                        dataset: {
                            source: [
                                [supp.value, 'Market Cap'],
                                [supp.volume, '24 Hour Volume'],
                                [supp.supply, 'Circulating Supply'],
                                [parseFloat(supp.TotalCoinSupply), 'Max Supply'],
                            ]
                        },
                        xAxis: {
                            max: Math.max.apply(null, [supp.value / parseFloat(_this.selectedPrice), supp.volume, supp.supply, supp.TotalCoinSupply]),
                        }
                    };
                }
            }
            // this.selectedPrice=data.filter(x=>x.shortCoin===this.selectedCoin)
            // console.log(this.selectedCoin);
            _this.dataOptions1 = {
                series: [{
                        data: data
                    }]
            };
            _this.data = data;
        };
    }
    Chart4Componentnew.prototype.totals = function (data) {
        this.totalMarkets = data.totalExchanges;
        this.totalCoins = data.totalCoins;
    };
    Chart4Componentnew.prototype.setMainChart = function (data) {
        this.data = data;
    };
    Chart4Componentnew.prototype.ngOnInit = function () {
        if (window.innerWidth < 768) {
            this.fontSize = 8;
            this.leftMargin = 55;
            this.arrayData = ['Max Supply', 'Circ. Supply', '24 Hour Volume', 'Market Cap'];
        }
        else if (768 <= window.innerWidth && window.innerWidth < 992) {
            this.fontSize = 10;
            this.leftMargin = 80;
            this.arrayData = ['Max Supply', 'Circulating Supply', '24 Hour Volume', 'Market Cap'];
        }
        else if (window.innerWidth >= 992 && window.innerWidth < 1200) {
            this.fontSize = 12;
            this.leftMargin = 110;
            this.arrayData = ['Max Supply', 'Circulating Supply', '24 Hour Volume', 'Market Cap'];
        }
        else if (window.innerWidth >= 1200) {
            this.fontSize = 12;
            this.leftMargin = 110;
            this.arrayData = ['Max Supply', 'Circulating Supply', '24 Hour Volume', 'Market Cap'];
        }
        console.log("perc2: " + this.selectedPercent);
        this.setChartOption1(this.data);
        this.setChartOption2();
        if (window.innerWidth > 1280) {
            this.chartOption1.legend["orient"] = "vertical";
            this.chartOption1.legend["x"] = "right";
            //this.chartOption1.legend["y"] = "center";
            //this.chartOption1.legend["itemWidth"] = 48;
            this.chartOption1.legend["itemHeight"] = 24;
            this.chartOption1.legend["left"] = "63%";
            this.chartOption1.series[0]["center"] = ["50%", "50%"];
            this.chartOption2.grid["left"] = 0;
        }
        //  this.interval = interval(1000).subscribe(_ => {
        //   // this.updateData();
        //  })
    };
    Chart4Componentnew.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        // this.interval.unsubscribe();
        // this.interval = interval(1000).subscribe(_ => {
        //   this.updateData();
        // })
    };
    Chart4Componentnew.prototype.changeData = function () {
        this.data.map(function (v) {
            v.value = Math.random() * 1000000;
        });
    };
    Chart4Componentnew.prototype.setChartOption1 = function (data) {
        this.chartOption1 = {
            tooltip: {
                trigger: "none",
                show: false,
            },
            color: ["#dd4b64", "#9d5ae5", "#5fabf7", "#b5e659", "#ffea00", "#f09537"],
            legend: {
                orient: 'horizontal',
                show: false,
                selectedMode: false,
                x: 'center',
                y: 'bottom',
                align: "left",
                itemHeight: 12,
                padding: 16,
                textStyle: {
                    color: "#fff",
                    fontSize: 24,
                },
                data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
            },
            grid: {
                show: true,
                bottom: -10,
                top: -10,
                left: -10,
                right: -10,
            },
            series: [
                {
                    type: "pie",
                    hoverOffset: 8,
                    hoverAnimation: true,
                    legendHoverLink: true,
                    radius: ['0%', '88%'],
                    center: ["50%", "50%"],
                    itemStyle: {},
                    avoidLabelOverlap: false,
                    label: {
                        show: false,
                        position: "center",
                        color: "#fff",
                        fontSize: 10,
                        fontWeight: "lighter",
                        formatter: "Total Market Cap \n \n $1.321.132.546,21",
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: data
                }
            ]
        };
    };
    Chart4Componentnew.prototype.setChartOption2 = function () {
        var _this = this;
        if (this.selectedCoin) {
            var price = this.data.find(function (val) { return val.name === _this.selectedCoin; }).value;
            var total_1 = 0;
            this.data.forEach(function (v) {
                total_1 += v.value;
            });
            this.selectedPrice = price;
            //this.selectedPercent = parseFloat((price / total).toFixed(2));
            //this.selectedPercent = price/total;
            console.log("perc3: " + this.selectedPercent);
        }
        this.chartOption2 = {
            grid: {
                top: 20,
                left: this.leftMargin,
                right: 0,
                bottom: 100,
            },
            dataset: {
                source: [
                    [Math.random() * 10000000, 'Market Cap'],
                    [Math.random() * 10000000, '24 Hour Volume'],
                    [Math.random() * 10000000, 'Circulating Supply'],
                    [21000000, 'Max Supply'],
                ]
            },
            xAxis: {
                max: 21000000,
                axisLabel: {
                    color: "#d1d1ff",
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: "transparent",
                    },
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    lineStyle: {
                        color: "transparent",
                    },
                },
            },
            yAxis: {
                data: this.arrayData,
                axisLabel: {
                    show: true,
                    color: "#fff",
                    fontSize: this.fontSize,
                },
                axisLine: {
                    lineStyle: {
                        color: "transparent",
                    },
                },
                axisTick: {
                    show: false,
                },
            },
            series: [
                {
                    type: 'bar',
                    hoverAnimation: false,
                    hoverOffset: 0,
                    barWidth: '30%',
                    barMinHeight: '100%',
                    center: ["150%, 50%"],
                    data: [100000000000, 100000000000, 100000000000, 100000000000,],
                    cursor: 'default',
                    itemStyle: {
                        fontSize: this.fontSize - 2,
                        normal: {
                            color: "#3e3781",
                        },
                        opacity: 1,
                    },
                    animation: false,
                    barGap: '-100%',
                    z: 1,
                },
                {
                    type: 'bar',
                    barWidth: '30%',
                    barMinHeight: '100%',
                    hoverAnimation: false,
                    hoverOffset: 0,
                    center: ["150%", "50%"],
                    label: {
                        show: true,
                        position: ["0%", "120%"],
                        color: "#fff",
                        fontSize: this.fontSize - 2,
                        fontFamily: "Exo",
                        width: '220',
                        formatter: function (data) {
                            var abc = data.value[0].toLocaleString();
                            return abc + " " + _this.shortCoin;
                        }
                    },
                    itemStyle: {
                        normal: {
                            width: "30%",
                            color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(1, 0, 0, 0, [{
                                    offset: 0,
                                    color: "#fec107",
                                }, {
                                    offset: 1,
                                    color: "#ffea3a",
                                }]),
                        },
                    },
                    encode: {
                        // Map the "amount" column to X axis.
                        x: 'amount',
                        // Map the "product" column to Y axis
                        y: 'product'
                    },
                    z: 2
                }
            ]
        };
    };
    Chart4Componentnew.prototype.clicked = function (e) {
        var _this = this;
        this.selectedCoin = e.data.name;
        this.selected = e.data.name;
        this.shortCoin = e.data.shortCoin;
        this.revealed = true;
        this.setChartOption2();
        if (this.selectedCoin && this.selectedCoin !== "Total") {
            var supp = this.data.filter(function (x) { return x.name === _this.selectedCoin; })[0];
            if (supp) {
                this.selectedPrice = supp.price;
                this.selectedPercent = supp.percent;
                this.selectedArrow = supp.arrow;
                this.selectedColor = supp.color;
                console.log("perc4: " + this.selectedPercent);
                this.dataOptions2 = {
                    dataset: {
                        source: [
                            [supp.value, 'Market Cap'],
                            [supp.volume, '24 Hour Volume'],
                            [supp.supply, 'Circulating Supply'],
                            [parseFloat(supp.TotalCoinSupply), 'Max Supply'],
                        ]
                    }
                };
            }
        }
    };
    Chart4Componentnew.prototype.select = function (e) {
        var _this = this;
        this.selected = e;
        this.selectedCoin = e;
        this.c4Changed.emit(e);
        if (e === "TOTAL") {
            this.revealed = false;
        }
        else {
            this.selectedCoin = e;
            this.revealed = true;
            this.shortCoin = e;
            this.setChartOption2();
        }
        // else if (e === "Bitcoin") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "BTC";
        //   this.setChartOption2();
        // } else if (e === "Ethereum") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "ETH";
        //   this.setChartOption2();
        // } else if (e === "Ripple") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "XRP";
        //   this.setChartOption2();
        // } else if (e === "Litecoin") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "LTC";
        //   this.setChartOption2();
        // } else if (e === "Bitcoin Cash") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "BCH";
        //   this.setChartOption2();
        // } else if (e === "Binance Coin") {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = "BNB";
        //   this.setChartOption2();
        // }
        if (this.selectedCoin && this.selectedCoin !== "Total") {
            var supp = this.data.filter(function (x) { return x.name === _this.selectedCoin; })[0];
            console.log(supp.TotalCoinSupply);
            if (supp) {
                this.selectedPrice = supp.price;
                this.selectedPercent = supp.percent;
                this.selectedArrow = supp.arrow;
                this.selectedColor = supp.color;
                console.log("perc5: " + this.selectedPercent);
                this.dataOptions2 = {
                    dataset: {
                        source: [
                            [supp.value, 'Market Cap'],
                            [supp.volume, '24 Hour Volume'],
                            [supp.supply, 'Circulating Supply'],
                            [parseFloat(supp.TotalCoinSupply), 'Max Supply'],
                        ]
                    }
                };
            }
        }
        //  else {
        //   this.selectedCoin = e;
        //   this.revealed = true;
        //   this.shortCoin = e;
        //   this.setChartOption2();
        // }
    };
    Chart4Componentnew.prototype.getData = function (idx, val) {
        return this.secondRowData[idx][val];
    };
    Chart4Componentnew.prototype.updateData = function () {
        var _this = this;
        this.secondRowData.map(function (val) {
            var random = (Math.random() * val.change);
            var newVal = val.value + (_this.trueOrFalse() ? random : -random);
            if (val.value > newVal) {
                val.arrow = "nb-arrow-dropdown";
                val.color = "red";
                val.percent = (val.value - newVal) / val.value * 100;
            }
            else {
                val.percent = (newVal - val.value) / val.value * 100;
                val.arrow = "nb-arrow-dropup";
                val.color = "#00ff39";
            }
            val.value = newVal;
            return val;
        });
    };
    Chart4Componentnew.prototype.trueOrFalse = function () {
        return Math.round(Math.random());
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], Chart4Componentnew.prototype, "c4Changed", void 0);
    Chart4Componentnew = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart4new',
            template: __webpack_require__(/*! ./chart4new.component.html */ "./src/app/pages/trader-v/chart4new/chart4new.component.html"),
            styles: [__webpack_require__(/*! ./chart4new.component.scss */ "./src/app/pages/trader-v/chart4new/chart4new.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart4Componentnew);
    return Chart4Componentnew;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart5/chart5.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart5/chart5.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card class=\"f-h\">\r\n  <nb-card-header>\r\n\tBTC Geo Heatmap\r\n\t<button nbTooltip=\"Displays a visualization of Bitcoin's performance agsint the fiat currencies of different countries. Click on a country to view the information.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n  </nb-card-header>\r\n  <nb-card-body class=\"p-0\" style=\"overflow-x: hidden;\">\r\n    <!-- WIDGET -->\r\n\t    <!-- <div echarts [options]=\"chartOption\" class=\"f-h chart\"></div>\r\n\t    <div class=\"d-flex flex-column zoom\">\r\n\t      <button nbButton size=\"small\" (click)=\"zoomIn()\">\r\n\t        +\r\n\t      </button>\r\n\t      <button nbButton size=\"small\" (click)=\"zoomOut()\">\r\n\t        -\r\n\t      </button>\r\n\t    </div> -->\r\n    <!-- WIDGET -->\r\n\t\r\n\t    <!-- <div echarts [options]=\"chartOption\" class=\"f-h chart\"></div> -->\r\n\t    <!-- <div class=\"d-flex flex-column zoom\">\r\n\t      <button nbButton size=\"small\" (click)=\"zoomIn()\">\r\n\t        +\r\n\t      </button>\r\n\t      <button nbButton size=\"small\" (click)=\"zoomOut()\">\r\n\t        -\r\n\t      </button>\r\n\t    </div> -->\r\n\t\t<iframe src=\"/assets/assets/html/widget2.html\" frameborder=\"0\" style=\"margin-bottom: -72px; width: 100%; height: 100%;\"></iframe>\r\n\t\t\r\n  </nb-card-body>\r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart5/chart5.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart5/chart5.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host .zoom button {\n  background-color: #2f2879; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.f-h {\n  height: calc(100% - 1rem) !important;\n  min-height: 360px; }\n@media (min-width: 768px) {\n    .f-h {\n      min-height: 560px; } }\n.zoom {\n  position: absolute;\n  top: calc(95% - 95px);\n  right: 3%;\n  z-index: 1000; }\n.zoom button {\n    border: none !important;\n    font-size: 1.5rem;\n    padding: 8px 16px !important; }\n.zoom button:active {\n  opacity: 0.8; }\n.zoom button:first-child {\n  border-radius: 8px 8px 0 0;\n  margin-bottom: 4px; }\n.zoom button:last-child {\n  border-radius: 0 0 8px 8px; }\n.map-height {\n  height: calc(100% - 0px); }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart5/chart5.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart5/chart5.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart5Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart5Component", function() { return Chart5Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");




var Chart5Component = /** @class */ (function () {
    function Chart5Component(http) {
        this.http = http;
        this.zoom = 1.5;
    }
    Chart5Component.prototype.ngOnInit = function () {
        var _this = this;
        this.http.get("/assets/world.json").subscribe(function (res) {
            Object(echarts__WEBPACK_IMPORTED_MODULE_2__["registerMap"])("world", res);
            _this.setOption(_this.zoom);
        });
    };
    Chart5Component.prototype.setOption = function (zoom) {
        this.chartOption = {
            series: [
                {
                    type: 'map',
                    map: "world",
                    roam: true,
                    zoom: zoom,
                    selectedMode: "single",
                    scaleLimit: {
                        min: 1,
                        max: 9
                    },
                    itemStyle: {
                        areaColor: "#7659ff",
                        borderColor: "#3c2c8a",
                        emphasis: {
                            areaColor: "rgba(100, 255, 218, 0.33)",
                            borderColor: "#64ffda",
                            borderWidth: 1
                        }
                    },
                    label: {
                        normal: {
                            show: false,
                            formatter: ""
                        },
                        emphasis: {
                            label: {
                                show: true
                            }
                        }
                    }
                }
            ]
        };
    };
    Chart5Component.prototype.zoomIn = function () {
        if (this.zoom < 8) {
            this.zoom += 1;
            this.setOption(this.zoom);
        }
    };
    Chart5Component.prototype.zoomOut = function () {
        if (this.zoom > 2) {
            this.zoom -= 1;
            this.setOption(this.zoom);
        }
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])("map"),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], Chart5Component.prototype, "map", void 0);
    Chart5Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart5',
            template: __webpack_require__(/*! ./chart5.component.html */ "./src/app/pages/trader-v/chart5/chart5.component.html"),
            styles: [__webpack_require__(/*! ./chart5.component.scss */ "./src/app/pages/trader-v/chart5/chart5.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]])
    ], Chart5Component);
    return Chart5Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart6/chart6.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart6/chart6.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card class=\"f-h\">\r\n  <nb-card-header class=\"p-2\">\r\n    <div class=\"flex\" style=\"justify-content: space-between;align-items: center;\">\r\n\r\n      <div class=\"pl-3\">\r\n        Digital dash\r\n        <button nbTooltip=\"The gauge displays the current price of the selected coin and its position relative to its 24 hour high and low price.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n      </div>\r\n\r\n      <nb-select selected=\"BTC\" (selectedChange)=\"change($event)\" class=\"button-width p-0 text-right transparent\">\r\n          <nb-option value=\"BTC\">BTC</nb-option>\r\n          <nb-option value=\"XRP\">XRP</nb-option>\r\n          <nb-option value=\"ETH\">ETH</nb-option>\r\n          <nb-option value=\"LTC\">LTC</nb-option>\r\n      </nb-select>\r\n    </div>\r\n\r\n  </nb-card-header>\r\n  <nb-card-body class=\"p-0 chart-card\" [nbSpinner]=\"loading\">\r\n    <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"f-h chart\"></div>\r\n  </nb-card-body>\r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart6/chart6.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart6/chart6.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host .trader-text {\n  color: #c198fb; }\n.nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container [nbButton].btn-primary {\n  font-size: 16px !important; }\n.nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.f-h {\n  height: calc(100% - 1.5rem) !important; }\n.chart {\n  min-height: 400px; }\n.button-width {\n  width: 100px; }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart6/chart6.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart6/chart6.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart6Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart6Component", function() { return Chart6Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart6Component = /** @class */ (function () {
    function Chart6Component() {
        var _this = this;
        this.c6Changed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.loading = true;
        this.data1 = [];
        this.setData = function (data, min, max) {
            // this.dataOptions={
            //   series: [{
            //     min:min,
            //     max:max,
            //     data: data
            //   }]
            // };
            _this.setOption(data, min, max);
            // console.log(data);
            _this.loading = false;
        };
        this.color1 = new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 0, 0, [
            {
                offset: 0,
                color: '#ff1d2d'
            },
            {
                offset: 1,
                color: '#ff7a49'
            }
        ]);
        this.color2 = new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 1, 0, 0, [
            {
                offset: 0,
                color: '#ff7a49'
            },
            {
                offset: .7,
                color: '#fed244'
            }
        ]);
        this.color3 = new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 1, 0, [
            {
                offset: 0,
                color: '#fed244'
            },
            {
                offset: 1,
                color: '#f9eb39'
            }
        ]);
        this.color4 = new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
            {
                offset: 0.3,
                color: '#f9eb39'
            },
            {
                offset: 1,
                color: '#d4fa36'
            }
        ]);
        this.color5 = new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
            {
                offset: 0,
                color: '#d4fa36'
            },
            {
                offset: 1,
                color: '#49ff00'
            }
        ]);
        this.testData = {
            "BTC": [{ name: "Bitcoin", value: this.data1 }],
            "ETH": [{ name: "Ethereum", value: 1679.44 }],
            "GAME": [{ name: "Game", value: 601.27 }],
            "LBC": [{ name: "Lbc", value: 1208.71 }]
        };
    }
    Chart6Component.prototype.ngOnInit = function () {
        this.loading = true;
        // console.log(this.testData["BTC"]);
        // console.log('initialized btc data');
        // this.data = this.testData["BTC"];
        this.setOption([], 0, 0);
        // setInterval(() => {      
        //   this.data1 = this.randomData(1000, this.data1, false, 1);
        //   this.setOption(this.data1);
        // }, 1500);
    };
    Chart6Component.prototype.CommaFormatted = function (amount) {
        var delimiter = ","; // replace comma if desired
        var a = amount.split('.', 2);
        var d = a[1];
        var i = parseInt(a[0]);
        if (isNaN(i)) {
            return '';
        }
        var minus = '';
        if (i < 0) {
            minus = '-';
        }
        i = Math.abs(i);
        var n = new String(i);
        var a;
        while (n.length > 3) {
            var nn = n.substr(n.length - 3);
            a.unshift(nn);
            n = n.substr(0, n.length - 3);
        }
        if (n.length > 0) {
            a.unshift(n);
        }
        n = a.join(delimiter);
        if (d.length < 1) {
            amount = n;
        }
        else {
            amount = n + '.' + d;
        }
        amount = minus + amount;
        return amount;
    };
    Chart6Component.prototype.randomData = function (x, data, isNew, val) {
        for (var i = 0; i < val; i++) {
            isNew ? '' : data.shift();
            data.push((Math.random() * x + 1 * (Math.round(Math.random()) * 1 - 1) + 9312).toFixed(2));
        }
        return data;
    };
    Chart6Component.prototype.change = function (e) {
        //this.setOption(this.testData[e]);
        this.loading = true;
        this.c6Changed.emit(e);
    };
    Chart6Component.prototype.setOption = function (data, min, max) {
        this.chartOption = {
            series: [
                {
                    type: "gauge",
                    title: {
                        color: "#fff",
                        fontFamily: "Exo",
                        fontSize: 16,
                    },
                    animation: true,
                    min: min,
                    max: max,
                    data: data,
                    axisLine: {
                        lineStyle: {
                            color: [[0.2, this.color1], [0.4, this.color2], [0.6, this.color3], [0.8, this.color4], [1, this.color5]],
                            width: 38,
                        }
                    },
                    axisLabel: {
                        show: true,
                        fontSize: 12,
                        fontFamily: "Exo",
                        color: "#fff",
                        formatter: function (p) {
                            if (p === 0) {
                                return "   Low";
                            }
                            if (p === 15000) {
                                return "High   ";
                            }
                            return "";
                        }
                    },
                    axisTick: {
                        show: true,
                        splitNumber: 3,
                        length: 15,
                        lineStyle: {
                            color: "#fff",
                            width: 1
                        }
                    },
                    splitLine: {
                        show: false
                    },
                    pointer: {
                        shadowColor: '#fff',
                        shadowBlur: 5,
                        width: 9,
                        length: "65%",
                    },
                    detail: {
                        fontSize: 24,
                        fontFamily: "Exo",
                        color: "#fff",
                        offsetCenter: ["0%", "100%"],
                        formatter: function (data) {
                            // var abc = data.value[0].toLocaleString();
                            //return "$" + data.toLocaleString('en-GB');
                            if (data < 1) {
                                return "$" + parseFloat(data).toFixed(4);
                            }
                            else {
                                return "$" + parseFloat(data).toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                            }
                        }
                    }
                }
            ]
        };
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], Chart6Component.prototype, "c6Changed", void 0);
    Chart6Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart6',
            template: __webpack_require__(/*! ./chart6.component.html */ "./src/app/pages/trader-v/chart6/chart6.component.html"),
            styles: [__webpack_require__(/*! ./chart6.component.scss */ "./src/app/pages/trader-v/chart6/chart6.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart6Component);
    return Chart6Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart7/chart7.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart7/chart7.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div echarts [options]=\"chartOption\" class=\"chart\"></div>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart7/chart7.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart7/chart7.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 100%;\n  max-height: 60px; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9jaGFydDcvY2hhcnQ3LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBWTtFQUNaLGlCQUFnQixFQUNuQiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2NoYXJ0Ny9jaGFydDcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhcnQge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgbWF4LWhlaWdodDogNjBweDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart7/chart7.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart7/chart7.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart7Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart7Component", function() { return Chart7Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Chart7Component = /** @class */ (function () {
    function Chart7Component() {
        this.colors = {
            green: "#00ff39",
            red: "#ff0579"
        };
    }
    Chart7Component.prototype.ngOnInit = function () {
        this.chartOption = {
            grid: {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0
            },
            xAxis: {
                type: 'category',
                show: false,
                data: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", '15', "16", "17", "18", "19", "20", "21", "22", "23", "24"]
            },
            yAxis: {
                type: 'value',
                show: false,
            },
            series: [{
                    data: this.randomValues(),
                    type: 'line',
                    smooth: true,
                    animation: true,
                    itemStyle: {
                        normal: {
                            opacity: 0,
                        },
                    },
                    lineStyle: {
                        color: this.colors[this.color],
                        width: 3,
                        curveness: 0.88
                    },
                }]
        };
    };
    Chart7Component.prototype.randomValues = function () {
        var data = [];
        for (var i = 0; i < 24; i++) {
            data.push(Math.random());
        }
        return data;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], Chart7Component.prototype, "color", void 0);
    Chart7Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart7',
            template: __webpack_require__(/*! ./chart7.component.html */ "./src/app/pages/trader-v/chart7/chart7.component.html"),
            styles: [__webpack_require__(/*! ./chart7.component.scss */ "./src/app/pages/trader-v/chart7/chart7.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart7Component);
    return Chart7Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart8/chart8.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart8/chart8.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "  <nb-card-body>\r\n    <div echarts [options]=\"options\" class=\"chart barchart8\"></div>\r\n  </nb-card-body>"

/***/ }),

/***/ "./src/app/pages/trader-v/chart8/chart8.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart8/chart8.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2NoYXJ0OC9jaGFydDguY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart8/chart8.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart8/chart8.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart8Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart8Component", function() { return Chart8Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var Chart8Component = /** @class */ (function () {
    function Chart8Component() {
        var _this = this;
        this.labels = [];
        this.data = [];
        this.setData = function (data) {
            data.map(function (x) {
                _this.labels.push(x.dateChange);
                _this.data.push(x.Profit == null ? 0 : -1 * (x.Profit));
            });
            _this.setOption(_this.labels, _this.data);
            console.log(_this.labels);
        };
        this.testData = {
            Week: {
                labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
                data: [23, 38, 44, 28, 14, 36, 18]
            },
            Month: {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                data: [91, 83, 66, 54, 72, 47, 101, 39, 58, 65, 88, 74]
            },
            Year: {
                labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"],
                data: [802, 885, 598, 666, 673, 622, 751, 499, 774, 536]
            }
        };
    }
    Chart8Component.prototype.ngOnInit = function () {
    };
    Chart8Component.prototype.setOption = function (labels, data) {
        this.options = {
            grid: {
                left: 5,
                top: 0,
                right: 5,
                bottom: 0,
                containLabel: true,
            },
            xAxis: {
                type: 'category',
                data: labels,
                axisLabel: {
                    color: "#d1d1ff",
                    fontSize: 12,
                    formatter: function (labels) {
                        return labels.substring(0, 3);
                    },
                },
                axisLine: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
            },
            yAxis: {
                show: false,
                axisLine: {
                    show: false,
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false,
                },
                boundaryGap: [0, '5%'],
            },
            tooltip: {
                axisPointer: {
                    type: 'shadow',
                },
                textStyle: {
                    color: "#fff",
                    fontSize: 12
                },
                position: 'top',
                formatter: function (p) {
                    return "$" + p.value.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                },
                padding: 12
                // extraCssText: trafficTheme.tooltipExtraCss,
            },
            series: [
                {
                    type: 'bar',
                    data: data,
                    barMaxWidth: 14,
                    itemStyle: {
                        shadowBlur: 0.5,
                        shadowColor: "#fff",
                        width: 10,
                        normal: {
                            color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [{
                                    offset: 0,
                                    color: "#ffeb3b",
                                }, {
                                    offset: 1,
                                    color: "#ffc107",
                                }]),
                            opacity: 1,
                            shadowColor: "#fff",
                            shadowBlur: 6,
                        },
                    },
                },
            ],
        };
    };
    Chart8Component.prototype.change = function (e) {
        var data = this.testData[e];
        this.setOption(data.labels, data.data);
    };
    Chart8Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart8',
            template: __webpack_require__(/*! ./chart8.component.html */ "./src/app/pages/trader-v/chart8/chart8.component.html"),
            styles: [__webpack_require__(/*! ./chart8.component.scss */ "./src/app/pages/trader-v/chart8/chart8.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart8Component);
    return Chart8Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/chart9/chart9.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart9/chart9.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n      <div [nbSpinner]=\"loading\" style=\"height: 100%;\">\r\n        <canvas id=\"canvas\" height=\"100%\" >{{ chart }}</canvas>\r\n      </div>\r\n      \r\n    <!-- <chart type=\"line\" [data]=\"data\" [options]=\"options\"></chart> -->\r\n\r\n"

/***/ }),

/***/ "./src/app/pages/trader-v/chart9/chart9.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/chart9/chart9.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2NoYXJ0OS9jaGFydDkuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/pages/trader-v/chart9/chart9.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/chart9/chart9.component.ts ***!
  \***********************************************************/
/*! exports provided: Chart9Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart9Component", function() { return Chart9Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_2__);



var Chart9Component = /** @class */ (function () {
    function Chart9Component() {
        var _this = this;
        this.colors = ['#ff3333', '#26b3fa', '#5eff32', '#fffc33', '#9f79f2', '#740c82', '#f55105'];
        this.loading = true;
        this.getUniqueDays = function (data) {
            var flags = [], output = [], l = data.length, i;
            for (i = 0; i < l; i++) {
                if (flags[data[i].dateChange])
                    continue;
                flags[data[i].dateChange] = true;
                output.push(data[i].dateChange);
            }
            return output;
        };
        this.getUniqueCoin = function (data) {
            var flags = [], output = [], l = data.length, i;
            for (i = 0; i < l; i++) {
                if (flags[data[i].coinName])
                    continue;
                if (data[i].coinName) {
                    flags[data[i].coinName] = true;
                    output.push(data[i].coinName);
                }
            }
            return output;
        };
        this.setData = function (data) {
            var uniqueDays = _this.getUniqueDays(data);
            var uniqueCoins = _this.getUniqueCoin(data);
            var dataset = [];
            //data.map(x=>{return{...x, changePercent:(x.changePercent==null?0:x.changePercent)}})
            var counter = 0;
            uniqueCoins.map(function (r) {
                var cData = [];
                uniqueDays.map(function (p) {
                    var coin = data.filter(function (x) { return x.coinName == r && x.dateChange == p; })[0];
                    if (coin)
                        cData.push(coin.changePercent);
                    else
                        cData.push(0);
                });
                dataset.push({
                    label: r,
                    data: cData,
                    backgroundColor: _this.colors[counter],
                    borderColor: _this.colors[counter],
                    fill: false,
                    pointRadius: 5,
                    pointHoverRadius: 5,
                    selectedMode: false,
                });
                counter = counter + 1;
            });
            console.log(dataset);
            _this.setOptions(uniqueDays, dataset);
            // console.log(uniqueCoins);
            _this.loading = false;
            //this.data=data;
        };
        this.setOptions = function (labels, dataset) {
            _this.chart = new chart_js__WEBPACK_IMPORTED_MODULE_2___default.a('canvas', {
                type: 'line',
                grid: {
                    top: -50,
                    left: -50,
                    right: -50,
                    bottom: -50,
                },
                data: {
                    labels: labels,
                    datasets: dataset,
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    tooltips: {
                        position: "custom",
                        mode: 'index',
                        axis: 'y',
                        backgroundColor: 'rgba(117, 71, 208, .3)',
                        borderColor: '#b18af7',
                        borderWidth: 2,
                    },
                    legend: {
                        onClick: null,
                        position: 'top',
                        height: 25,
                        labels: {
                            padding: 20,
                            fontColor: "#fff",
                            boxWidth: 8,
                            itemGap: 20,
                            boxHeight: 2,
                            selectedMode: false,
                            fill: true,
                        },
                    },
                    hover: {
                        mode: 'index',
                    },
                    scales: {
                        xAxes: [
                            {
                                display: false,
                                scaleLabel: {
                                    display: false,
                                },
                                gridLines: {
                                    display: false,
                                    color: "#d1d1ff",
                                },
                                ticks: {
                                    fontColor: "#d1d1ff",
                                },
                            },
                        ],
                        yAxes: [
                            {
                                display: false,
                                scaleLabel: {
                                    display: false
                                },
                                gridLines: {
                                    display: false,
                                    color: "#d1d1ff",
                                },
                                ticks: {
                                    fontColor: "#d1d1ff",
                                },
                            },
                        ],
                    },
                }
            });
        };
    }
    Chart9Component.prototype.ngOnInit = function () {
        //register custome positioner
        chart_js__WEBPACK_IMPORTED_MODULE_2___default.a.Tooltip.positioners.custom = function (elements, position) {
            if (!elements.length) {
                return false;
            }
            var offset = 0;
            //adjust the offset left or right depending on the event position
            if (elements[0]._chart.width / 2 > position.x) {
                offset = 20;
            }
            else {
                offset = -20;
            }
            return {
                x: position.x + offset,
                y: position.y
            };
        };
    };
    Chart9Component.prototype.ngAfterContentInit = function () {
    };
    Chart9Component.prototype.random = function () {
        return Math.round(Math.random() * 100);
    };
    Chart9Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-chart9',
            template: __webpack_require__(/*! ./chart9.component.html */ "./src/app/pages/trader-v/chart9/chart9.component.html"),
            styles: [__webpack_require__(/*! ./chart9.component.scss */ "./src/app/pages/trader-v/chart9/chart9.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Chart9Component);
    return Chart9Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.html":
/*!***********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart2m/flipchart2m.component.html ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\t\r\n\t\r\n\t  <div class=\"p-0 col-12\">\r\n\t    <div class=\"flex\">\r\n\t      <div class=\"col-12 pl-3\" id=\"fc2pc\">\r\n\t\t\t<p class=\"flex-arrow\" \r\n\t\t\t[ngClass]=\"(TotalMarketCap.obj.percent<0)?'red':'green'\" \r\n\t\t\tid=\"pbpc\">{{TotalMarketCap.obj.percent | number: '.2'}}%<i \r\n\t\t\t[ngClass]=\"(TotalMarketCap.obj.percent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" \r\n\t\t\t></i></p>\r\n\t      </div>\t      \r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"chart\" style=\"overflow:hidden\"></div>\r\n\t  </div>\r\n\r\n\r\n "

/***/ }),

/***/ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.scss":
/*!***********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart2m/flipchart2m.component.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 70px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\ncanvas {\n  border-radius: 0 !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9mbGlwY2hhcnQybS9mbGlwY2hhcnQybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQVksRUFDZjs7QUFFRDtFQUNJLDRCQUEyQixFQUM1Qjs7QUFFRDtFQUNDLDRCQUEyQixFQUMzQiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2ZsaXBjaGFydDJtL2ZsaXBjaGFydDJtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogNzBweDtcclxufVxyXG5cclxuLmYtaCB7XHJcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEuNXJlbSk7XHJcbiAgfVxyXG4gIFxyXG4gIGNhbnZhc3tcclxuXHQgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICB9Il19 */"

/***/ }),

/***/ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart2m/flipchart2m.component.ts ***!
  \*********************************************************************/
/*! exports provided: flipchart2mComponentm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flipchart2mComponentm", function() { return flipchart2mComponentm; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pipes/short-number.pipe */ "./src/app/pipes/short-number.pipe.ts");




var flipchart2mComponentm = /** @class */ (function () {
    function flipchart2mComponentm(pipe) {
        var _this = this;
        this.pipe = pipe;
        this.data = [];
        this.time = [];
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 4535.45, percent: .33, change: 500, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1" },
            { title: "TOTAL MARKET CAP", value: 248.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
            { title: "TOTAL VOLUME", value: 94.54, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1" },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
        ];
        this.dbData = [];
        this.setData = function (data) {
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            var time = ((hour < 10 ? "0" : "") + hour) + ":" + (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
            var minP = Math.min.apply(null, _this.dbData) - Math.min.apply(null, _this.dbData) * .000003;
            var maxP = Math.max.apply(null, _this.dbData) + Math.max.apply(null, _this.dbData) * .000001;
            if (_this.time.length > 10)
                _this.time.shift();
            _this.time.push(time);
            if (_this.dbData.length > 10) {
                _this.dbData.shift();
                _this.dbData.push(parseFloat(data));
            }
            else {
                _this.dbData.push(parseFloat(data));
            }
            _this.dataOptions = {
                series: [{
                        data: _this.dbData
                    }],
                yAxis: {
                    min: minP,
                    max: maxP,
                },
            };
        };
    }
    flipchart2mComponentm.prototype.ngOnInit = function () {
        this.setOptions([], 0, [], []);
        // this.dataOptions=this.TotalMarketCap.arr;
    };
    flipchart2mComponentm.prototype.generateData = function (isNew, less) {
        for (var i = 0; i < less; i++) {
            isNew ? '' : this.data.shift();
            this.data.push(251.48 + Math.round(Math.random() * 10));
        }
    };
    flipchart2mComponentm.prototype.ngOnChanges = function (changes) {
    };
    flipchart2mComponentm.prototype.setOptions = function (data, animation, minP, maxP) {
        var _this = this;
        this.chartOption = {
            animation: animation,
            tooltip: {
                position: function (point, params, dom, rect, size) {
                    //其中point为当前鼠标的位置，size中有两个属性：viewSize和contentSize，分别为外层div和tooltip提示框的大小
                    var x = point[0]; //
                    var y = point[1];
                    var viewWidth = size.viewSize[0];
                    var viewHeight = size.viewSize[1];
                    var boxWidth = size.contentSize[0];
                    var boxHeight = size.contentSize[1];
                    var posX = 0; //x坐标位置
                    var posY = 0; //y坐标位置
                    if (x < boxWidth) { //左边放不开
                        posX = 5;
                    }
                    // else{//左边放的下
                    //     posX = x-boxWidth; 
                    // }
                    if (y < boxHeight) { //上边放不开
                        posY = 5;
                    }
                    // else
                    // {//上边放得下
                    //     posY = y-boxHeight;
                    // }
                    return [posX, posY];
                },
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    //return p[0].name + " : " + "$" + p[0].value + "B";
                    var t = _this.pipe.transform(p[0].value);
                    return _this.time[0] + " : $" + t;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 20
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['08:15:05', '08:15:06', '08:15:07', '08:15:08', '08:15:09', '08:15:10', '08:15:11', '08:15:12'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false,
                min: minP,
                max: maxP,
            },
            series: [{
                    data: data,
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "rgba(255,255,255,.7)",
                        shadowBlur: 12,
                        color: "#fff",
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 1,
                        }
                    },
                    lineStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 12,
                        opacity: 1,
                    },
                    areaStyle: {
                        opacity: 1,
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#0d68bd'
                            }, {
                                offset: 1,
                                color: '#73d4ec'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    };
    flipchart2mComponentm.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        // this.interval.unsubscribe();
    };
    flipchart2mComponentm.prototype.getData = function (idx, val) {
        return this.secondRowData[idx][val];
    };
    flipchart2mComponentm.prototype.updateData = function () {
        var _this = this;
        this.secondRowData.map(function (val) {
            var random = (Math.random() * val.change);
            var newVal = val.value + (_this.trueOrFalse() ? random : -random);
            if (val.value > newVal) {
                val.arrow = "nb-arrow-dropdown";
                val.color = "red";
                val.percent = (val.value - newVal) / val.value * 100;
            }
            else {
                val.percent = (newVal - val.value) / val.value * 100;
                val.arrow = "nb-arrow-dropup";
                val.color = "#00ff39";
            }
            val.value = newVal;
            return val;
        });
    };
    flipchart2mComponentm.prototype.clicked = function (e) {
        //    this.selectedCoin = e.data.name;
        //	this.selectedPrice = e.data.value;
        //	this.selectedPercent = e.data.percentV;
        //    this.revealed = true;
        //    this.setChartOption2();
    };
    flipchart2mComponentm.prototype.trueOrFalse = function () {
        return Math.round(Math.random());
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], flipchart2mComponentm.prototype, "TotalMarketCap", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], flipchart2mComponentm.prototype, "TotalMarketCapArray", void 0);
    flipchart2mComponentm = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-flipchart2m',
            template: __webpack_require__(/*! ./flipchart2m.component.html */ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.html"),
            styles: [__webpack_require__(/*! ./flipchart2m.component.scss */ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_3__["ShortNumberPipe"]])
    ], flipchart2mComponentm);
    return flipchart2mComponentm;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.html":
/*!***********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart3m/flipchart3m.component.html ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\t\r\n\t\r\n\t  <div class=\"p-0 col-12\">\r\n\t    <div class=\"flex\">\r\n\t      <div class=\"col-12 pl-3\" id=\"fc3tvpc\">\r\n\t\t\t<p class=\"flex-arrow\" \r\n\t\t\t[ngClass]=\"(TotalVolume.percent<0)?'red':'green'\"\r\n\t\t\tid=\"pbpc\">{{TotalVolume.percent}}%<i \r\n\t\t\t[ngClass]=\"(TotalVolume.percent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\"\r\n\t\t\t></i></p>\r\n\t      </div>\t      \r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" [merge]=\"dataOptions\" class=\"chart\"></div>\r\n\t  </div>\r\n"

/***/ }),

/***/ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.scss":
/*!***********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart3m/flipchart3m.component.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 70px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\ncanvas {\n  border-radius: 0 !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9mbGlwY2hhcnQzbS9mbGlwY2hhcnQzbS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQVksRUFDZjs7QUFFRDtFQUNJLDRCQUEyQixFQUM1Qjs7QUFFRDtFQUNDLDRCQUEyQixFQUMzQiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L2ZsaXBjaGFydDNtL2ZsaXBjaGFydDNtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogNzBweDtcclxufVxyXG5cclxuLmYtaCB7XHJcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEuNXJlbSk7XHJcbiAgfVxyXG4gIFxyXG4gIGNhbnZhc3tcclxuXHQgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICB9Il19 */"

/***/ }),

/***/ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/pages/trader-v/flipchart3m/flipchart3m.component.ts ***!
  \*********************************************************************/
/*! exports provided: flipchart3mComponentm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flipchart3mComponentm", function() { return flipchart3mComponentm; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pipes/short-number.pipe */ "./src/app/pipes/short-number.pipe.ts");




var flipchart3mComponentm = /** @class */ (function () {
    function flipchart3mComponentm(pipe) {
        var _this = this;
        this.pipe = pipe;
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 4535.45, percent: 0, change: 500, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1" },
            { title: "TOTAL MARKET CAP", value: 248.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
            { title: "TOTAL VOLUME", value: 94.54, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1" },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
        ];
        this.data = [];
        this.time = [];
        this.dbData = [];
        this.TotalVolume = {};
        this.setData = function (data, TotalVolume) {
            _this.TotalVolume = TotalVolume;
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            var time = ((hour < 10 ? "0" : "") + hour) + ":" + (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
            var minP = Math.min.apply(null, _this.dbData) - Math.min.apply(null, _this.dbData) * .000003;
            var maxP = Math.max.apply(null, _this.dbData) + Math.max.apply(null, _this.dbData) * .000001;
            if (_this.time.length > 10)
                _this.time.shift();
            _this.time.push(time);
            if (_this.dbData.length > 10) {
                _this.dbData.shift();
                _this.dbData.push(parseFloat(data));
            }
            else {
                _this.dbData.push(parseFloat(data));
            }
            _this.dataOptions = {
                series: [{
                        data: _this.dbData
                    }],
                xAxis: [{
                        data: _this.time
                    }],
                yAxis: {
                    min: minP,
                    max: maxP,
                },
            };
        };
    }
    flipchart3mComponentm.prototype.ngOnInit = function () {
        this.setOptions([], 0, [], []);
        // this.interval = interval(1000).subscribe(_ => {
        //   this.updateData();
        // })
        //   this.generateData(true, 8)
        //   this.setOptions(this.data, true);
        //   setInterval(() => {
        //     this.generateData(false, 1)
        //     this.setOptions(this.data, false);
        //   }, 1500)
    };
    flipchart3mComponentm.prototype.generateData = function (isNew, less) {
        for (var i = 0; i < less; i++) {
            isNew ? '' : this.data.shift();
            this.data.push(Math.round(Math.random() * 1000));
        }
    };
    flipchart3mComponentm.prototype.setOptions = function (data, animation, minP, maxP) {
        var _this = this;
        this.chartOption = {
            animation: animation,
            tooltip: {
                trigger: "axis",
                position: function (point, params, dom, rect, size) {
                    //其中point为当前鼠标的位置，size中有两个属性：viewSize和contentSize，分别为外层div和tooltip提示框的大小
                    var x = point[0]; //
                    var y = point[1];
                    var viewWidth = size.viewSize[0];
                    var viewHeight = size.viewSize[1];
                    var boxWidth = size.contentSize[0];
                    var boxHeight = size.contentSize[1];
                    var posX = 0; //x坐标位置
                    var posY = 0; //y坐标位置
                    if (x < boxWidth) { //左边放不开
                        posX = 5;
                    }
                    // else
                    // {//左边放的下
                    //     posX = x-boxWidth; 
                    // }
                    if (y < boxHeight) { //上边放不开
                        posY = 5;
                    }
                    // else{//上边放得下
                    //     posY = y-boxHeight;
                    // }
                    return [posX, posY];
                },
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + _this.pipe.transform(p[0].value);
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 20
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['08:15:05', '08:15:06', '08:15:07', '08:15:08', '08:15:09', '08:15:10', '08:15:11', '08:15:12'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false,
                min: minP,
                max: maxP,
            },
            series: [{
                    data: data,
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "rgba(255,255,255,.7)",
                        shadowBlur: 12,
                        color: "#fff",
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 1,
                        }
                    },
                    lineStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 12,
                        opacity: 1,
                    },
                    areaStyle: {
                        opacity: 1,
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#f2851a'
                            }, {
                                offset: 1,
                                color: '#ecc66a'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    };
    flipchart3mComponentm.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
    };
    flipchart3mComponentm.prototype.getData = function (idx, val) {
        return this.secondRowData[idx][val];
    };
    flipchart3mComponentm.prototype.updateData = function () {
        var _this = this;
        this.secondRowData.map(function (val) {
            var random = (Math.random() * val.change);
            var newVal = val.value + (_this.trueOrFalse() ? random : -random);
            if (val.value > newVal) {
                val.arrow = "nb-arrow-dropdown";
                val.color = "red";
                val.percent = (val.value - newVal) / val.value * 100;
            }
            else {
                val.percent = (newVal - val.value) / val.value * 100;
                val.arrow = "nb-arrow-dropup";
                val.color = "#00ff39";
            }
            val.value = newVal;
            return val;
        });
    };
    flipchart3mComponentm.prototype.trueOrFalse = function () {
        return Math.round(Math.random());
    };
    flipchart3mComponentm = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-flipchart3m',
            template: __webpack_require__(/*! ./flipchart3m.component.html */ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.html"),
            styles: [__webpack_require__(/*! ./flipchart3m.component.scss */ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_pipes_short_number_pipe__WEBPACK_IMPORTED_MODULE_3__["ShortNumberPipe"]])
    ], flipchart3mComponentm);
    return flipchart3mComponentm;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart1/ochart1.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1/ochart1.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "  \t  <div class=\"col-3\">\r\n\t  \t<div class=\"portfolio-inner-back-labels\">\r\n\t\t\t<div class=\"pibl-coin\">Balance</div>\r\n\t\t\t<div class=\"pibl-title purple\">$721,230</div>\r\n\t\t\t<span class=\"pibl-subtitle green\">71.45%</span>\r\n\t\t\t<span class=\"nb-arrow-dropup green\"></span>\r\n\t\t</div>\r\n\t  </div>\r\n      <div echarts [options]=\"chartOption\" class=\"col-9\"></div>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart1/ochart1.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1/ochart1.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".card-half-balance {\n  width: 50%;\n  left: 0; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQxL29jaGFydDEuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUE7RUFDQyxXQUFVO0VBQ1YsUUFBTyxFQUNQIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvb2NoYXJ0MS9vY2hhcnQxLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmYtaCB7XHJcbn1cclxuLnBvcnRmb2xpby1pbm5lci1iYWNrLWxhYmVscyB7XHJcbn1cclxuLmNhcmQtaGFsZi1iYWxhbmNlIHtcclxuXHR3aWR0aDogNTAlO1xyXG5cdGxlZnQ6IDA7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart1/ochart1.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1/ochart1.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart1Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart1Component", function() { return ochart1Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var ochart1Component = /** @class */ (function () {
    function ochart1Component() {
        this.legend = {
            orient: 'horizontal',
            x: 'center',
            y: 'bottom',
            padding: 16,
            textStyle: {
                color: "#fff",
                fontSize: 16
            },
            data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
        };
        this.barStyle = {};
        this.chartOption = {
            tooltip: {},
            color: ["#dd4b64", "#9d5ae5", "#5fabf7", "#b5e659", "#ffea00", "#f09537"],
            grid: {
                show: true,
                bottom: -10,
                top: -10,
                left: -10,
                right: -10
            },
            series: [
                {
                    type: "pie",
                    radius: ['0%', '100%'],
                    center: ["80%", "50%"],
                    avoidLabelOverlap: false,
                    label: {
                        show: false,
                        position: "center",
                        color: "#fff",
                        fontSize: 16,
                        fontWeight: "lighter",
                        formatter: "Total Market Cap \n \n $1.321.132.546,21",
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: [
                        { value: 3350, name: 'Bitcoin', itemStyle: this.barStyle },
                        { value: 2100, name: 'Ethereum', itemStyle: this.barStyle },
                        { value: 2345, name: 'Bitcoin Cash', itemStyle: this.barStyle },
                        { value: 1350, name: 'Lite Coin', itemStyle: this.barStyle },
                        { value: 948, name: 'XRP', itemStyle: this.barStyle },
                        { value: 848, name: 'EOS', itemStyle: this.barStyle }
                    ]
                }
            ]
        };
    }
    ochart1Component.prototype.ngOnInit = function () {
        if (window.innerWidth > 1280) {
            this.chartOption.legend["orient"] = "vertical";
            this.chartOption.legend["x"] = "right";
            this.chartOption.legend["y"] = "center";
            this.chartOption.legend["itemWidth"] = 48;
            this.chartOption.legend["itemHeight"] = 24;
            this.chartOption.legend["left"] = "63%";
            this.chartOption.series[0]["center"] = ["33%", "50%"];
        }
    };
    ochart1Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart1',
            template: __webpack_require__(/*! ./ochart1.component.html */ "./src/app/pages/trader-v/ochart1/ochart1.component.html"),
            styles: [__webpack_require__(/*! ./ochart1.component.scss */ "./src/app/pages/trader-v/ochart1/ochart1.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart1Component);
    return ochart1Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart10/ochart10.component.html":
/*!*****************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart10/ochart10.component.html ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\t\r\n\t\r\n\t  <div class=\"p-0 col-12\">\r\n\t    <div class=\"flex\">\r\n\t      <div class=\"col-6 pl-4\">\r\n\t        <span class=\"green exo-font\">324.33%</span>\r\n\t\t\t<span class=\"nb-arrow-dropup green\"></span>\r\n\t      </div>\t      \r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </div>\r\n"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart10/ochart10.component.scss":
/*!*****************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart10/ochart10.component.scss ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 88px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\ncanvas {\n  border-radius: 0 !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQxMC9vY2hhcnQxMC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQVksRUFDZjs7QUFFRDtFQUNJLDRCQUEyQixFQUM1Qjs7QUFFRDtFQUNDLDRCQUEyQixFQUMzQiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWRlci12L29jaGFydDEwL29jaGFydDEwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogODhweDtcclxufVxyXG5cclxuLmYtaCB7XHJcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEuNXJlbSk7XHJcbiAgfVxyXG4gIFxyXG4gIGNhbnZhc3tcclxuXHQgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICB9Il19 */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart10/ochart10.component.ts":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart10/ochart10.component.ts ***!
  \***************************************************************/
/*! exports provided: ochart10Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart10Component", function() { return ochart10Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart10Component = /** @class */ (function () {
    function ochart10Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Jun - week1', 'Jun - week2', 'Jun - week3', 'Jun - week4', 'Jul - week1', 'Jul - week2', 'Jul - week3', 'Jul - week4'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [50, 90, 100, 60, 160, 200, 260, 190],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    areaStyle: {
                        opacity: 1,
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.1,
                                color: '#ff8e1f'
                            }, {
                                offset: 1,
                                color: '#e3b64c'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    }
    ochart10Component.prototype.ngOnInit = function () {
    };
    ochart10Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart10',
            template: __webpack_require__(/*! ./ochart10.component.html */ "./src/app/pages/trader-v/ochart10/ochart10.component.html"),
            styles: [__webpack_require__(/*! ./ochart10.component.scss */ "./src/app/pages/trader-v/ochart10/ochart10.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart10Component);
    return ochart10Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart1new/ochart1new.component.html":
/*!*********************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1new/ochart1new.component.html ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-reveal-card style=\"width: 100%\" [showToggleButton]=\"toogle\" [revealed]=\"revealed\"\r\n[nbSpinner]=\"loading\" *ngIf=\"balance\"\r\n>\r\n  <nb-card-front class=\"crd\">\r\n    <nb-card class=\"pie-card\">      \r\n      <nb-card-body class=\"p-0 flex-vertical\" style=\"overflow-x: hidden; overflow: visible;\">\r\n        <div class=\"default-view-balance col-6 px-0\" style=\"padding-left: 6px !important\">\r\n          <div class=\"portfolio-inner-back-labels\">\r\n          <div class=\"pibl-coin\">Balance</div>\r\n          <div class=\"pibl-title color-light-2\">${{balance.value | number:'.2'}}</div>\r\n          <p class=\"flex-arrow\" \r\n          [ngClass]=\"(balance.percent<0)?'red':'green'\" \r\n          id=\"pbpc\">{{balance.percent}}%<i [class]=\"balance.arrow\"></i></p>\r\n        </div>\r\n        </div>\r\n        <div echarts [options]=\"chartOption1\" [merge]=\"dataOptions\" class=\"chart col-7 col-xl-6\" (chartClick)=\"clicked($event)\" style=\"height: 80px\"></div>\r\n        <div class=\"col-0 col-xl-3\"></div>\r\n      </nb-card-body>\r\n\t  \t  \r\n    </nb-card>\r\n  </nb-card-front>\r\n  \r\n  \r\n  <nb-card-back class=\"crd card-half-balance\" style=\"\"\r\n \r\n  >\r\n    <nb-card style=\"border-radius: 0;box-shadow: none;\" class=\"pie-card\" >\r\n      <nb-card-header class=\"d-flex justify-content-between align-items-center\" style=\"padding: .38rem 0;padding-left: 5px; border-bottom: none; height: 58px; overflow: hidden; font-size: 10px; margin-top: 1px;\">\r\n        <div>\r\n          <span class=\"selectedCoin\">{{selectedCoin}}</span>\r\n        </div>\r\n\t\t<div>\r\n\t\t</div>\r\n        <i class=\"nb-close link p-0\" size=\"large\" (click)=\"off()\"></i>\r\n      </nb-card-header>\r\n      <nb-card-body class=\"p-0\" style=\"overflow-x: visible; overflow: visible; height: 90px\">\r\n\t  <div class=\"balance-items-container\">\r\n        <!-- <div class=\"purple balance-item-price\">${{selectedPrice}}</div> -->\r\n    <!-- <div class=\"green balance-item-percent\">{{selectedPercent}}%<span class=\"nb-arrow-dropup green\"></span></div> -->\r\n    <div class=\"purple balance-item-price\">${{selectedPrice | number:'.2'}}</div>\r\n    <div class=\"balance-item-percent\" \r\n    [ngClass]=\"(selectedPercent<0)?'red':'green'\" \r\n    id=\"pbpc\">{{selectedPercent}}%<i \r\n    [ngClass]=\"(selectedPercent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" \r\n    ></i></div>\r\n\t</div>\r\n      </nb-card-body>\r\n    </nb-card>\r\n  </nb-card-back>\r\n</nb-reveal-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart1new/ochart1new.component.scss":
/*!*********************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1new/ochart1new.component.scss ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host .color-light-2 {\n  color: #d1d1ff; }\n.nb-theme-default :host .pibl-coin {\n  color: #d1d1ff; }\n.nb-theme-default :host ::ng-deep nb-reveal-card .second-card-container {\n  height: 200px !important;\n  width: 50% !important; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host .color-light-2 {\n  color: #d1d1ff; }\n.nb-theme-cosmic :host .pibl-coin {\n  color: #d1d1ff; }\n.nb-theme-cosmic :host ::ng-deep nb-reveal-card .second-card-container {\n  height: 200px !important;\n  width: 50% !important; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host .color-light-2 {\n  color: #d1d1ff; }\n.nb-theme-corporate :host .pibl-coin {\n  color: #d1d1ff; }\n.nb-theme-corporate :host ::ng-deep nb-reveal-card .second-card-container {\n  height: 200px !important;\n  width: 50% !important; }\n.f-h {\n  height: calc(100% - 1.5rem) !important;\n  min-height: 480px; }\n.f-h .crd {\n    height: 100%; }\n.pibl-subtitle {\n  font-size: 3.9vw; }\n@media (min-width: 768px) {\n  .pibl-subtitle {\n    font-size: 2.7vw; } }\n@media (min-width: 992px) {\n  .pibl-subtitle {\n    font-size: 1rem; } }\n@media (min-width: 1200px) {\n  .pibl-subtitle {\n    font-size: 1rem; } }\n.color-light-2 {\n  font-weight: 700; }\n.selectedCoin {\n  font-size: 1rem;\n  margin-top: 1px; }\n@media (min-width: 768px) {\n    .selectedCoin {\n      font-size: 1.5vmin; } }\n@media (min-width: 992px) {\n    .selectedCoin {\n      font-size: 1.5vmin; } }\n@media (min-width: 1200px) {\n    .selectedCoin {\n      font-size: 1.5vmin; } }\n.nb-close {\n  font-size: 18px; }\n@media (min-width: 1200px) {\n    .nb-close {\n      margin-right: 0; } }\n.pibl-coin {\n  margin-top: 1px; }\n.flex-arrow {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .flex-arrow {\n      font-size: 14px; } }\n@media (min-width: 992px) {\n    .flex-arrow {\n      font-size: 12px; } }\n.pibl-coin {\n  font-size: 1rem; }\n@media (min-width: 768px) {\n    .pibl-coin {\n      font-size: 1.5vmin; } }\n@media (min-width: 992px) {\n    .pibl-coin {\n      font-size: 1.5vmin; } }\n@media (min-width: 1200px) {\n    .pibl-coin {\n      font-size: 18px; } }\n.pibl-title {\n  font-size: 1.35rem; }\n@media (min-width: 768px) {\n    .pibl-title {\n      font-size: 2.5vmin; } }\n@media (min-width: 992px) {\n    .pibl-title {\n      font-size: 1.65vmin; } }\n@media (min-width: 1200px) {\n    .pibl-title {\n      font-size: 20px; } }\n@media (min-width: 768px) {\n  .balance-item-price {\n    font-size: 2.5vmin; } }\n@media (min-width: 992px) {\n  .balance-item-price {\n    font-size: 1.65vmin; } }\n@media (min-width: 1200px) {\n  .balance-item-price {\n    font-size: 20px; } }\n.balance-item-percent {\n  margin-top: 2px;\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .balance-item-percent {\n      font-size: 2vmin; } }\n@media (min-width: 992px) {\n    .balance-item-percent {\n      font-size: 1.25vmin; } }\n@media (min-width: 1200px) {\n    .balance-item-percent {\n      font-size: 16px; } }\n@media (min-width: 768px) {\n  .flex-arrow {\n    font-size: 2vmin; } }\n@media (min-width: 992px) {\n  .flex-arrow {\n    font-size: 1.25vmin; } }\n@media (min-width: 1200px) {\n  .flex-arrow {\n    font-size: 16px; } }\n.balance-items-container {\n  margin-top: -18px; }\n.balance-items-container {\n  padding-left: 5px; }\n@media (min-width: 768px) {\n    .balance-items-container {\n      padding-left: 5px; } }\n@media (min-width: 992px) {\n    .balance-items-container {\n      padding-left: 5px; } }\n#pbpc {\n  margin-bottom: 0 !important; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart1new/ochart1new.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart1new/ochart1new.component.ts ***!
  \*******************************************************************/
/*! exports provided: ochart1newComponentnew */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart1newComponentnew", function() { return ochart1newComponentnew; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var ochart1newComponentnew = /** @class */ (function () {
    function ochart1newComponentnew() {
        var _this = this;
        this.loading = true;
        this.setData = function (data) {
            _this.dataOptions = {
                series: [{
                        data: data.graph
                    }]
            };
            if (_this.selectedCoin) {
                var p = data.graph.filter(function (x) { return x.name == _this.selectedCoin; })[0];
                console.log(p);
                _this.selectedPrice = p.value.toFixed(2);
                _this.selectedColor = p.color;
                _this.selectedArrow = p.arrow;
                _this.selectedPercent = p.percent.toFixed(2);
            }
            _this.obsData = data.graph;
            _this.balance = data.balance;
            _this.loading = false;
        };
        this.legend = {
            orient: 'horizontal',
            x: 'center',
            y: 'bottom',
            padding: 16,
            textStyle: {
                color: "#fff",
                fontSize: 16
            },
            data: ['Bitcoin', 'Ethereum', 'Bitcoin Cash', 'Lite Coin', 'XRP', 'EOS']
        };
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 9535.45, percent: 0, change: 100, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1" },
            { title: "TOTAL MARKET CAP", value: 248.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
            { title: "TOTAL VOLUME", value: 94.54, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1" },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2" },
        ];
        this.barStyle = {};
        this.toogle = false;
        this.revealed = false;
        this.chartOption1 = {
            tooltip: {
                show: true,
                trigger: "axis",
                padding: 16,
            },
            color: ["#dd4b64", "#9d5ae5", "#5fabf7", "#b5e659", "#ffea00", "#f09537"],
            legend: {
                orient: 'horizontal',
                show: false,
                selectedMode: false,
                x: 'center',
                y: 'bottom',
                align: "center",
                itemHeight: 24,
                padding: 16,
                textStyle: {
                    color: "#fff",
                    fontSize: 16,
                },
                data: []
            },
            grid: {
                show: true,
                bottom: -10,
                top: -30,
                left: -10,
                right: -10,
            },
            series: [
                {
                    type: "pie",
                    hoverOffset: 0,
                    hoverAnimation: false,
                    radius: ['0%', '100%'],
                    center: ["50%", "50%"],
                    avoidLabelOverlap: false,
                    label: {
                        show: false,
                        position: "center",
                        color: "#fff",
                        fontSize: 12,
                        fontWeight: "lighter",
                        formatter: "Total Market Cap \n \n $1.321.132.546,21",
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: [
                    // { value: 3350.34, name: 'Bitcoin'},
                    // { value: 2100.67, name: 'Ethereum'},
                    // { value: 2345.11, name: 'Bitcoin Cash'},
                    // { value: 1350.57, name: 'Lite Coin'},
                    // { value: 948.89, name: 'XRP'},
                    // { value: 848.35, name: 'EOS'},
                    ]
                }
            ]
        };
        this.off = function () {
            _this.selectedCoin = null;
            _this.selectedPrice = null;
            _this.selectedPercent = null;
            _this.revealed = false;
        };
    }
    ochart1newComponentnew.prototype.ngOnInit = function () {
        if (window.innerWidth > 1280) {
            this.chartOption1.legend["orient"] = "vertical";
            this.chartOption1.legend["x"] = "center";
            this.chartOption1.legend["y"] = "center";
            this.chartOption1.legend["itemWidth"] = 48;
            this.chartOption1.legend["itemHeight"] = 24;
            this.chartOption1.legend["left"] = "0";
            this.chartOption1.series[0]["center"] = ["50%", "50%"];
        }
    };
    ochart1newComponentnew.prototype.clicked = function (e) {
        this.selectedCoin = e.data.name;
        this.selectedPrice = e.data.value.toFixed(2);
        this.selectedPercent = e.data.percent.toFixed(2);
        this.selectedArrow = e.data.arrow;
        this.selectedColor = e.data.color;
        this.revealed = true;
        // this.setChartOption2();
    };
    ochart1newComponentnew.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        // this.interval.unsubscribe();
    };
    ochart1newComponentnew.prototype.getData = function (idx, val) {
        return this.secondRowData[idx][val];
    };
    ochart1newComponentnew = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart1new',
            template: __webpack_require__(/*! ./ochart1new.component.html */ "./src/app/pages/trader-v/ochart1new/ochart1new.component.html"),
            styles: [__webpack_require__(/*! ./ochart1new.component.scss */ "./src/app/pages/trader-v/ochart1new/ochart1new.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart1newComponentnew);
    return ochart1newComponentnew;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart2/ochart2.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart2/ochart2.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\t\r\n\t\r\n\t  <div class=\"p-0 col-12\">\r\n\t    <div class=\"flex\">\r\n\t      <div class=\"col-6 pl-4\">\r\n\t        <span class=\"green exo-font\">324.33%</span>\r\n\t\t\t<span class=\"nb-arrow-dropup green\"></span>\r\n\t      </div>\t      \r\n\t    </div>\r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </div>\r\n"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart2/ochart2.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart2/ochart2.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 88px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\ncanvas {\n  border-radius: 0 !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQyL29jaGFydDIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFZLEVBQ2Y7O0FBRUQ7RUFDSSw0QkFBMkIsRUFDNUI7O0FBRUQ7RUFDQyw0QkFBMkIsRUFDM0IiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQyL29jaGFydDIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhcnQge1xyXG4gICAgaGVpZ2h0OiA4OHB4O1xyXG59XHJcblxyXG4uZi1oIHtcclxuICAgIGhlaWdodDogY2FsYygxMDAlIC0gMS41cmVtKTtcclxuICB9XHJcbiAgXHJcbiAgY2FudmFze1xyXG5cdCAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50O1xyXG4gIH0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart2/ochart2.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart2/ochart2.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart2Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart2Component", function() { return ochart2Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart2Component = /** @class */ (function () {
    function ochart2Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Jun - week1', 'Jun - week2', 'Jun - week3', 'Jun - week4', 'Jul - week1', 'Jul - week2', 'Jul - week3', 'Jul - week4'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [50, 90, 100, 60, 160, 200, 260, 190],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 12
                    },
                    areaStyle: {
                        opacity: 1,
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.1,
                                color: '#0d68bd'
                            }, {
                                offset: 1,
                                color: '#73d4ec'
                            }
                        ])
                    }
                }],
            color: ["#fff"]
        };
    }
    ochart2Component.prototype.ngOnInit = function () {
    };
    ochart2Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart2',
            template: __webpack_require__(/*! ./ochart2.component.html */ "./src/app/pages/trader-v/ochart2/ochart2.component.html"),
            styles: [__webpack_require__(/*! ./ochart2.component.scss */ "./src/app/pages/trader-v/ochart2/ochart2.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart2Component);
    return ochart2Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart4/ochart4.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart4/ochart4.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\t  <nb-card-body class=\"p-0 chart-card chart-absolute\">\t    \r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart4/ochart4.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart4/ochart4.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 120px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQ0L29jaGFydDQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFhLEVBQ2hCOztBQUVEO0VBQ0ksNEJBQTJCLEVBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvb2NoYXJ0NC9vY2hhcnQ0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogMTIwcHg7XHJcbn1cclxuXHJcbi5mLWgge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxLjVyZW0pO1xyXG4gIH0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart4/ochart4.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart4/ochart4.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart4Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart4Component", function() { return ochart4Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart4Component = /** @class */ (function () {
    function ochart4Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#d1d1ff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [70, 50, 80, 90, 50, 60, 80, 130],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 0
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#fff",
                        shadowBlur: 0
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.5,
                                color: 'transparent'
                            }, {
                                offset: 1,
                                color: 'transparent'
                            }
                        ])
                    }
                }],
            color: ["#e89a00"]
        };
    }
    ochart4Component.prototype.ngOnInit = function () {
    };
    ochart4Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart4',
            template: __webpack_require__(/*! ./ochart4.component.html */ "./src/app/pages/trader-v/ochart4/ochart4.component.html"),
            styles: [__webpack_require__(/*! ./ochart4.component.scss */ "./src/app/pages/trader-v/ochart4/ochart4.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart4Component);
    return ochart4Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart5/ochart5.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart5/ochart5.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\t  <nb-card-body class=\"p-0 chart-card chart-absolute\">\r\n\t    \r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart5/ochart5.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart5/ochart5.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 120px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQ1L29jaGFydDUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFhLEVBQ2hCOztBQUVEO0VBQ0ksNEJBQTJCLEVBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvb2NoYXJ0NS9vY2hhcnQ1LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogMTIwcHg7XHJcbn1cclxuXHJcbi5mLWgge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxLjVyZW0pO1xyXG4gIH0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart5/ochart5.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart5/ochart5.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart5Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart5Component", function() { return ochart5Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart5Component = /** @class */ (function () {
    function ochart5Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#00fb5d",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [90, 70, 60, 80, 70, 40, 60, 120],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 0
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#00ffb4",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#00fb5d",
                        shadowBlur: 0
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.5,
                                color: 'transparent'
                            }, {
                                offset: 1,
                                color: 'transparent'
                            }
                        ])
                    }
                }],
            color: ["#00fb5d"]
        };
    }
    ochart5Component.prototype.ngOnInit = function () {
    };
    ochart5Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart5',
            template: __webpack_require__(/*! ./ochart5.component.html */ "./src/app/pages/trader-v/ochart5/ochart5.component.html"),
            styles: [__webpack_require__(/*! ./ochart5.component.scss */ "./src/app/pages/trader-v/ochart5/ochart5.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart5Component);
    return ochart5Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart6/ochart6.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart6/ochart6.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\t  <nb-card-body class=\"p-0 chart-card chart-absolute\">\r\n\t    \t\t\r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart6/ochart6.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart6/ochart6.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 120px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQ2L29jaGFydDYuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFhLEVBQ2hCOztBQUVEO0VBQ0ksNEJBQTJCLEVBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvb2NoYXJ0Ni9vY2hhcnQ2LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogMTIwcHg7XHJcbn1cclxuXHJcbi5mLWgge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxLjVyZW0pO1xyXG4gIH0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart6/ochart6.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart6/ochart6.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart6Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart6Component", function() { return ochart6Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart6Component = /** @class */ (function () {
    function ochart6Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#007bff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [70, 85, 68, 86, 75, 44, 36, 60],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 0
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#007bff",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#00fb5d",
                        shadowBlur: 0
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.5,
                                color: 'transparent'
                            }, {
                                offset: 1,
                                color: 'transparent'
                            }
                        ])
                    }
                }],
            color: ["#007bff"]
        };
    }
    ochart6Component.prototype.ngOnInit = function () {
    };
    ochart6Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart6',
            template: __webpack_require__(/*! ./ochart6.component.html */ "./src/app/pages/trader-v/ochart6/ochart6.component.html"),
            styles: [__webpack_require__(/*! ./ochart6.component.scss */ "./src/app/pages/trader-v/ochart6/ochart6.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart6Component);
    return ochart6Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/ochart7/ochart7.component.html":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart7/ochart7.component.html ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\t  <nb-card-body class=\"p-0 chart-card chart-absolute\">\t    \r\n\t    <div echarts [options]=\"chartOption\" class=\"chart\"></div>\r\n\t  </nb-card-body>"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart7/ochart7.component.scss":
/*!***************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart7/ochart7.component.scss ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".chart {\n  height: 120px; }\n\n.f-h {\n  height: calc(100% - 1.5rem); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vc2Nhci9Eb3dubG9hZHMvRnJvbnRlbmRfVjMvc3JjL2FwcC9wYWdlcy90cmFkZXItdi9vY2hhcnQ3L29jaGFydDcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFhLEVBQ2hCOztBQUVEO0VBQ0ksNEJBQTJCLEVBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHJhZGVyLXYvb2NoYXJ0Ny9vY2hhcnQ3LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcclxuICAgIGhlaWdodDogMTIwcHg7XHJcbn1cclxuXHJcbi5mLWgge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxLjVyZW0pO1xyXG4gIH0iXX0= */"

/***/ }),

/***/ "./src/app/pages/trader-v/ochart7/ochart7.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/ochart7/ochart7.component.ts ***!
  \*************************************************************/
/*! exports provided: ochart7Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ochart7Component", function() { return ochart7Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! echarts */ "./node_modules/echarts/index.js");
/* harmony import */ var echarts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(echarts__WEBPACK_IMPORTED_MODULE_2__);



var ochart7Component = /** @class */ (function () {
    function ochart7Component() {
        this.chartOption = {
            tooltip: {
                trigger: "axis",
                axisPointer: {
                    axis: "x",
                    type: "line",
                },
                padding: 16,
                formatter: function (p) {
                    return p[0].name + " : " + "$" + p[0].value;
                }
            },
            grid: {
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                axisPointer: {
                    show: true,
                    lineStyle: {
                        color: "#007bff",
                        type: "dashed"
                    },
                    label: {
                        show: false
                    }
                },
                data: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8'],
                show: false
            },
            yAxis: {
                type: 'value',
                show: false
            },
            series: [{
                    data: [86, 75, 98, 76, 95, 67, 58, 46],
                    type: 'line',
                    symbolSize: 9,
                    itemStyle: {
                        shadowColor: "transparent",
                        shadowBlur: 0
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#20c997',
                            borderColor: "#007bff",
                            borderWidth: 3,
                            opacity: 0.6,
                        }
                    },
                    lineStyle: {
                        shadowColor: "#00fb5d",
                        shadowBlur: 0
                    },
                    areaStyle: {
                        color: new echarts__WEBPACK_IMPORTED_MODULE_2__["graphic"].LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0.5,
                                color: 'transparent'
                            }, {
                                offset: 1,
                                color: 'transparent'
                            }
                        ])
                    }
                }],
            color: ["#ff127c"]
        };
    }
    ochart7Component.prototype.ngOnInit = function () {
    };
    ochart7Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-ochart7',
            template: __webpack_require__(/*! ./ochart7.component.html */ "./src/app/pages/trader-v/ochart7/ochart7.component.html"),
            styles: [__webpack_require__(/*! ./ochart7.component.scss */ "./src/app/pages/trader-v/ochart7/ochart7.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ochart7Component);
    return ochart7Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/table1/table1.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/table1/table1.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card class=\"f-h\" style=\"overflow: hidden;\">\r\n  <nb-card-header class=\"p-2\">\r\n    <div class=\"flex\" style=\"justify-content: space-between; align-items: center;\">\r\n\r\n      <div class=\"col-6\">\r\n        Live Trades\r\n      </div>\r\n\r\n      <nb-select selected=\"BTC\" class=\"button-width p-0 text-right transparent\">\r\n        <nb-option value=\"BTC\">BTC</nb-option>\r\n        <nb-option value=\"ETH\">XRP</nb-option>\r\n        <nb-option value=\"GAME\">ETH</nb-option>\r\n        <nb-option value=\"LBC\">LTC</nb-option>\r\n      </nb-select>\r\n    </div>\r\n\r\n  </nb-card-header>\r\n  <nb-card-body id=\"table-live-trades\" class=\"p-1 p-md-3\">    \r\n  \r\n  <div class=\"flex py-3 flex-row\" *ngFor=\"let row of data1\">\r\n  <!-- <span class=\"width-spacer\"></span> -->\r\n\t<!-- <span class=\"col-1 p-1 p-md-2\"></span> -->\r\n  <!-- <span class=\"col-2 p-1 p-md-2 flex-vertical\"><span class=\"coinImage\"><img class=\"coinImg\" src=\"../../../assets/Bitcoin.svg\"/></span>{{ row.coin }}</span>\r\n  <span class=\"col-2 p-1 p-md-2\" [ngClass]=\"{'green': row.bs === 'Buy', 'red': row.bs !== 'Buy' }\">\r\n    <span [ngClass]=\"{'nb-arrow-dropup': row.bs === 'Buy', 'nb-arrow-dropdown': row.bs !== 'Buy' }\"></span>\r\n    <span>{{ row.bs }}</span>\r\n  </span>\t\r\n    <span class=\"col-2 p-1 p-md-2\">${{ row.value }}</span>\r\n\t<span class=\"col-2 p-1 p-md-2\">{{ row.market }}</span>\r\n    <span class=\"col-33\">a few seconds ago</span> -->\r\n  <!-- <span class=\"col-1 p-1 p-md-2\"></span> -->\r\n  <!-- <span class=\"width-spacer\"></span> -->\r\n\r\n  <span class=\"col-19 flex-vertical\" style=\"line-height: 0;\"><span class=\"coinImage\"><img class=\"coinImg\" src=\"../../../assets/Bitcoin.svg\"/></span><span class=\"row-coin\">{{ row.coin }}</span></span>\r\n  <span class=\"col-19\" [ngClass]=\"{'green': row.bs === 'Buy', 'red': row.bs !== 'Buy' }\">\r\n    <span [ngClass]=\"{'nb-arrow-dropup': row.bs === 'Buy', 'nb-arrow-dropdown': row.bs !== 'Buy' }\"></span>\r\n    <span>{{ row.bs }}</span>\r\n  </span>\t\r\n    <span class=\"col-19\">${{ row.value }}</span>\r\n\t<span class=\"col-19\">{{ row.market }}</span>\r\n    <span class=\"col-24\">a few seconds ago</span>\r\n  </div>\r\n  <!-- \r\n    <div class=\"flex py-3\" *ngFor=\"let row of btcP\">\r\n      <span class=\"col-3\">{{ row.coin }}</span>\r\n      <span class=\"col-3\" [ngClass]=\"{'green': row.bs === 'Buy', 'red': row.bs !== 'Buy' }\">\r\n        <span [ngClass]=\"{'nb-arrow-dropup': row.bs === 'Buy', 'nb-arrow-dropdown': row.bs !== 'Buy' }\"></span>\r\n        <span>{{ row.bs }}</span>\r\n      </span>\r\n      <span class=\"col-3\">${{ row.value }}</span>\r\n      <span class=\"col-3\">a few seconds ago</span>\r\n    </div>\r\n\t-->\r\n    \r\n\r\n  </nb-card-body>\r\n</nb-card>"

/***/ }),

/***/ "./src/app/pages/trader-v/table1/table1.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/table1/table1.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.f-h {\n  height: calc(100%) !important; }\n.coinImage {\n  width: 20px; }\n.col-2 {\n  font-size: .5rem; }\n@media (min-width: 768px) {\n    .col-2 {\n      font-size: 12px; } }\n@media (min-width: 992px) {\n    .col-2 {\n      font-size: 14px; } }\n.coinImg {\n  width: 15px;\n  margin-right: 10px; }\n@media (min-width: 768px) {\n    .coinImg {\n      width: 20px; } }\n.coinImage {\n  margin-right: 10px; }\n.button-width {\n  width: 120px; }\n.flex-row {\n  -webkit-box-align: center;\n          align-items: center;\n  padding: 0 1vmin;\n  font-size: 10px; }\n@media (min-width: 768px) {\n    .flex-row {\n      padding: 0 1vmin;\n      font-size: 1rem; } }\n@media (min-width: 992px) {\n    .flex-row {\n      padding: 0 2vmin;\n      font-size: 1rem; } }\n@media (min-width: 1200px) {\n    .flex-row {\n      padding: 0 3vmin;\n      font-size: 1rem; } }\n.col-33 {\n  width: 33.33%; }\n.col-19 {\n  width: 18%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.col-24 {\n  width: 28%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.row-coin {\n  line-height: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/table1/table1.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/table1/table1.component.ts ***!
  \***********************************************************/
/*! exports provided: Table1Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Table1Component", function() { return Table1Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Table1Component = /** @class */ (function () {
    function Table1Component() {
        this.data1 = [];
    }
    Table1Component.prototype.ngOnInit = function () {
        //   this.setOption(this.data1);
        //   setInterval(() => {      
        //   this.data1 = this.randomData(1000, this.data1, false, 1);
        //   }, 200);
    };
    Table1Component.prototype.randomData = function (x, data, isNew, val) {
        for (var i = 0; i < val; i++) {
            isNew ? '' : data.shift();
            data.push((Math.random() * x + 100 * (Math.round(Math.random()) * 2 - 1) + 7800).toFixed(2));
        }
        return data;
    };
    Table1Component.prototype.change = function (e) {
        this.data1 = this.randomData(1000, [], true, 12);
    };
    Table1Component.prototype.setOption = function (data1) { };
    Table1Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-table1',
            template: __webpack_require__(/*! ./table1.component.html */ "./src/app/pages/trader-v/table1/table1.component.html"),
            styles: [__webpack_require__(/*! ./table1.component.scss */ "./src/app/pages/trader-v/table1/table1.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Table1Component);
    return Table1Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/table2/table2.component.html":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/table2/table2.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card style=\"overflow:hidden;\">\r\n  <nb-card-header>\r\n    Market Cap\r\n    <button nbTooltip=\"The table displays live information about the top 100 coins (by market cap).\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\r\n  </nb-card-header>\r\n  <nb-card-body class=\"table-overflow\">\r\n\r\n    <table style=\"max-width: 100%; border-radius: 8px; width: 100%;\" class=\"table-content\">\r\n      <thead>\r\n        <tr>\r\n          <td class=\"link\" *ngFor=\"let head of tableHead; let i = index;\"\r\n            (click)=\"filter(i)\">\r\n            <div class=\"d-flex justify-content-between\">\r\n              <span class=\"align-self-center\">{{head}}</span>\r\n              <span class=\"d-flex flex-column fit align-items-center col-4 p-0\">\r\n                <span class=\"nb-chevron-up\"></span>\r\n                <span class=\"nb-chevron-down\"></span>\r\n              </span>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let data of dbData; let i = index;\" [className]=\"i % 2 !== 0 ? 'dark-row' : ''\">\r\n          <ng-container *ngIf=\"i>=start && i<=end\">\r\n\r\n            <td>{{i+1}}</td>\r\n            <td>\r\n              <div class=\"\">\r\n                <div class=\"coin-row1 flex-vertical\">\r\n                  <img class=\"table2-img\" src=\"./assets/Coins/{{data.type | lowercase}}.png\"\r\n                    appImgFallback=\"./assets/Coins/default.png\" />\r\n                  <div class=\"\">\r\n                    <!-- <div class=\"table-coin-name\">{{data.FullName}} {{dbData.length}}</div>           -->\r\n                    <div class=\"table-coin-symbol\">{{data.type}}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </td>\r\n            <td class=\"text-center min-120\">$ {{data.price | number: '1.2-4'}}</td>\r\n            <td class=\"text-center\">$ {{data.marketCap | shortNumber}}</td>\r\n            <td class=\"text-center\">$ {{data.volume | shortNumber}}</td>\r\n            <td class=\"text-center\">{{data.supply | shortNumber}}</td>\r\n            <td class=\"text-center min-100\">\r\n              <p class=\"flex-arrow justify-content-center\" [ngClass]=\"(data.percentNumber<0)?'red':'green'\" id=\"tmcpc\">\r\n                {{data.percent}} <i [ngClass]=\"(data.percentNumber<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\"></i></p>\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n\r\n\r\n      </tbody>\r\n      <tr>\r\n        <td colspan=\"8\" class=\"p-0\">\r\n          <div class=\"d-flex justify-content-between align-items-center\">\r\n            <div class=\"d-flex\">\r\n              <span class=\"align-self-center mr-1 mr-md-3\">Coins per page</span>\r\n              <nb-select selected=\"5\" (selectedChange)=\"changeRowSize($event)\" class=\"transparent font-p-select\">\r\n                <nb-option value=\"5\">5</nb-option>\r\n                <nb-option value=\"10\">10</nb-option>\r\n                <nb-option value=\"25\">25</nb-option>\r\n                <nb-option value=\"50\">50</nb-option>\r\n              </nb-select>\r\n            </div>\r\n            <div class=\"d-flex\">\r\n              <span *ngIf=\"activePage==1\" class=\"link align-self-center\"><i class=\"nb-arrow-dropleft\"\r\n                  style=\"opacity:0.7\" style=\"vertical-align: middle;\"></i> Back </span>\r\n              <span *ngIf=\"activePage>1\" class=\"link align-self-center\" (click)=\"gotoBack()\"><i\r\n                  class=\"nb-arrow-dropleft\" style=\"vertical-align: middle;\"></i> Back\r\n              </span>\r\n              <span class=\"mx-2 align-self-center\">{{start+1}} - {{end+1}} of 100</span>\r\n              <span *ngIf=\"activePage==totalPages\" class=\"link align-self-center\" style=\"opacity: 0.7;\">Next <i\r\n                  class=\"nb-arrow-dropright\" style=\"vertical-align: middle;\"></i></span>\r\n\r\n              <span *ngIf=\"activePage==1 || activePage<totalPages\" class=\"link align-self-center\"\r\n                (click)=\"gotoNext()\">Next <i class=\"nb-arrow-dropright\" style=\"vertical-align: middle;\"></i></span>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n\r\n<!--\r\n\r\n        <tr *ngFor=\"let body of tableBody; let i = index\" [ngClass]=\"{'dark-row': i % 2 === 0}\">\r\n          <td>{{ i + 1 }}</td>\r\n          <td>\r\n            <div class=\"\">\r\n\t\t\t\t<div class=\"coin-row1 flex-vertical\">\r\n\t\t\t\t\t<img class=\"table2-img\" src=\"{{ body.coinIcon }}\"/>\r\n\t\t\t\t\t<div class=\"\">\r\n\t\t\t\t\t<div class=\"table-coin-name\">{{ body.name }}</div>          \r\n\t                <div class=\"table-coin-symbol\">{{ body.abb }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>    \r\n            </div>\r\n          </td>\r\n          <td class=\"text-center\">${{btcPrice[btcPrice.length-1]}}</td>\r\n          <td class=\"text-center\">{{ body.market }}B</td>\r\n          <td class=\"text-center\">{{ body.volume }}B</td>\r\n          <td class=\"text-center\">{{ body.supply }}B</td>\r\n          <td class=\"text-center\" [ngClass]=\"{'green': body.change > 0, 'red': body.change < 0}\">{{ body.change }}%</td>\r\n        </tr>\r\n-->"

/***/ }),

/***/ "./src/app/pages/trader-v/table2/table2.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/pages/trader-v/table2/table2.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host td {\n  border-right: 2px solid; }\n.nb-theme-default :host ::ng-deep nb-card nb-select .btn-primary {\n  font-size: 12px; }\n@media (min-width: 992px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-select .btn-primary {\n      font-size: 14px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host thead td {\n  background-color: #7659ff; }\n.nb-theme-cosmic :host .dark-row {\n  background-color: #2f296b; }\n.nb-theme-cosmic :host td {\n  border-right: 2px solid #3d3780;\n  color: #fff; }\n.nb-theme-cosmic :host .nb-chevron-up,\n.nb-theme-cosmic :host .nb-chevron-down {\n  color: #3d3780; }\n.nb-theme-cosmic :host .default-view-pie {\n  background-color: #2a265d; }\n.nb-theme-cosmic :host ::ng-deep nb-card nb-select .btn-primary {\n  font-size: 12px; }\n@media (min-width: 992px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-select .btn-primary {\n      font-size: 14px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host td {\n  border-right: 2px solid; }\n.nb-theme-corporate :host ::ng-deep nb-card nb-select .btn-primary {\n  font-size: 12px; }\n@media (min-width: 992px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-select .btn-primary {\n      font-size: 14px; } }\n.f-h {\n  height: calc(100%); }\ntable {\n  min-width: 100%;\n  min-height: 100%; }\ntable td {\n    padding: 8px;\n    padding-left: 16px;\n    min-width: -webkit-fit-content;\n    min-width: -moz-fit-content;\n    min-width: fit-content; }\n.fit {\n  max-width: -webkit-fit-content;\n  max-width: -moz-fit-content;\n  max-width: fit-content; }\n.table2-img {\n  width: 15px;\n  display: inline-block;\n  margin-right: 5px; }\n@media (min-width: 768px) {\n    .table2-img {\n      width: 20px;\n      margin-right: 8px; } }\n@media (min-width: 992px) {\n    .table2-img {\n      width: 25px;\n      margin-right: 10px; } }\n.table-coin-name {\n  font-weight: 900; }\n.table-coin-symbol {\n  display: block; }\n.link:first-child {\n  border-top-left-radius: 8px; }\n.link:nth-child(8n + 0) {\n  border-top-right-radius: 8px; }\n.table-overflow {\n  width: 100%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n          flex-direction: row;\n  padding: .75rem 1.25rem; }\n@media (min-width: 992px) {\n    .table-overflow {\n      padding: 1.25rem; } }\n.min-120 {\n  min-width: 120px !important; }\n.min-100 {\n  min-width: 100px !important; }\n.link:last-child {\n  border-top-right-radius: 8px; }\n.table-content {\n  font-size: 10px; }\n@media (min-width: 992px) {\n    .table-content {\n      font-size: 14px; } }\n@media (min-width: 1200px) {\n    .table-content {\n      font-size: 16px; } }\n.font-p-select {\n  font-size: 12px; }\n.min-100 p {\n  margin-bottom: 0; }\nnb-card-body {\n  padding: .75rem 1.25rem; }\n.btn-primary {\n  padding: 0.35rem 1.5rem; }\n@media (min-width: 992px) {\n    .btn-primary {\n      padding: 0.75rem 1.5rem; } }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/table2/table2.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/pages/trader-v/table2/table2.component.ts ***!
  \***********************************************************/
/*! exports provided: Table2Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Table2Component", function() { return Table2Component; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Table2Component = /** @class */ (function () {
    function Table2Component() {
        var _this = this;
        this.btcPrice = [];
        this.bchPrice = [];
        this.ethPrice = [];
        this.trxPrice = [];
        this.xrpPrice = [];
        this.dataT1 = [];
        this.dataT2 = [];
        this.dataT3 = [];
        this.dataE1 = [];
        this.dataE2 = [];
        this.dataE3 = [];
        this.btcMarketCapArrary = [];
        this.data2 = [];
        this.tableHead = ["#", "COIN", "PRICE", "MARKET CAP", "VOLUME (24H)", "SUPPLY", "CHANGE"];
        this.tableBody = [
            { name: "Bitcoin", abb: "BTC", price: this.rv(10000), coinIcon: "./assets/Coins/Bitcoin.svg", market: this.rv(100), volume: this.rv(100), supply: this.rv(100), change: 1.49 },
            { name: "Ethereum", abb: "ETH", price: this.rv(10000), coinIcon: "./assets/Coins/ethereum.svg", market: this.rv(100), volume: this.rv(100), supply: this.rv(100), change: 10.27 },
            { name: "XRP", abb: "XRP", price: this.rv(10000), coinIcon: "./assets/Coins/ripple.svg", market: this.rv(100), volume: this.rv(100), supply: this.rv(100), change: -2.98 },
            { name: "EOS", abb: "eos", price: this.rv(10000), coinIcon: "./assets/Coins/eos.svg", market: this.rv(100), volume: this.rv(100), supply: this.rv(100), change: 5.52 },
            { name: "Bitcoin Cash", abb: "BCH", price: this.rv(10000), coinIcon: "./assets/Coins/bitcoincash.svg", market: this.rv(100), volume: this.rv(100), supply: this.rv(100), change: -9.33 },
        ];
        this.secondRowData = [
            { title: "PORTFOLIO BALANCE", value: 9874.45, percent: 0, change: 500, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart1", volume: 27.48, marketCap: 165.87 },
            { title: "TOTAL MARKET CAP", value: 198.56, percent: 0, change: 1, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2", volume: 27.48, marketCap: 165.87 },
            { title: "TOTAL VOLUME", value: 0.29454, percent: 0, change: 1, arrow: "nb-arrow-dropdown", color: "#00ff39", app: "app-ochart1", volume: 1.89, marketCap: 12.83 },
            { title: "MARKET DOMINANCE", value: 292.54, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2", volume: 27.48, marketCap: 165.87 },
            { title: "MARKET DOMINANCE", value: 67.5, percent: 0, change: 0.6, arrow: "nb-arrow-dropup", color: "#00ff39", app: "app-ochart2", volume: 27.48, marketCap: 165.87 },
        ];
        this.selectionSize = 5;
        this.totalRecords = 100;
        this.totalPages = 20;
        this.activePage = 1;
        this.start = 0;
        this.end = 4;
        this.changeRowSize = function (event) {
            _this.selectionSize = parseInt(event);
            _this.activePage = 1;
            _this.start = 0;
            _this.totalPages = parseInt(_this.totalRecords) / parseInt(_this.selectionSize);
            _this.end = _this.selectionSize - 1;
        };
        this.gotoNext = function () {
            _this.activePage += 1;
            _this.start = parseInt(_this.start) + parseInt(_this.selectionSize);
            _this.end = parseInt(_this.end) + parseInt(_this.selectionSize);
            console.log(_this.activePage);
            console.log(_this.start);
            console.log(_this.end);
        };
        this.gotoBack = function () {
            _this.activePage -= 1;
            _this.start = parseInt(_this.start) - parseInt(_this.selectionSize);
            _this.end = parseInt(_this.end) - parseInt(_this.selectionSize);
        };
        this.setData = function (data) {
            if (_this.dbData)
                _this.dbData.map(function (x) {
                    var mar = data.filter(function (r) { return r.type === x.type; })[0];
                    x.FullName = x.FullName;
                    x.price = mar.price;
                    x.supply = mar.supply;
                    x.traded = mar.traded;
                    x.volume = mar.volume * mar.price;
                    x.change = mar.change;
                    x.arrow = mar.arrow;
                    x.percent = mar.percent;
                    x.color = mar.color;
                    x.marketCap = mar.marketCap;
                    x.percentNumber = parseFloat(mar.percent);
                });
            else {
                _this.dbData = data;
                _this.dbData.map(function (x) {
                    x.percentNumber = parseFloat(x.percent);
                });
            }
        };
    }
    Table2Component.prototype.ngOnInit = function () {
        // this.interval = interval(1000).subscribe(_ => {
        //   this.updateData();
        // })
        //     this.data1 = 1500;
        // 	this.dataT1 = [8150.05, 8131.74, 8196.65, 8016.49, 8037.97, 7944.31, 8006.76, 7898.73, 8049.92, 7871.69, 7797.70, 7823.34]
        // 	this.dataT2 = [167.33, 167.66, 168.65, 169.76, 170.43, 170.21, 169.34, 169.14, 168.43, 167.34, 168.70, 169.34]
        // 	this.dataT3 = [0.33, 1.66, 0.65, 0.76, 1.43, 1.21, 1.34, 1.14, 1.43, 1.34, 1.70, 1.34]
        // 	this.dataT1 = [8150.05, 8131.74, 8196.65, 8016.49, 8037.97, 7944.31, 8006.76, 7898.73, 8049.92, 7871.69, 7797.70, 7823.34]
        // 	this.dataT2 = [167.33, 167.66, 168.65, 169.76, 170.43, 170.21, 169.34, 169.14, 168.43, 167.34, 168.70, 169.34]
        // 	this.dataT3 = [0.33, 1.66, 0.65, 0.76, 1.43, 1.21, 1.34, 1.14, 1.43, 1.34, 1.70, 1.34]
        // 	this.btcPrice = [9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,9362.44, 9363.56, 9363.79, 9362.37, 9364.13, 9363.53, 9364.56, 9364.76, 9365.34, 9365.46,];
        // 	this.bchPrice = [299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55, 299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55,299.42, 298.55, 297.86, 296.45, 298.11, 297.55, 298.33, 297.42, 298.55];
        // 	this.ethPrice = [186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,186.51, 186.12, 185.78, 186.12, 185.33, 186.33, 185.12, 186.34, 185.34,];
        // 	this.trxPrice  = [0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,0.02192, 0.02212, 0.02197, 0.02213, 0.02193, 0.02210, 0.02237, 0.02258, 0.02210, 0.02186,];
        // 	this.xrpPrice = [0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,0.3033, 0.2973, 0.3012, 0.2983, 0.2997, 0.2912, 0.2987, 0.2910, 0.3075, 0.3019, 0.3134, 0.3014,];
        // 	this.btcMarketCapArrary = [165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,
        // 165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,165.55, 165.70, 165.75, 164.80, 165.23, 164.50, 165.12, 164.78, 165.89, 166.12,];
        //     setInterval(() => {
        // 	  this.dataT1 = this.randomData(1000, this.dataT1, false, 1);
        // 	  this.dataT2 = this.randomData6(1000, this.dataT2, false, 1);
        // 	  this.dataT3 = this.randomData7(1, this.dataT3, false, 1);
        //       this.btcPrice = this.randomData(1000, this.btcPrice, false, 2000);
        // 	  this.bchPrice = this.randomData2(1000, this.bchPrice, false, 2000);
        // 	  this.ethPrice = this.randomData3(1000, this.ethPrice, false, 2000);
        // 	  this.trxPrice = this.randomData4(1000, this.trxPrice, false, 2000);
        // 	  this.xrpPrice = this.randomData5(1000, this.xrpPrice, false, 2000);
        // 	  this.btcMarketCapArrary = this.btcMarketCapCalc(1000, this.btcMarketCapArrary, false, 2000);
        //     }, 1000);
    };
    // randomData(x, data: any[], isNew: boolean, val: number): any[] {
    //     for (let i = 0; i < val; i++) {
    //       isNew ? '' : data.shift();
    //          data.push((Math.random() * x + 100 * (Math.round(Math.random()) * 2 - 1
    //    ) + 7800).toFixed(2));
    //     }
    //     return data;
    // }
    // randomData2(y, data: any[], isNew: boolean, val: number): any[] {
    //     for (let j = 0; j < val; j++) {
    //       isNew ? '' : data.shift();
    //          data.push((Math.random() * j + 100 * (Math.round(Math.random()) * 2 - 1
    //    ) + 7800).toFixed(2));
    //     }
    //     return data;
    // }
    // randomData3(y, data: any[], isNew: boolean, val: number): any[] {
    //     for (let k = 0; k < val; k++) {
    //       isNew ? '' : data.shift();
    // 	data.push( this.ethPrice[k]);
    //     }
    //     return data;
    // }
    // randomData4(y, data: any[], isNew: boolean, val: number): any[] {
    //     for (let l = 0; l < val; l++) {
    //       isNew ? '' : data.shift();
    // 	data.push( this.trxPrice[l]);
    //     }
    //     return data;
    // }
    // randomData5(x, data: any[], isNew: boolean, val: number): any[] {
    //     for (let i = 0; i < val; i++) {
    //       isNew ? '' : data.shift();
    //          data.push((Math.random() * i + 100 * (Math.round(Math.random()) * 2 - 1
    //    ) + .010).toFixed(2));
    //     }
    //     return data;
    // }
    // randomData6(y, data: any[], isNew: boolean, val: number): any[] {
    //     for (let a = 0; a < val; a++) {
    //       isNew ? '' : data.shift();
    // 	data.push( (Math.random() * 1 + this.dataT2[a]))	;
    //     }
    //     return data;
    // }
    // randomData7(y, data: any[], isNew: boolean, val: number): any[] {
    //     for (let b = 0; b < val; b++) {
    //       isNew ? '' : data.shift();
    // 	data.push( (Math.random() * 1 + this.dataT3[b]))	;
    //     }
    //     return data;
    // }
    Table2Component.prototype.btcMarketCapCalc = function (y, data, isNew, val) {
        for (var n = 0; n < val; n++) {
            isNew ? '' : data.shift();
            data.push(this.btcMarketCapArrary[n]);
        }
        return data;
    };
    Table2Component.prototype.rv = function (x) {
        return Number.parseFloat((Math.random() * x).toFixed(2));
    };
    Table2Component.prototype.change = function (e) {
        // this.data1 = this.rv(10000);
        // this.dataT1 = this.randomData(1000, [], true, 12);
        //   this.btcPrice = this.randomData(1000, this.btcPrice, false, 2000);
        // this.bchPrice = this.randomData2(1000, this.bchPrice, false, 2000);
        // this.ethPrice = this.randomData3(1000, this.ethPrice, false, 2000);
        // this.trxPrice = this.randomData4(1000, this.trxPrice, false, 2000);
        // this.xrpPrice = this.randomData5(1000, this.xrpPrice, false, 2000);
        // this.btcMarketCapArrary = this.btcMarketCapCalc(1000, this.btcMarketCapArrary, false, 2000);
    };
    Table2Component.prototype.filter = function (col) {
        switch (col) {
            case 1:
                this.dbData.sort(function (a, b) {
                    if (a.name < b.name) {
                        return -1;
                    }
                    else
                        +1;
                });
                break;
            case 2:
                this.dbData.sort(function (a, b) { return b.price - a.price; });
                break;
            case 3:
                this.dbData.sort(function (a, b) { return b.marketCap - a.marketCap; });
                break;
            case 4:
                this.dbData.sort(function (a, b) { return b.volume - a.volume; });
                break;
            case 5:
                this.dbData.sort(function (a, b) { return b.supply - a.supply; });
                break;
            case 6:
                this.dbData.sort(function (a, b) { return b.percentNumber - a.percentNumber; });
                break;
        }
    };
    Table2Component.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
    };
    Table2Component.prototype.getData = function (idx, val) {
        return this.secondRowData[idx][val];
    };
    Table2Component.prototype.updateData = function () {
        var _this = this;
        this.secondRowData.map(function (val) {
            var random = (Math.random() * val.change);
            var newVal = val.value + (_this.trueOrFalse() ? random : -random);
            if (val.value > newVal) {
                val.arrow = "nb-arrow-dropdown";
                val.color = "red";
                val.percent = (val.value - newVal) / val.value * 100;
            }
            else {
                val.percent = (newVal - val.value) / val.value * 100;
                val.arrow = "nb-arrow-dropup";
                val.color = "#00ff39";
            }
            val.value = newVal;
            return val;
        });
    };
    Table2Component.prototype.trueOrFalse = function () {
        return Math.round(Math.random());
    };
    Table2Component = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-table2',
            template: __webpack_require__(/*! ./table2.component.html */ "./src/app/pages/trader-v/table2/table2.component.html"),
            styles: [__webpack_require__(/*! ./table2.component.scss */ "./src/app/pages/trader-v/table2/table2.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], Table2Component);
    return Table2Component;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/trader-v.component.html":
/*!********************************************************!*\
  !*** ./src/app/pages/trader-v/trader-v.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<style>\n  @import url('https://fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900&display=swap');\n  </style>\n    \n\n<nb-layout>\n  <nb-layout-header class=\"flex flexCenter platformHeader\">    \n\t<app-header></app-header>\n  </nb-layout-header>\n  <nb-layout-column class=\"p-0\" >\n\t<div class=\"traders-loading-card\" *ngIf=\"loadingSocket || initialLoading\"\n\t[nbSpinner]=\"loadingSocket || initialLoading\" nbSpinnerSize=\"large\" nbSpinnerMessage=\"Gathering live data...\"\n\t></div>\n\t<div class=\"reconnecting-card\" *ngIf=\"reconnecting\"\n\t[nbSpinner]=\"reconnecting\" nbSpinnerSize=\"large\" nbSpinnerMessage=\"Reconnecting you to the servers. Please wait...\"\n\t></div>\n    <!-- FIRST ROW -->\n    <nb-card class=\"mx-3 mt-3 mb-3 mt-md-3 mb-md-3\">\n      <nb-card-body class=\"flex justify-content-start justify-content-md-around justify-content-xl-between pt-0 pb-0\">\n\t    <iframe src=\"/assets/assets/html/widget1.html\" frameborder=\"0\" style=\"width: 100%; height: 60px;\"></iframe>\n      </nb-card-body>\n    </nb-card>\n\n    <div class=\"flex arrows-padding\">\t\t\n\n       <div class=\"col-12 col-md-6 col-lg-3\">\n\t\t  \n\t\t  <nb-flip-card>\n\t\t    <nb-card-front>\n\t\t      <nb-card class=\"mb-3 mb-md-3\">\n\t\t        <nb-card-body>\n\t              <p class=\"row-1-c-title\">Portfolio Balance <button nbTooltip=\"Displays your live portfolio balance. The percent is calculated using the current balance and the closing balance of the last 24 hours.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t              <h3 class=\"trader-text\" id=\"pbc\">${{balance.value | number:'.2'}}</h3>\n\t\t\t\t  <p class=\"flex-arrow\"\n\t\t\t\t  [ngClass]=\"(balance.percent<0)?'red':'green'\" \n\t\t\t\t  id=\"pbpc\">{{balance.percent}}%<i \n\t\t\t\t  [ngClass]=\"(balance.percent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" \n\t\t\t\t  ></i></p>\n\t\t        </nb-card-body>\n\t\t      </nb-card>\n\t\t    </nb-card-front>\n\t\t    <nb-card-back>\n\t\t\t  <nb-card class=\"mb-3 mb-md-3\">\t\t\t  \n\t\t\t        <nb-card-body class=\"nb-card-body-p0\">\n\t\t\t\t\t<p class=\"row-1-c-title p0-header\">PORTFOLIO SPLIT <button nbTooltip=\"Displays your portfolio balance in a pie chart. Clicking on a section of the pie chart displays information about the specific coin.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t          <app-ochart1new class=\"flex flex-vertical col-12 test-div2\" style=\"overflow-x: hidden; max-width: 100%;\"></app-ochart1new>\n\t\t\t        </nb-card-body>\n\t\t\t      </nb-card>\n\t\t    </nb-card-back>\n\t\t  </nb-flip-card>    \n\t\t  \n\t</div>\t\n\t\n\t<div class=\"col-12 col-md-6 col-lg-3\">\t\t  \n\t\t<nb-flip-card>\n\t\t  <nb-card-front>\n\t\t\t<nb-card class=\"mb-3 mb-md-3\">\n\t\t\t  <nb-card-body *ngIf=\"TotalMarketCap\" class=\"pb-total-market-cap\">\n\t\t\t\t<p class=\"row-1-c-title\">Total Market Cap <button nbTooltip=\"Displays the live total market cap of the top 100 coins (by market cap). The percent is calculated using the current market cap and the closing market cap of the last 24 hours.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t<h3 class=\"trader-text\" id=\"tmcc\">${{TotalMarketCap.value | shortNumber}}</h3>\n\t\t\t\t<p class=\"flex-arrow\" \n\t\t\t\t[ngClass]=\"(TotalMarketCap.percent<0)?'red':'green'\" \n\t\t\t\tid=\"tmcpc\"> {{TotalMarketCap.percent | number: '.2'}}%<i \n\t\t\t\t[ngClass]=\"(TotalMarketCap.percent<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" \n\t\t\t\t></i></p>\n\t\t\t  </nb-card-body>\n\t\t\t</nb-card>\n\t\t  </nb-card-front>\n\t\t  <nb-card-back>\n\t\t\t<nb-card *ngIf=\"TotalMarketCapArr\" class=\"mb-3 mb-md-3 pb-chart\">\t\t\t  \n\t\t\t\t  <nb-card-body class=\"nb-card-body-p0\">\n\t\t\t\t  <p class=\"row-1-c-title p0-header\">Total Market Cap <button nbTooltip=\"Displays the live total market cap of the top 100 coins (by market cap) in a line chart. The percent is calculated using the current market cap and the closing market cap of the last 24 hours.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t\t<app-flipchart2m [TotalMarketCap]=\"{obj:TotalMarketCap}\"  class=\"p-0 flex flex-vertical col-12\" style=\"overflow-x: hidden;\"></app-flipchart2m>\n\t\t\t\t  </nb-card-body>\n\t\t\t\t</nb-card>\n\t\t  </nb-card-back>\n\t\t</nb-flip-card>\n\t\t\n\t</div> \n\t\n\t<div class=\"col-12 col-md-6 col-lg-3\">\t  \n\t\t<nb-flip-card>\n\t\t  <nb-card-front>\n\t\t\t<nb-card class=\"mb-3 mb-md-3\">\n\t\t\t  <nb-card-body>\n\t\t\t\t<p class=\"row-1-c-title\">Total Volume <button nbTooltip=\"Displays the live total volume of the top 100 coins (by market cap). The percent is calculated using the current total volume and the closing total volume of the last 24 hours.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t<h3 class=\"trader-text\" id=\"tvc\">${{TotalVolume.value | shortNumber}}</h3>\n\t\t\t\t<p class=\"flex-arrow\" \n\t\t\t\t[ngClass]=\"(TotalVolume.percentNumber<0)?'red':'green'\" \n\t\t\t\tid=\"tvpc\">{{TotalVolume.percentNumber | number:'.2'}}%<i \n\t\t\t\t[ngClass]=\"(TotalVolume.percentNumber<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" \n\t\t\t\t></i></p>\n\t\t\t  </nb-card-body>\n\t\t\t</nb-card>\n\t\t  </nb-card-front>\n\t\t  <nb-card-back>\n\t\t\t<nb-card class=\"mb-2 mb-md-3\">\t\t\t  \n\t\t\t\t  <nb-card-body class=\"nb-card-body-p0\">\n\t\t\t\t  <p class=\"row-1-c-title p0-header\">TOTAL VOLUME <button nbTooltip=\"Displays the live total volume of the top 100 coins (by market cap) in a line chart. The percent is calculated using the current total volume and the closing total volume of the last 24 hours.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t\t<app-flipchart3m class=\"p-0 flex flex-vertical col-12\" style=\"overflow-x: hidden;\"></app-flipchart3m>\n\t\t\t\t  </nb-card-body>\n\t\t\t\t</nb-card>\n\t\t  </nb-card-back>\n\t\t</nb-flip-card>\n\t</div>\n\n\n\t<div class=\"col-12 col-md-6 col-lg-3\">\t\t  \n\t\t<nb-flip-card>\n\t\t  <nb-card-front>\n\t\t\t<nb-card class=\"mb-3 mb-md-3\">\n\t\t\t  <nb-card-body>\n\t\t\t\t<p class=\"row-1-c-title\">Market Dominance <button nbTooltip=\"Displays the market dominance of Bitcoin versus the other top 99 coins (by market cap).\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t<h3 class=\"trader-text\" id=\"mdc\">{{MarketDominance.BTCDominance}}</h3>\n\t\t\t\t<p class=\"flex-arrow\"  \n\t\t\t\t\n\t\t\t\t[ngClass]=\"(MarketDominance.percentNumber<0)?'red':'green'\" \n\t\t\t\t  \n\t\t\t\t  \n\t\t\t\tid=\"mdpc\">{{MarketDominance.percent}}<i [ngClass]=\"(MarketDominance.percentNumber<0)?'nb-arrow-dropdown':'nb-arrow-dropup'\" ></i></p>\n\t\t\t  </nb-card-body>\n\t\t\t</nb-card>\n\t\t  </nb-card-front>\n\t\t  <nb-card-back>\n\t\t\t<nb-card class=\"mb-3 mb-md-3\">\t\t\t  \n\t\t\t\t  <nb-card-body class=\"nb-card-body-p0\" id=\"triangle-width\">\n\t\t\t\t\t\t\t\t\t  <p class=\"row-1-c-title p0-header\">MARKET DOMINANCE <button nbTooltip=\"Displays the market dominance of Bitcoin versus the other top 99 coins (by market cap).\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button></p>\n\t\t\t\t\t\t\t\t\t\t<div class=\"market-dominance-bar\">\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t<div class=\"md-bar-outer flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"md-bar-triangle\" [ngStyle]=\"{'left': MarketDominance.BTCDominance}\"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"md-bar-left\" [ngStyle]=\"{'width': MarketDominance.BTCDominance}\">\n\t\t\t\t\t\t\t\t\t\t\t\t  <div class=\"md-bar-text\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {{MarketDominance.BTCDominance}}\n\t\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t\t  <div class=\"barSubTitle\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  Bitcoin\n\t\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"md-bar-right\" [ngStyle]=\"{'width':MarketDominance.otherCoins}\">\n\t\t\t\t\t\t\t\t\t\t\t\t  <div class=\"md-bar-text\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {{MarketDominance.otherCoins}}\n\t\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t\t  <div class=\"barSubTitle\" style=\"right: 0 !important\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  Alt coins\n\t\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</nb-card-body>\n\t\t\t\t</nb-card>\n\t\t  </nb-card-back>\n\t\t</nb-flip-card>\n\n\t</div> \n\n\n    </div>\n\t\n\t<!-- THIRD ROW -->\n\n\t <div class=\"flex\">\n\n\t\t<div class=\"col-12 col-xl-6 class flex p-0\">\n  \n\t\t    <div class=\"col-12 col-md-6 mb-3 mb-xl-3\">\n\t\t\t  \n\t\t\t<app-chart1m class=\"trader-Chart1m\"></app-chart1m>\n\t\t  </div>\n\t\t<div class=\"col-12 col-md-6 mb-3 mb-xl-0\">\n\t\t\t<app-chart2m class=\"trader-Chart2m\" (changed)=\"changeSelection($event)\"></app-chart2m>\n\t\t  </div>\n\t\t   \n\t\t  <div class=\"col-12 mt--3 mt-md-0 mb-3 mb-xl-0\" style=\"height: 360px;\">\n\t\t\t\n\t\t\t<nb-card class=\"f-h\" style=\"overflow: hidden;\">\n\t\t\t  <nb-card-header class=\"p-2\">\n\t\t\t\t<div class=\"flex\" style=\"justify-content: space-between; align-items: center;\">\n\t\t\t\n\t\t\t\t  <div class=\"col-6\">\n\t\t\t\t\tLive Trades <button nbTooltip=\"Displays the live trades being executed across multiple exchanges for the selected coin.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\n\t\t\t\t  </div>\n\t\t\t\n\t\t\t\t  <nb-select selected=\"BTC\" class=\"button-width p-0 text-right transparent\"\n\t\t\t\t  (selectedChange)=\"changeLiveTrades($event)\"\n\t\t\t\t  >\n\t\t\t\t\t<nb-option value=\"BTC\">BTC</nb-option>\n\t\t\t\t\t<nb-option value=\"XRP\">XRP</nb-option>\n\t\t\t\t\t<nb-option value=\"ETH\">ETH</nb-option>\n\t\t\t\t\t<nb-option value=\"LTC\">LTC</nb-option>\n\t\t\t\t  </nb-select>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t  </nb-card-header>\n\n\t\t\t  <nb-card-body id=\"table-live-trades\" class=\"p-1 p-md-3\" style=\"overflow: auto !important;\"\n\t\t\t *ngIf=\"fsym==='BTC'\" \n\t\t\t  >    \n\t\t\t  \n\t\t\t  <div class=\"flex py-3 flex-row\" *ngFor=\"let row of btcTrade\" >\n\t\t\t  \n\t\t\t\n\t\t\t  <span class=\"col-18 flex-vertical\" style=\"line-height: 0;\"><span class=\"coinImage\">\n\t\t\t\t  <img class=\"coinImg\" src=\"../../../assets/{{row.Coin}}.svg\"/></span><span class=\"row-coin\">{{ row.Coin }}</span></span>\n\t\t\t  <span class=\"col-18\" [ngClass]=\"{'green': row.Type === 'BUY', 'red': row.Type !== 'BUY' }\">\n\t\t\t\t<span [ngClass]=\"{'nb-arrow-dropup': row.Type === 'BUY', 'nb-arrow-dropdown': row.Type !== 'BUY' }\"></span>\n\t\t\t\t<span>{{ row.Type }}</span>\n\t\t\t  </span>\t\n\t\t\t\t<span class=\"col-19\">{{ row.Price }}</span>\n\t\t\t\t<span class=\"col-21\">{{ row.Market | uppercase }}</span>\n\t\t\t\t<span class=\"col-24\">a few seconds ago</span> \n\t\t\t  </div>\n\t\t\t\t\n\t\t\t  </nb-card-body>\n\n\t\t\t  <nb-card-body id=\"table-live-trades\" class=\"p-1 p-md-3\" style=\"overflow: auto !important;\"\n\t\t\t *ngIf=\"fsym==='XRP'\" \n\t\t\t  >    \n\t\t\t  \n\t\t\t  <div class=\"flex py-3 flex-row\" *ngFor=\"let row of xrpTrade\" >\n\t\t\t  \n\t\t\t\n\t\t\t  <span class=\"col-18 flex-vertical\" style=\"line-height: 0;\"><span class=\"coinImage\">\n\t\t\t\t  <img class=\"coinImg\" src=\"../../../assets/{{row.Coin}}.svg\"/></span><span class=\"row-coin\">{{ row.Coin }}</span></span>\n\t\t\t  <span class=\"col-18\" [ngClass]=\"{'green': row.Type === 'BUY', 'red': row.Type !== 'BUY' }\">\n\t\t\t\t<span [ngClass]=\"{'nb-arrow-dropup': row.Type === 'BUY', 'nb-arrow-dropdown': row.Type !== 'BUY' }\"></span>\n\t\t\t\t<span>{{ row.Type }}</span>\n\t\t\t  </span>\t\n\t\t\t\t<span class=\"col-19\">{{ row.Price }}</span>\n\t\t\t\t<span class=\"col-21\">{{ row.Market | uppercase }}</span>\n\t\t\t\t<span class=\"col-24\">a few seconds ago</span> \n\t\t\t  </div>\n\t\t\t\t\n\t\t\t  </nb-card-body>\n\n\t\t\t  <nb-card-body id=\"table-live-trades\" class=\"p-1 p-md-3\" style=\"overflow: auto !important;\"\n\t\t\t *ngIf=\"fsym==='ETH'\" \n\t\t\t  >    \n\t\t\t  \n\t\t\t  <div class=\"flex py-3 flex-row\" *ngFor=\"let row of ethTrade\" >\n\t\t\t  \n\t\t\t\n\t\t\t  <span class=\"col-18 flex-vertical\" style=\"line-height: 0;\"><span class=\"coinImage\">\n\t\t\t\t  <img class=\"coinImg\" src=\"../../../assets/{{row.Coin}}.svg\"/></span><span class=\"row-coin\">{{ row.Coin }}</span></span>\n\t\t\t  <span class=\"col-18\" [ngClass]=\"{'green': row.Type === 'BUY', 'red': row.Type !== 'BUY' }\">\n\t\t\t\t<span [ngClass]=\"{'nb-arrow-dropup': row.Type === 'BUY', 'nb-arrow-dropdown': row.Type !== 'BUY' }\"></span>\n\t\t\t\t<span>{{ row.Type }}</span>\n\t\t\t  </span>\t\n\t\t\t\t<span class=\"col-19\">{{ row.Price }}</span>\n\t\t\t\t<span class=\"col-21\">{{ row.Market | uppercase }}</span>\n\t\t\t\t<span class=\"col-24\">a few seconds ago</span> \n\t\t\t  </div>\n\t\t\t\t\n\t\t\t  </nb-card-body>\n\n\t\t\t  <nb-card-body id=\"table-live-trades\" class=\"p-1 p-md-3\" style=\"overflow: auto !important;\"\n\t\t\t *ngIf=\"fsym==='LTC'\" \n\t\t\t  >    \n\t\t\t  \n\t\t\t  <div class=\"flex py-3 flex-row\" *ngFor=\"let row of ltcTrade\" >\n\t\t\t  \n\t\t\t\n\t\t\t  <span class=\"col-18 flex-vertical\" style=\"line-height: 0;\"><span class=\"coinImage\">\n\t\t\t\t  <img class=\"coinImg\" src=\"../../../assets/{{row.Coin}}.svg\"/></span><span class=\"row-coin\">{{ row.Coin }}</span></span>\n\t\t\t  <span class=\"col-18\" [ngClass]=\"{'green': row.Type === 'BUY', 'red': row.Type !== 'BUY' }\">\n\t\t\t\t<span [ngClass]=\"{'nb-arrow-dropup': row.Type === 'BUY', 'nb-arrow-dropdown': row.Type !== 'BUY' }\"></span>\n\t\t\t\t<span>{{ row.Type }}</span>\n\t\t\t  </span>\t\n\t\t\t\t<span class=\"col-19\">{{ row.Price }}</span>\n\t\t\t\t<span class=\"col-21\">{{ row.Market | uppercase }}</span>\n\t\t\t\t<span class=\"col-24\">a few seconds ago</span> \n\t\t\t  </div>\n\t\t\t\t\n\t\t\t  </nb-card-body>\n\n\t\t\t</nb-card>\n\t\t  </div> \n\t\t</div>\n\t\t<div class=\"col-12 col-xl-6 p-0\">\n\t\t\t<div class=\"col-12 f-h\">\n\t\t\t  <app-chart3m (m3changed)=\"changec3mSelection($event)\"></app-chart3m>\n\t\t\t</div>\n\t\t  </div>\n\t</div> \n <!-- FOURTH ROW -->\n<div class=\"flex\">\n\n\t<div class=\"col-12 col-lg-6\">\n\t  <app-chart4new class=\"chart4selector\" (c4Changed)=\"changec4Selection($event)\"></app-chart4new>\n\t</div>\n \n\n\t<div class=\"col-12 col-lg-6\">\n\t  <app-chart5></app-chart5>\n\t</div>\n\n  </div> \n  <!-- FIFTH ROW -->\n  \t <div class=\"flex\">\n\n\t\t<div class=\"col-12 col-xl-8 mb-3\">\n\t\t<app-table2></app-table2>\n\t\t</div>\n\n\t\t<div class=\"col-12 col-xl-4 p-0 flex flex-direction-fix\">\n\n\t\t\t<div class=\"col-12 col-md-6 col-xl-12\">\n\t\t\t  <nb-card class=\"mb-3\">\n\t\t\t\t<nb-card-header>\n\t\t\t\t  Crypto Conversion <button nbTooltip=\"A tool that will convert the entered amount of a coin into fiat.\" nbTooltipStatus=\"primary\" class=\"fal fa-question-circle ml-1 nbButtonIcon\"></button>\n\t\t\t\t</nb-card-header>\n\t\t\t\t<nb-card-body id=\"cont-sum-fields\" [nbSpinner]=\"convertingValues\" nbSpinnerMessage=\"Calculating...\">\n\t\t\t\t  <div class=\"flex mb-4\" id=\"inputVal\">\n\t\t\t\t\t<nb-select class=\"conversion col-4 p-0\" \n\t\t\t\t\t[selected]=\"coinSelected\" (selectedChange)=\"changeCoin($event, coinCount.value)\"\n\t\t\t\t\t>\n\t\t\t\t\t  <nb-option value=\"BTC\">BTC</nb-option>\n\t\t\t\t\t  <nb-option value=\"XRP\">XRP</nb-option>\n\t\t\t\t\t  <nb-option value=\"ETH\">ETH</nb-option>\n\t\t\t\t\t  <nb-option value=\"LTC\">LTC</nb-option>\n\t\t\t\t\t</nb-select>\n\t\t\t\t\t<input type=\"number\" (keyup)=\"convertValues(coinCount.value)\" #coinCount class=\"col-8 conversion-input\" id=\"count-sum\" fieldSize=\"large\" nbInput>\n\t\t\t\t  </div>\n\t\n\t\t\t\t  <div class=\"flex\" id=\"resultCalc\">\n\t\t\t\t\t<nb-select  class=\"conversion col-4 p-0\" \n\t\t\t\t\t[selected]=\"currencySelected\" (selectedChange)=\"changeCurrency($event, coinCount.value)\"\n\t\t\t\t\t>\n\t\t\t\t\t  <nb-option value=\"USD\">USD</nb-option>\n\t\t\t\t\t  <nb-option value=\"GBP\">GBP</nb-option>\n\t\t\t\t\t  <nb-option value=\"EUR\">EUR</nb-option>\n\t\t\t\t\t  <nb-option value=\"KRW\">KRW</nb-option>\n\t\t\t\t\t</nb-select>\n\t\t\t\t\t<input type=\"text\" [value]=\"convertedValue\" class=\"col-8 conversion-input2\" id=\"totalPrice\" fieldSize=\"large\" nbInput disabled>\n\t\t\t\t  </div>\n\t\t\t\t</nb-card-body>\n\t\t\t  </nb-card>\n\t\t\t</div>\n\t\n\t\t\t<div class=\"col-12 col-md-6 col-xl-12\">\n\t\t\t  <app-chart6 (c6Changed)=\"changec6Selection($event)\"></app-chart6>\n\t\t\t</div>\n\t\n\t\t  </div>\n\n\t</div> \n  </nb-layout-column>\n  <nb-layout-footer class=\"footer-main\">\n\t  &copy; 2021 Powered by <a target=\"_blank\" class=\"wzrdgroup-link\" href=\"http://wzrdgroup.com/\">WZRD Group</a>\n\t</nb-layout-footer>\n</nb-layout>"

/***/ }),

/***/ "./src/app/pages/trader-v/trader-v.component.scss":
/*!********************************************************!*\
  !*** ./src/app/pages/trader-v/trader-v.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep td {\n  border-right: 2px solid; }\n.nb-theme-default :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid; }\n.nb-theme-default :host ::ng-deep thead td {\n  background-color: !important;\n  border-right: 2px solid; }\n.nb-theme-default :host ::ng-deep nb-card.select.primary {\n  border: 2px solid; }\n.nb-theme-default :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-default :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-default :host ::ng-deep nb-card {\n  box-shadow: 0 2px 12px 0 #dfe3eb; }\n.nb-theme-default :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid; }\n.nb-theme-default :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid;\n  text-transform: uppercase; }\n.nb-theme-default :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-default :host ::ng-deep nb-datepicker-container {\n  border: 2px solid; }\n.nb-theme-default :host ::ng-deep .alert-modal-content {\n  background: !important;\n  background-color: !important; }\n.nb-theme-default :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-default :host .platformHeader {\n  background: #ffffff;\n  z-index: 999999999999; }\n.nb-theme-default :host .footer-main {\n  background: #ffffff;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-default :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-default :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host ::ng-deep .dark-row {\n  background-color: #2f296b; }\n.nb-theme-cosmic :host ::ng-deep td {\n  border-right: 2px solid #3d3780; }\n.nb-theme-cosmic :host ::ng-deep .nb-chevron-up,\n.nb-theme-cosmic :host ::ng-deep .nb-chevron-down {\n  color: #3d3780; }\n.nb-theme-cosmic :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #342e73; }\n.nb-theme-cosmic :host ::ng-deep thead td {\n  background-color: #7659ff !important;\n  border-right: 2px solid #3d3780; }\n.nb-theme-cosmic :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-cosmic :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary {\n  background: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-cosmic :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-cosmic :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #a1a1e5; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #836bff; }\n.nb-theme-cosmic :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep nb-card.select nb-option {\n  background: #3d3780;\n  color: #d1d1ff; }\n.nb-theme-cosmic :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-cosmic :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-cosmic :host ::ng-deep nb-card {\n  background: #3d3780;\n  box-shadow: 0 8px 20px 0 rgba(40, 37, 89, 0.6);\n  color: #d1d1ff; }\n.nb-theme-cosmic :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #342e73; }\n.nb-theme-cosmic :host ::ng-deep [nbButton]:hover, .nb-theme-cosmic :host ::ng-deep [nbButton].hover {\n  background: #836bff; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #7659ff;\n  text-transform: uppercase; }\n.nb-theme-cosmic :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-cosmic :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #836bff; }\n.nb-theme-cosmic :host ::ng-deep [nbInput] {\n  background-color: #2f2879; }\n.nb-theme-cosmic :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-cosmic :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #7659ff; }\n.nb-theme-cosmic :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #332e73; }\n.nb-theme-cosmic :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #332e73; }\n.nb-theme-cosmic :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #332e73; }\n.nb-theme-cosmic :host ::ng-deep .alert-modal-content {\n  background: #3d3780 !important;\n  background-color: #3d3780 !important; }\n.nb-theme-cosmic :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-cosmic :host .platformHeader {\n  background: #3d3780;\n  z-index: 999999999999; }\n.nb-theme-cosmic :host .footer-main {\n  background: #3d3780;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-cosmic :host .trader-text {\n  color: #c198fb; }\n.nb-theme-cosmic :host .profit-date {\n  color: #c198fb; }\n.nb-theme-cosmic :host .conversion-input, .nb-theme-cosmic :host .conversion-input2 {\n  caret-color: #3d3780;\n  background-color: #2f2879;\n  color: #fff; }\n.nb-theme-cosmic :host .conversion-input:focus {\n  background-color: #2f2879;\n  color: #fff; }\n.nb-theme-cosmic :host .wzrdgroup-link {\n  color: #d1d1ff; }\n.nb-theme-cosmic :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-cosmic :host nb-tooltip.primary-tooltip {\n  background-color: #7659ff; }\n.nb-theme-cosmic :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #7659ff; }\n.nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-cosmic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep td {\n  border-right: 2px solid; }\n.nb-theme-corporate :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid; }\n.nb-theme-corporate :host ::ng-deep thead td {\n  background-color: !important;\n  border-right: 2px solid; }\n.nb-theme-corporate :host ::ng-deep nb-card.select.primary {\n  border: 2px solid; }\n.nb-theme-corporate :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-corporate :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-corporate :host ::ng-deep nb-card {\n  box-shadow: 0 2px 12px 0 #dfe3eb; }\n.nb-theme-corporate :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid; }\n.nb-theme-corporate :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid;\n  text-transform: uppercase; }\n.nb-theme-corporate :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-corporate :host ::ng-deep nb-datepicker-container {\n  border: 2px solid; }\n.nb-theme-corporate :host ::ng-deep .alert-modal-content {\n  background: !important;\n  background-color: !important; }\n.nb-theme-corporate :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-corporate :host .platformHeader {\n  background: #111218;\n  z-index: 999999999999; }\n.nb-theme-corporate :host .footer-main {\n  background: #111218;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-corporate :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-corporate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Far_Above :host ::ng-deep .dark-row {\n  background-color: #20434b; }\n.nb-theme-Far_Above :host ::ng-deep td {\n  border-right: 2px solid #2c5c66; }\n.nb-theme-Far_Above :host ::ng-deep .nb-chevron-up,\n.nb-theme-Far_Above :host ::ng-deep .nb-chevron-down {\n  color: #2c5c66; }\n.nb-theme-Far_Above :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #20535e; }\n.nb-theme-Far_Above :host ::ng-deep thead td {\n  background-color: #4d8793 !important;\n  border-right: 2px solid #2c5c66; }\n.nb-theme-Far_Above :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Far_Above :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary {\n  background: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Far_Above :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Far_Above :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #a4dae6; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #6496a0; }\n.nb-theme-Far_Above :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep nb-card.select nb-option {\n  background: #2c5c66;\n  color: #5fcbe2; }\n.nb-theme-Far_Above :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Far_Above :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Far_Above :host ::ng-deep nb-card {\n  background: #2c5c66;\n  box-shadow: 0 8px 20px 0 rgba(22, 45, 50, 0.6);\n  color: #5fcbe2; }\n.nb-theme-Far_Above :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #20535e; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton]:hover, .nb-theme-Far_Above :host ::ng-deep [nbButton].hover {\n  background: #6496a0; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #4d8793;\n  text-transform: uppercase; }\n.nb-theme-Far_Above :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Far_Above :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #6496a0; }\n.nb-theme-Far_Above :host ::ng-deep [nbInput] {\n  background-color: #244c55; }\n.nb-theme-Far_Above :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Far_Above :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #34717d; }\n.nb-theme-Far_Above :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #34717d; }\n.nb-theme-Far_Above :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #34717d; }\n.nb-theme-Far_Above :host ::ng-deep .alert-modal-content {\n  background: #2c5c66 !important;\n  background-color: #2c5c66 !important; }\n.nb-theme-Far_Above :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Far_Above :host .platformHeader {\n  background: #2c5c66;\n  z-index: 999999999999; }\n.nb-theme-Far_Above :host .footer-main {\n  background: #2c5c66;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Far_Above :host .trader-text {\n  color: #326d79; }\n.nb-theme-Far_Above :host .profit-date {\n  color: #326d79; }\n.nb-theme-Far_Above :host .conversion-input, .nb-theme-Far_Above :host .conversion-input2 {\n  caret-color: #2c5c66;\n  background-color: #244c55;\n  color: #fff; }\n.nb-theme-Far_Above :host .conversion-input:focus {\n  background-color: #244c55;\n  color: #fff; }\n.nb-theme-Far_Above :host .wzrdgroup-link {\n  color: #5fcbe2; }\n.nb-theme-Far_Above :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Far_Above :host nb-tooltip.primary-tooltip {\n  background-color: #4d8793; }\n.nb-theme-Far_Above :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #4d8793; }\n.nb-theme-Far_Above :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Far_Above :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Far_Above :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Far_Above :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Vortex :host ::ng-deep .dark-row {\n  background-color: #25101b; }\n.nb-theme-Vortex :host ::ng-deep td {\n  border-right: 2px solid #301523; }\n.nb-theme-Vortex :host ::ng-deep .nb-chevron-up,\n.nb-theme-Vortex :host ::ng-deep .nb-chevron-down {\n  color: #301523; }\n.nb-theme-Vortex :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #24101a; }\n.nb-theme-Vortex :host ::ng-deep thead td {\n  background-color: #6d3150 !important;\n  border-right: 2px solid #301523; }\n.nb-theme-Vortex :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Vortex :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary {\n  background: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Vortex :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Vortex :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #dabbcb; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #7f4c67; }\n.nb-theme-Vortex :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep nb-card.select nb-option {\n  background: #301523;\n  color: #cb8cad; }\n.nb-theme-Vortex :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Vortex :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Vortex :host ::ng-deep nb-card {\n  background: #301523;\n  box-shadow: 0 8px 20px 0 rgba(24, 10, 17, 0.6);\n  color: #cb8cad; }\n.nb-theme-Vortex :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #24101a; }\n.nb-theme-Vortex :host ::ng-deep [nbButton]:hover, .nb-theme-Vortex :host ::ng-deep [nbButton].hover {\n  background: #7f4c67; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #6d3150;\n  text-transform: uppercase; }\n.nb-theme-Vortex :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Vortex :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #7f4c67; }\n.nb-theme-Vortex :host ::ng-deep [nbInput] {\n  background-color: #29121e; }\n.nb-theme-Vortex :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Vortex :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #6d3150; }\n.nb-theme-Vortex :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #6c2f4f; }\n.nb-theme-Vortex :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #6c2f4f; }\n.nb-theme-Vortex :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #6c2f4f; }\n.nb-theme-Vortex :host ::ng-deep .alert-modal-content {\n  background: #301523 !important;\n  background-color: #301523 !important; }\n.nb-theme-Vortex :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Vortex :host .platformHeader {\n  background: #301523;\n  z-index: 999999999999; }\n.nb-theme-Vortex :host .footer-main {\n  background: #301523;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Vortex :host .trader-text {\n  color: #692e4d; }\n.nb-theme-Vortex :host .profit-date {\n  color: #692e4d; }\n.nb-theme-Vortex :host .conversion-input, .nb-theme-Vortex :host .conversion-input2 {\n  caret-color: #301523;\n  background-color: #29121e;\n  color: #fff; }\n.nb-theme-Vortex :host .conversion-input:focus {\n  background-color: #29121e;\n  color: #fff; }\n.nb-theme-Vortex :host .wzrdgroup-link {\n  color: #cb8cad; }\n.nb-theme-Vortex :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Vortex :host nb-tooltip.primary-tooltip {\n  background-color: #6d3150; }\n.nb-theme-Vortex :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #6d3150; }\n.nb-theme-Vortex :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Vortex :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Vortex :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Vortex :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Fireball :host ::ng-deep .dark-row {\n  background-color: #6b3928; }\n.nb-theme-Fireball :host ::ng-deep td {\n  border-right: 2px solid #8b4a34; }\n.nb-theme-Fireball :host ::ng-deep .nb-chevron-up,\n.nb-theme-Fireball :host ::ng-deep .nb-chevron-down {\n  color: #8b4a34; }\n.nb-theme-Fireball :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #753e2c; }\n.nb-theme-Fireball :host ::ng-deep thead td {\n  background-color: #aa583d !important;\n  border-right: 2px solid #8b4a34; }\n.nb-theme-Fireball :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Fireball :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary {\n  background: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Fireball :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Fireball :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #edccc0; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #b36e57; }\n.nb-theme-Fireball :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep nb-card.select nb-option {\n  background: #8b4a34;\n  color: #f1ae97; }\n.nb-theme-Fireball :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Fireball :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Fireball :host ::ng-deep nb-card {\n  background: #8b4a34;\n  box-shadow: 0 8px 20px 0 rgba(68, 36, 25, 0.6);\n  color: #f1ae97; }\n.nb-theme-Fireball :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #753e2c; }\n.nb-theme-Fireball :host ::ng-deep [nbButton]:hover, .nb-theme-Fireball :host ::ng-deep [nbButton].hover {\n  background: #b36e57; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #aa583d;\n  text-transform: uppercase; }\n.nb-theme-Fireball :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Fireball :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #b36e57; }\n.nb-theme-Fireball :host ::ng-deep [nbInput] {\n  background-color: #78402d; }\n.nb-theme-Fireball :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Fireball :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #aa583d; }\n.nb-theme-Fireball :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #ab573b; }\n.nb-theme-Fireball :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #ab573b; }\n.nb-theme-Fireball :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #ab573b; }\n.nb-theme-Fireball :host ::ng-deep .alert-modal-content {\n  background: #8b4a34 !important;\n  background-color: #8b4a34 !important; }\n.nb-theme-Fireball :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Fireball :host .platformHeader {\n  background: #8b4a34;\n  z-index: 999999999999; }\n.nb-theme-Fireball :host .footer-main {\n  background: #8b4a34;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Fireball :host .trader-text {\n  color: #a65439; }\n.nb-theme-Fireball :host .profit-date {\n  color: #a65439; }\n.nb-theme-Fireball :host .conversion-input, .nb-theme-Fireball :host .conversion-input2 {\n  caret-color: #8b4a34;\n  background-color: #78402d;\n  color: #fff; }\n.nb-theme-Fireball :host .conversion-input:focus {\n  background-color: #78402d;\n  color: #fff; }\n.nb-theme-Fireball :host .wzrdgroup-link {\n  color: #f1ae97; }\n.nb-theme-Fireball :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Fireball :host nb-tooltip.primary-tooltip {\n  background-color: #aa583d; }\n.nb-theme-Fireball :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #aa583d; }\n.nb-theme-Fireball :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Fireball :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Fireball :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Fireball :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Hex_World :host ::ng-deep .dark-row {\n  background-color: #1c1c1c; }\n.nb-theme-Hex_World :host ::ng-deep td {\n  border-right: 2px solid #282828; }\n.nb-theme-Hex_World :host ::ng-deep .nb-chevron-up,\n.nb-theme-Hex_World :host ::ng-deep .nb-chevron-down {\n  color: #282828; }\n.nb-theme-Hex_World :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #212121; }\n.nb-theme-Hex_World :host ::ng-deep thead td {\n  background-color: #636161 !important;\n  border-right: 2px solid #282828; }\n.nb-theme-Hex_World :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Hex_World :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #636161; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary {\n  background: #636161; }\n.nb-theme-Hex_World :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Hex_World :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Hex_World :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #cccccc; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #777575; }\n.nb-theme-Hex_World :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #636161; }\n.nb-theme-Hex_World :host ::ng-deep nb-card.select nb-option {\n  background: #282828;\n  color: #afaeae; }\n.nb-theme-Hex_World :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Hex_World :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Hex_World :host ::ng-deep nb-card {\n  background: #282828;\n  box-shadow: 0 8px 20px 0 rgba(20, 20, 20, 0.6);\n  color: #afaeae; }\n.nb-theme-Hex_World :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #212121; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton]:hover, .nb-theme-Hex_World :host ::ng-deep [nbButton].hover {\n  background: #777575; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #636161;\n  text-transform: uppercase; }\n.nb-theme-Hex_World :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Hex_World :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #777575; }\n.nb-theme-Hex_World :host ::ng-deep [nbInput] {\n  background-color: #202020; }\n.nb-theme-Hex_World :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Hex_World :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #636161; }\n.nb-theme-Hex_World :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #525252; }\n.nb-theme-Hex_World :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #525252; }\n.nb-theme-Hex_World :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #525252; }\n.nb-theme-Hex_World :host ::ng-deep .alert-modal-content {\n  background: #282828 !important;\n  background-color: #282828 !important; }\n.nb-theme-Hex_World :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #636161; }\n.nb-theme-Hex_World :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #636161; }\n.nb-theme-Hex_World :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Hex_World :host .platformHeader {\n  background: #282828;\n  z-index: 999999999999; }\n.nb-theme-Hex_World :host .footer-main {\n  background: #282828;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Hex_World :host .trader-text {\n  color: #4f4f4f; }\n.nb-theme-Hex_World :host .profit-date {\n  color: #4f4f4f; }\n.nb-theme-Hex_World :host .conversion-input, .nb-theme-Hex_World :host .conversion-input2 {\n  caret-color: #282828;\n  background-color: #202020;\n  color: #fff; }\n.nb-theme-Hex_World :host .conversion-input:focus {\n  background-color: #202020;\n  color: #fff; }\n.nb-theme-Hex_World :host .wzrdgroup-link {\n  color: #afaeae; }\n.nb-theme-Hex_World :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Hex_World :host nb-tooltip.primary-tooltip {\n  background-color: #636161; }\n.nb-theme-Hex_World :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #636161; }\n.nb-theme-Hex_World :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Hex_World :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Hex_World :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Hex_World :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Formula_of_Life :host ::ng-deep .dark-row {\n  background-color: #4d4433; }\n.nb-theme-Formula_of_Life :host ::ng-deep td {\n  border-right: 2px solid #665c45; }\n.nb-theme-Formula_of_Life :host ::ng-deep .nb-chevron-up,\n.nb-theme-Formula_of_Life :host ::ng-deep .nb-chevron-down {\n  color: #665c45; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #4a4231; }\n.nb-theme-Formula_of_Life :host ::ng-deep thead td {\n  background-color: #84785c !important;\n  border-right: 2px solid #665c45; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Formula_of_Life :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary {\n  background: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Formula_of_Life :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Formula_of_Life :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d8cfb9; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #938971; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card.select nb-option {\n  background: #665c45;\n  color: #c7b489; }\n.nb-theme-Formula_of_Life :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card {\n  background: #665c45;\n  box-shadow: 0 8px 20px 0 rgba(50, 45, 34, 0.6);\n  color: #c7b489; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #4a4231; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton]:hover, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].hover {\n  background: #938971; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #84785c;\n  text-transform: uppercase; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Formula_of_Life :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #938971; }\n.nb-theme-Formula_of_Life :host ::ng-deep [nbInput] {\n  background-color: #564d39; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #4e4633; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #4e4633; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #4e4633; }\n.nb-theme-Formula_of_Life :host ::ng-deep .alert-modal-content {\n  background: #665c45 !important;\n  background-color: #665c45 !important; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Formula_of_Life :host .platformHeader {\n  background: #665c45;\n  z-index: 999999999999; }\n.nb-theme-Formula_of_Life :host .footer-main {\n  background: #665c45;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Formula_of_Life :host .trader-text {\n  color: #4c4431; }\n.nb-theme-Formula_of_Life :host .profit-date {\n  color: #4c4431; }\n.nb-theme-Formula_of_Life :host .conversion-input, .nb-theme-Formula_of_Life :host .conversion-input2 {\n  caret-color: #665c45;\n  background-color: #564d39;\n  color: #fff; }\n.nb-theme-Formula_of_Life :host .conversion-input:focus {\n  background-color: #564d39;\n  color: #fff; }\n.nb-theme-Formula_of_Life :host .wzrdgroup-link {\n  color: #c7b489; }\n.nb-theme-Formula_of_Life :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Formula_of_Life :host nb-tooltip.primary-tooltip {\n  background-color: #84785c; }\n.nb-theme-Formula_of_Life :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #84785c; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Formula_of_Life :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Formula_of_Life :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Formula_of_Life :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Connection :host ::ng-deep .dark-row {\n  background-color: #0d2032; }\n.nb-theme-Connection :host ::ng-deep td {\n  border-right: 2px solid #112940; }\n.nb-theme-Connection :host ::ng-deep .nb-chevron-up,\n.nb-theme-Connection :host ::ng-deep .nb-chevron-down {\n  color: #112940; }\n.nb-theme-Connection :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #0e2133; }\n.nb-theme-Connection :host ::ng-deep thead td {\n  background-color: #254462 !important;\n  border-right: 2px solid #112940; }\n.nb-theme-Connection :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #254462; }\n.nb-theme-Connection :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Connection :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #254462; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-primary {\n  background: #254462; }\n.nb-theme-Connection :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Connection :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Connection :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #b7c9db; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Connection :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Connection :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #425d76; }\n.nb-theme-Connection :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #254462; }\n.nb-theme-Connection :host ::ng-deep nb-card.select nb-option {\n  background: #112940;\n  color: #84a9cd; }\n.nb-theme-Connection :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Connection :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Connection :host ::ng-deep nb-card {\n  background: #112940;\n  box-shadow: 0 8px 20px 0 rgba(8, 20, 31, 0.6);\n  color: #84a9cd; }\n.nb-theme-Connection :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #0e2133; }\n.nb-theme-Connection :host ::ng-deep [nbButton]:hover, .nb-theme-Connection :host ::ng-deep [nbButton].hover {\n  background: #425d76; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #254462;\n  text-transform: uppercase; }\n.nb-theme-Connection :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Connection :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #425d76; }\n.nb-theme-Connection :host ::ng-deep [nbInput] {\n  background-color: #0f2438; }\n.nb-theme-Connection :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Connection :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #254462; }\n.nb-theme-Connection :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #2c4864; }\n.nb-theme-Connection :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #2c4864; }\n.nb-theme-Connection :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #2c4864; }\n.nb-theme-Connection :host ::ng-deep .alert-modal-content {\n  background: #112940 !important;\n  background-color: #112940 !important; }\n.nb-theme-Connection :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #254462; }\n.nb-theme-Connection :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #254462; }\n.nb-theme-Connection :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Connection :host .platformHeader {\n  background: #112940;\n  z-index: 999999999999; }\n.nb-theme-Connection :host .footer-main {\n  background: #112940;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Connection :host .trader-text {\n  color: #2b4661; }\n.nb-theme-Connection :host .profit-date {\n  color: #2b4661; }\n.nb-theme-Connection :host .conversion-input, .nb-theme-Connection :host .conversion-input2 {\n  caret-color: #112940;\n  background-color: #0f2438;\n  color: #fff; }\n.nb-theme-Connection :host .conversion-input:focus {\n  background-color: #0f2438;\n  color: #fff; }\n.nb-theme-Connection :host .wzrdgroup-link {\n  color: #84a9cd; }\n.nb-theme-Connection :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Connection :host nb-tooltip.primary-tooltip {\n  background-color: #254462; }\n.nb-theme-Connection :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #254462; }\n.nb-theme-Connection :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Connection :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Connection :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Connection :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Enchanted_Dream :host ::ng-deep .dark-row {\n  background-color: #3e3b46; }\n.nb-theme-Enchanted_Dream :host ::ng-deep td {\n  border-right: 2px solid #4c4957; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .nb-chevron-up,\n.nb-theme-Enchanted_Dream :host ::ng-deep .nb-chevron-down {\n  color: #4c4957; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #423f4b; }\n.nb-theme-Enchanted_Dream :host ::ng-deep thead td {\n  background-color: #64626f !important;\n  border-right: 2px solid #4c4957; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Enchanted_Dream :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary {\n  background: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Enchanted_Dream :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Enchanted_Dream :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d1d0d7; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #787681; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card.select nb-option {\n  background: #4c4957;\n  color: #b9b7c4; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card {\n  background: #4c4957;\n  box-shadow: 0 8px 20px 0 rgba(37, 36, 43, 0.6);\n  color: #b9b7c4; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #423f4b; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton]:hover, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].hover {\n  background: #787681; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #64626f;\n  text-transform: uppercase; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Enchanted_Dream :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #787681; }\n.nb-theme-Enchanted_Dream :host ::ng-deep [nbInput] {\n  background-color: #45424f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #64626d; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #64626d; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #64626d; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .alert-modal-content {\n  background: #4c4957 !important;\n  background-color: #4c4957 !important; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Enchanted_Dream :host .platformHeader {\n  background: #4c4957;\n  z-index: 999999999999; }\n.nb-theme-Enchanted_Dream :host .footer-main {\n  background: #4c4957;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Enchanted_Dream :host .trader-text {\n  color: #615f6a; }\n.nb-theme-Enchanted_Dream :host .profit-date {\n  color: #615f6a; }\n.nb-theme-Enchanted_Dream :host .conversion-input, .nb-theme-Enchanted_Dream :host .conversion-input2 {\n  caret-color: #4c4957;\n  background-color: #45424f;\n  color: #fff; }\n.nb-theme-Enchanted_Dream :host .conversion-input:focus {\n  background-color: #45424f;\n  color: #fff; }\n.nb-theme-Enchanted_Dream :host .wzrdgroup-link {\n  color: #b9b7c4; }\n.nb-theme-Enchanted_Dream :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Enchanted_Dream :host nb-tooltip.primary-tooltip {\n  background-color: #64626f; }\n.nb-theme-Enchanted_Dream :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #64626f; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Enchanted_Dream :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Enchanted_Dream :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Enchanted_Dream :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Infinity :host ::ng-deep .dark-row {\n  background-color: #0a0a0a; }\n.nb-theme-Infinity :host ::ng-deep td {\n  border-right: 2px solid #121212; }\n.nb-theme-Infinity :host ::ng-deep .nb-chevron-up,\n.nb-theme-Infinity :host ::ng-deep .nb-chevron-down {\n  color: #121212; }\n.nb-theme-Infinity :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #000000; }\n.nb-theme-Infinity :host ::ng-deep thead td {\n  background-color: #484747 !important;\n  border-right: 2px solid #121212; }\n.nb-theme-Infinity :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Infinity :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #484747; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary {\n  background: #484747; }\n.nb-theme-Infinity :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Infinity :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Infinity :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #c6c6c6; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #605f5f; }\n.nb-theme-Infinity :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #484747; }\n.nb-theme-Infinity :host ::ng-deep nb-card.select nb-option {\n  background: #121212;\n  color: #a2a2a2; }\n.nb-theme-Infinity :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Infinity :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Infinity :host ::ng-deep nb-card {\n  background: #121212;\n  box-shadow: 0 8px 20px 0 rgba(9, 9, 9, 0.6);\n  color: #a2a2a2; }\n.nb-theme-Infinity :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #000000; }\n.nb-theme-Infinity :host ::ng-deep [nbButton]:hover, .nb-theme-Infinity :host ::ng-deep [nbButton].hover {\n  background: #605f5f; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #484747;\n  text-transform: uppercase; }\n.nb-theme-Infinity :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Infinity :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #605f5f; }\n.nb-theme-Infinity :host ::ng-deep [nbInput] {\n  background-color: #0b0b0b; }\n.nb-theme-Infinity :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Infinity :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #484747; }\n.nb-theme-Infinity :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #292929; }\n.nb-theme-Infinity :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #292929; }\n.nb-theme-Infinity :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #292929; }\n.nb-theme-Infinity :host ::ng-deep .alert-modal-content {\n  background: #121212 !important;\n  background-color: #121212 !important; }\n.nb-theme-Infinity :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #484747; }\n.nb-theme-Infinity :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #484747; }\n.nb-theme-Infinity :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Infinity :host .platformHeader {\n  background: #121212;\n  z-index: 999999999999; }\n.nb-theme-Infinity :host .footer-main {\n  background: #121212;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Infinity :host .trader-text {\n  color: #282828; }\n.nb-theme-Infinity :host .profit-date {\n  color: #282828; }\n.nb-theme-Infinity :host .conversion-input, .nb-theme-Infinity :host .conversion-input2 {\n  caret-color: #121212;\n  background-color: #0b0b0b;\n  color: #fff; }\n.nb-theme-Infinity :host .conversion-input:focus {\n  background-color: #0b0b0b;\n  color: #fff; }\n.nb-theme-Infinity :host .wzrdgroup-link {\n  color: #a2a2a2; }\n.nb-theme-Infinity :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Infinity :host nb-tooltip.primary-tooltip {\n  background-color: #484747; }\n.nb-theme-Infinity :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #484747; }\n.nb-theme-Infinity :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Infinity :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Infinity :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Infinity :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Pirate :host ::ng-deep .dark-row {\n  background-color: #1a4b4b; }\n.nb-theme-Pirate :host ::ng-deep td {\n  border-right: 2px solid #276e6e; }\n.nb-theme-Pirate :host ::ng-deep .nb-chevron-up,\n.nb-theme-Pirate :host ::ng-deep .nb-chevron-down {\n  color: #276e6e; }\n.nb-theme-Pirate :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #194747; }\n.nb-theme-Pirate :host ::ng-deep thead td {\n  background-color: #3a8484 !important;\n  border-right: 2px solid #276e6e; }\n.nb-theme-Pirate :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Pirate :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary {\n  background: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Pirate :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Pirate :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #9ec9c9; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #549393; }\n.nb-theme-Pirate :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep nb-card.select nb-option {\n  background: #276e6e;\n  color: #53a8a8; }\n.nb-theme-Pirate :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Pirate :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Pirate :host ::ng-deep nb-card {\n  background: #276e6e;\n  box-shadow: 0 8px 20px 0 rgba(19, 54, 54, 0.6);\n  color: #53a8a8; }\n.nb-theme-Pirate :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #194747; }\n.nb-theme-Pirate :host ::ng-deep [nbButton]:hover, .nb-theme-Pirate :host ::ng-deep [nbButton].hover {\n  background: #549393; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #3a8484;\n  text-transform: uppercase; }\n.nb-theme-Pirate :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Pirate :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #549393; }\n.nb-theme-Pirate :host ::ng-deep [nbInput] {\n  background-color: #1d5454; }\n.nb-theme-Pirate :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Pirate :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #3a8484; }\n.nb-theme-Pirate :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #36a6a6; }\n.nb-theme-Pirate :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #36a6a6; }\n.nb-theme-Pirate :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #36a6a6; }\n.nb-theme-Pirate :host ::ng-deep .alert-modal-content {\n  background: #276e6e !important;\n  background-color: #276e6e !important; }\n.nb-theme-Pirate :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Pirate :host .platformHeader {\n  background: #276e6e;\n  z-index: 999999999999; }\n.nb-theme-Pirate :host .footer-main {\n  background: #276e6e;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Pirate :host .trader-text {\n  color: #34a1a1; }\n.nb-theme-Pirate :host .profit-date {\n  color: #34a1a1; }\n.nb-theme-Pirate :host .conversion-input, .nb-theme-Pirate :host .conversion-input2 {\n  caret-color: #276e6e;\n  background-color: #1d5454;\n  color: #fff; }\n.nb-theme-Pirate :host .conversion-input:focus {\n  background-color: #1d5454;\n  color: #fff; }\n.nb-theme-Pirate :host .wzrdgroup-link {\n  color: #53a8a8; }\n.nb-theme-Pirate :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Pirate :host nb-tooltip.primary-tooltip {\n  background-color: #3a8484; }\n.nb-theme-Pirate :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #3a8484; }\n.nb-theme-Pirate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Pirate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Pirate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Pirate :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Tron :host ::ng-deep .dark-row {\n  background-color: #303030; }\n.nb-theme-Tron :host ::ng-deep td {\n  border-right: 2px solid #171717; }\n.nb-theme-Tron :host ::ng-deep .nb-chevron-up,\n.nb-theme-Tron :host ::ng-deep .nb-chevron-down {\n  color: #171717; }\n.nb-theme-Tron :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #2f2f2f; }\n.nb-theme-Tron :host ::ng-deep thead td {\n  background-color: #484747 !important;\n  border-right: 2px solid #171717; }\n.nb-theme-Tron :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #484747; }\n.nb-theme-Tron :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Tron :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #484747; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-primary {\n  background: #484747; }\n.nb-theme-Tron :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Tron :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Tron :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #a6cbd3; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Tron :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Tron :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #605f5f; }\n.nb-theme-Tron :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #484747; }\n.nb-theme-Tron :host ::ng-deep nb-card.select nb-option {\n  background: #171717;\n  color: #62adbc; }\n.nb-theme-Tron :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Tron :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Tron :host ::ng-deep nb-card {\n  background: #171717;\n  box-shadow: 0 8px 20px 0 rgba(11, 11, 11, 0.6);\n  color: #62adbc; }\n.nb-theme-Tron :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #2f2f2f; }\n.nb-theme-Tron :host ::ng-deep [nbButton]:hover, .nb-theme-Tron :host ::ng-deep [nbButton].hover {\n  background: #605f5f; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #484747;\n  text-transform: uppercase; }\n.nb-theme-Tron :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Tron :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #605f5f; }\n.nb-theme-Tron :host ::ng-deep [nbInput] {\n  background-color: #363636; }\n.nb-theme-Tron :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Tron :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #484747; }\n.nb-theme-Tron :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #43b5c8; }\n.nb-theme-Tron :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #43b5c8; }\n.nb-theme-Tron :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #43b5c8; }\n.nb-theme-Tron :host ::ng-deep .alert-modal-content {\n  background: #171717 !important;\n  background-color: #171717 !important; }\n.nb-theme-Tron :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #484747; }\n.nb-theme-Tron :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #484747; }\n.nb-theme-Tron :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Tron :host .platformHeader {\n  background: #171717;\n  z-index: 999999999999; }\n.nb-theme-Tron :host .footer-main {\n  background: #171717;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Tron :host .trader-text {\n  color: #41afc2; }\n.nb-theme-Tron :host .profit-date {\n  color: #41afc2; }\n.nb-theme-Tron :host .conversion-input, .nb-theme-Tron :host .conversion-input2 {\n  caret-color: #171717;\n  background-color: #363636;\n  color: #fff; }\n.nb-theme-Tron :host .conversion-input:focus {\n  background-color: #363636;\n  color: #fff; }\n.nb-theme-Tron :host .wzrdgroup-link {\n  color: #62adbc; }\n.nb-theme-Tron :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Tron :host nb-tooltip.primary-tooltip {\n  background-color: #484747; }\n.nb-theme-Tron :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #484747; }\n.nb-theme-Tron :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Tron :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Tron :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Tron :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Uncovering_Secrets :host ::ng-deep .dark-row {\n  background-color: #131723; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep td {\n  border-right: 2px solid #191f2e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .nb-chevron-up,\n.nb-theme-Uncovering_Secrets :host ::ng-deep .nb-chevron-down {\n  color: #191f2e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #131824; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep thead td {\n  background-color: #44598e !important;\n  border-right: 2px solid #191f2e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Uncovering_Secrets :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary {\n  background: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Uncovering_Secrets :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Uncovering_Secrets :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #afbad4; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #5d6e9c; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card.select nb-option {\n  background: #191f2e;\n  color: #758abe; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card {\n  background: #191f2e;\n  box-shadow: 0 8px 20px 0 rgba(12, 15, 22, 0.6);\n  color: #758abe; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #131824; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton]:hover, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].hover {\n  background: #5d6e9c; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #44598e;\n  text-transform: uppercase; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Uncovering_Secrets :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #5d6e9c; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep [nbInput] {\n  background-color: #151a27; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #3b4c75; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #3b4c75; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #3b4c75; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .alert-modal-content {\n  background: #191f2e !important;\n  background-color: #191f2e !important; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Uncovering_Secrets :host .platformHeader {\n  background: #191f2e;\n  z-index: 999999999999; }\n.nb-theme-Uncovering_Secrets :host .footer-main {\n  background: #191f2e;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Uncovering_Secrets :host .trader-text {\n  color: #394a71; }\n.nb-theme-Uncovering_Secrets :host .profit-date {\n  color: #394a71; }\n.nb-theme-Uncovering_Secrets :host .conversion-input, .nb-theme-Uncovering_Secrets :host .conversion-input2 {\n  caret-color: #191f2e;\n  background-color: #151a27;\n  color: #fff; }\n.nb-theme-Uncovering_Secrets :host .conversion-input:focus {\n  background-color: #151a27;\n  color: #fff; }\n.nb-theme-Uncovering_Secrets :host .wzrdgroup-link {\n  color: #758abe; }\n.nb-theme-Uncovering_Secrets :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Uncovering_Secrets :host nb-tooltip.primary-tooltip {\n  background-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #44598e; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Uncovering_Secrets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Uncovering_Secrets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Uncovering_Secrets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-United_Colours :host ::ng-deep .dark-row {\n  background-color: #332d48; }\n.nb-theme-United_Colours :host ::ng-deep td {\n  border-right: 2px solid #423c5e; }\n.nb-theme-United_Colours :host ::ng-deep .nb-chevron-up,\n.nb-theme-United_Colours :host ::ng-deep .nb-chevron-down {\n  color: #423c5e; }\n.nb-theme-United_Colours :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #3a3553; }\n.nb-theme-United_Colours :host ::ng-deep thead td {\n  background-color: #9188bb !important;\n  border-right: 2px solid #423c5e; }\n.nb-theme-United_Colours :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-United_Colours :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary {\n  background: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-United_Colours :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-United_Colours :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #cac5de; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #9e96c2; }\n.nb-theme-United_Colours :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep nb-card.select nb-option {\n  background: #423c5e;\n  color: #aaa1d3; }\n.nb-theme-United_Colours :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-United_Colours :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-United_Colours :host ::ng-deep nb-card {\n  background: #423c5e;\n  box-shadow: 0 8px 20px 0 rgba(32, 29, 46, 0.6);\n  color: #aaa1d3; }\n.nb-theme-United_Colours :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #3a3553; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton]:hover, .nb-theme-United_Colours :host ::ng-deep [nbButton].hover {\n  background: #9e96c2; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #9188bb;\n  text-transform: uppercase; }\n.nb-theme-United_Colours :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-United_Colours :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #9e96c2; }\n.nb-theme-United_Colours :host ::ng-deep [nbInput] {\n  background-color: #393351; }\n.nb-theme-United_Colours :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-United_Colours :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #655c8d; }\n.nb-theme-United_Colours :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #655c8d; }\n.nb-theme-United_Colours :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #655c8d; }\n.nb-theme-United_Colours :host ::ng-deep .alert-modal-content {\n  background: #423c5e !important;\n  background-color: #423c5e !important; }\n.nb-theme-United_Colours :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-United_Colours :host .platformHeader {\n  background: #423c5e;\n  z-index: 999999999999; }\n.nb-theme-United_Colours :host .footer-main {\n  background: #423c5e;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-United_Colours :host .trader-text {\n  color: #625989; }\n.nb-theme-United_Colours :host .profit-date {\n  color: #625989; }\n.nb-theme-United_Colours :host .conversion-input, .nb-theme-United_Colours :host .conversion-input2 {\n  caret-color: #423c5e;\n  background-color: #393351;\n  color: #fff; }\n.nb-theme-United_Colours :host .conversion-input:focus {\n  background-color: #393351;\n  color: #fff; }\n.nb-theme-United_Colours :host .wzrdgroup-link {\n  color: #aaa1d3; }\n.nb-theme-United_Colours :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-United_Colours :host nb-tooltip.primary-tooltip {\n  background-color: #9188bb; }\n.nb-theme-United_Colours :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #9188bb; }\n.nb-theme-United_Colours :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-United_Colours :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-United_Colours :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-United_Colours :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Palm_Trees :host ::ng-deep .dark-row {\n  background-color: #1d4143; }\n.nb-theme-Palm_Trees :host ::ng-deep td {\n  border-right: 2px solid #275659; }\n.nb-theme-Palm_Trees :host ::ng-deep .nb-chevron-up,\n.nb-theme-Palm_Trees :host ::ng-deep .nb-chevron-down {\n  color: #275659; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #21484b; }\n.nb-theme-Palm_Trees :host ::ng-deep thead td {\n  background-color: #438f93 !important;\n  border-right: 2px solid #275659; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Palm_Trees :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary {\n  background: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Palm_Trees :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Palm_Trees :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #badcde; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #5c9ca0; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card.select nb-option {\n  background: #275659;\n  color: #8acfd3; }\n.nb-theme-Palm_Trees :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card {\n  background: #275659;\n  box-shadow: 0 8px 20px 0 rgba(19, 42, 43, 0.6);\n  color: #8acfd3; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #21484b; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton]:hover, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].hover {\n  background: #5c9ca0; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #438f93;\n  text-transform: uppercase; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Palm_Trees :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #5c9ca0; }\n.nb-theme-Palm_Trees :host ::ng-deep [nbInput] {\n  background-color: #21494c; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #3e7e82; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #3e7e82; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #3e7e82; }\n.nb-theme-Palm_Trees :host ::ng-deep .alert-modal-content {\n  background: #275659 !important;\n  background-color: #275659 !important; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Palm_Trees :host .platformHeader {\n  background: #275659;\n  z-index: 999999999999; }\n.nb-theme-Palm_Trees :host .footer-main {\n  background: #275659;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Palm_Trees :host .trader-text {\n  color: #3c7a7e; }\n.nb-theme-Palm_Trees :host .profit-date {\n  color: #3c7a7e; }\n.nb-theme-Palm_Trees :host .conversion-input, .nb-theme-Palm_Trees :host .conversion-input2 {\n  caret-color: #275659;\n  background-color: #21494c;\n  color: #fff; }\n.nb-theme-Palm_Trees :host .conversion-input:focus {\n  background-color: #21494c;\n  color: #fff; }\n.nb-theme-Palm_Trees :host .wzrdgroup-link {\n  color: #8acfd3; }\n.nb-theme-Palm_Trees :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Palm_Trees :host nb-tooltip.primary-tooltip {\n  background-color: #438f93; }\n.nb-theme-Palm_Trees :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #438f93; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Palm_Trees :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Palm_Trees :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Palm_Trees :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Analyst :host ::ng-deep .dark-row {\n  background-color: #080f21; }\n.nb-theme-Analyst :host ::ng-deep td {\n  border-right: 2px solid #0b152e; }\n.nb-theme-Analyst :host ::ng-deep .nb-chevron-up,\n.nb-theme-Analyst :host ::ng-deep .nb-chevron-down {\n  color: #0b152e; }\n.nb-theme-Analyst :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #080f21; }\n.nb-theme-Analyst :host ::ng-deep thead td {\n  background-color: #17264b !important;\n  border-right: 2px solid #0b152e; }\n.nb-theme-Analyst :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Analyst :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #17264b; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary {\n  background: #17264b; }\n.nb-theme-Analyst :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Analyst :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Analyst :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #a3afcb; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #364363; }\n.nb-theme-Analyst :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #17264b; }\n.nb-theme-Analyst :host ::ng-deep nb-card.select nb-option {\n  background: #0b152e;\n  color: #5c74ac; }\n.nb-theme-Analyst :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Analyst :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Analyst :host ::ng-deep nb-card {\n  background: #0b152e;\n  box-shadow: 0 8px 20px 0 rgba(6, 10, 22, 0.6);\n  color: #5c74ac; }\n.nb-theme-Analyst :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #080f21; }\n.nb-theme-Analyst :host ::ng-deep [nbButton]:hover, .nb-theme-Analyst :host ::ng-deep [nbButton].hover {\n  background: #364363; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #17264b;\n  text-transform: uppercase; }\n.nb-theme-Analyst :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Analyst :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #364363; }\n.nb-theme-Analyst :host ::ng-deep [nbInput] {\n  background-color: #091125; }\n.nb-theme-Analyst :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Analyst :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #17264b; }\n.nb-theme-Analyst :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #283d6f; }\n.nb-theme-Analyst :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #283d6f; }\n.nb-theme-Analyst :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #283d6f; }\n.nb-theme-Analyst :host ::ng-deep .alert-modal-content {\n  background: #0b152e !important;\n  background-color: #0b152e !important; }\n.nb-theme-Analyst :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #17264b; }\n.nb-theme-Analyst :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #17264b; }\n.nb-theme-Analyst :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Analyst :host .platformHeader {\n  background: #0b152e;\n  z-index: 999999999999; }\n.nb-theme-Analyst :host .footer-main {\n  background: #0b152e;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Analyst :host .trader-text {\n  color: #273b6c; }\n.nb-theme-Analyst :host .profit-date {\n  color: #273b6c; }\n.nb-theme-Analyst :host .conversion-input, .nb-theme-Analyst :host .conversion-input2 {\n  caret-color: #0b152e;\n  background-color: #091125;\n  color: #fff; }\n.nb-theme-Analyst :host .conversion-input:focus {\n  background-color: #091125;\n  color: #fff; }\n.nb-theme-Analyst :host .wzrdgroup-link {\n  color: #5c74ac; }\n.nb-theme-Analyst :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Analyst :host nb-tooltip.primary-tooltip {\n  background-color: #17264b; }\n.nb-theme-Analyst :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #17264b; }\n.nb-theme-Analyst :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Analyst :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Analyst :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Analyst :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Voltage :host ::ng-deep .dark-row {\n  background-color: #161822; }\n.nb-theme-Voltage :host ::ng-deep td {\n  border-right: 2px solid #1e202d; }\n.nb-theme-Voltage :host ::ng-deep .nb-chevron-up,\n.nb-theme-Voltage :host ::ng-deep .nb-chevron-down {\n  color: #1e202d; }\n.nb-theme-Voltage :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #191a25; }\n.nb-theme-Voltage :host ::ng-deep thead td {\n  background-color: #383b4a !important;\n  border-right: 2px solid #1e202d; }\n.nb-theme-Voltage :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Voltage :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary {\n  background: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Voltage :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Voltage :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #bebfc6; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #525562; }\n.nb-theme-Voltage :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep nb-card.select nb-option {\n  background: #1e202d;\n  color: #9295a2; }\n.nb-theme-Voltage :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Voltage :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Voltage :host ::ng-deep nb-card {\n  background: #1e202d;\n  box-shadow: 0 8px 20px 0 rgba(15, 15, 22, 0.6);\n  color: #9295a2; }\n.nb-theme-Voltage :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #191a25; }\n.nb-theme-Voltage :host ::ng-deep [nbButton]:hover, .nb-theme-Voltage :host ::ng-deep [nbButton].hover {\n  background: #525562; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #383b4a;\n  text-transform: uppercase; }\n.nb-theme-Voltage :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Voltage :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #525562; }\n.nb-theme-Voltage :host ::ng-deep [nbInput] {\n  background-color: #191b26; }\n.nb-theme-Voltage :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Voltage :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #383b4a; }\n.nb-theme-Voltage :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #4a4d5d; }\n.nb-theme-Voltage :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #4a4d5d; }\n.nb-theme-Voltage :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #4a4d5d; }\n.nb-theme-Voltage :host ::ng-deep .alert-modal-content {\n  background: #1e202d !important;\n  background-color: #1e202d !important; }\n.nb-theme-Voltage :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Voltage :host .platformHeader {\n  background: #1e202d;\n  z-index: 999999999999; }\n.nb-theme-Voltage :host .footer-main {\n  background: #1e202d;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Voltage :host .trader-text {\n  color: #484b5a; }\n.nb-theme-Voltage :host .profit-date {\n  color: #484b5a; }\n.nb-theme-Voltage :host .conversion-input, .nb-theme-Voltage :host .conversion-input2 {\n  caret-color: #1e202d;\n  background-color: #191b26;\n  color: #fff; }\n.nb-theme-Voltage :host .conversion-input:focus {\n  background-color: #191b26;\n  color: #fff; }\n.nb-theme-Voltage :host .wzrdgroup-link {\n  color: #9295a2; }\n.nb-theme-Voltage :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Voltage :host nb-tooltip.primary-tooltip {\n  background-color: #383b4a; }\n.nb-theme-Voltage :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #383b4a; }\n.nb-theme-Voltage :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Voltage :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Voltage :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Voltage :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Overload :host ::ng-deep .dark-row {\n  background-color: #484848; }\n.nb-theme-Overload :host ::ng-deep td {\n  border-right: 2px solid #616161; }\n.nb-theme-Overload :host ::ng-deep .nb-chevron-up,\n.nb-theme-Overload :host ::ng-deep .nb-chevron-down {\n  color: #616161; }\n.nb-theme-Overload :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #4c4b4b; }\n.nb-theme-Overload :host ::ng-deep thead td {\n  background-color: #b0b0b0 !important;\n  border-right: 2px solid #616161; }\n.nb-theme-Overload :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Overload :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-primary {\n  background: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Overload :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Overload :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #dedddd; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Overload :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Overload :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #b8b8b8; }\n.nb-theme-Overload :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep nb-card.select nb-option {\n  background: #616161;\n  color: #d2d1d1; }\n.nb-theme-Overload :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Overload :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Overload :host ::ng-deep nb-card {\n  background: #616161;\n  box-shadow: 0 8px 20px 0 rgba(47, 47, 47, 0.6);\n  color: #d2d1d1; }\n.nb-theme-Overload :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #4c4b4b; }\n.nb-theme-Overload :host ::ng-deep [nbButton]:hover, .nb-theme-Overload :host ::ng-deep [nbButton].hover {\n  background: #b8b8b8; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #b0b0b0;\n  text-transform: uppercase; }\n.nb-theme-Overload :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Overload :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #b8b8b8; }\n.nb-theme-Overload :host ::ng-deep [nbInput] {\n  background-color: #515151; }\n.nb-theme-Overload :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Overload :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #737373; }\n.nb-theme-Overload :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #737373; }\n.nb-theme-Overload :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #737373; }\n.nb-theme-Overload :host ::ng-deep .alert-modal-content {\n  background: #616161 !important;\n  background-color: #616161 !important; }\n.nb-theme-Overload :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Overload :host .platformHeader {\n  background: #616161;\n  z-index: 999999999999; }\n.nb-theme-Overload :host .footer-main {\n  background: #616161;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Overload :host .trader-text {\n  color: #6f6f6f; }\n.nb-theme-Overload :host .profit-date {\n  color: #6f6f6f; }\n.nb-theme-Overload :host .conversion-input, .nb-theme-Overload :host .conversion-input2 {\n  caret-color: #616161;\n  background-color: #515151;\n  color: #fff; }\n.nb-theme-Overload :host .conversion-input:focus {\n  background-color: #515151;\n  color: #fff; }\n.nb-theme-Overload :host .wzrdgroup-link {\n  color: #d2d1d1; }\n.nb-theme-Overload :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Overload :host nb-tooltip.primary-tooltip {\n  background-color: #b0b0b0; }\n.nb-theme-Overload :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #b0b0b0; }\n.nb-theme-Overload :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Overload :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Overload :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Overload :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Smiley :host ::ng-deep .dark-row {\n  background-color: #3c3939; }\n.nb-theme-Smiley :host ::ng-deep td {\n  border-right: 2px solid #1c1b1b; }\n.nb-theme-Smiley :host ::ng-deep .nb-chevron-up,\n.nb-theme-Smiley :host ::ng-deep .nb-chevron-down {\n  color: #1c1b1b; }\n.nb-theme-Smiley :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #3d3e3d; }\n.nb-theme-Smiley :host ::ng-deep thead td {\n  background-color: #403f3f !important;\n  border-right: 2px solid #1c1b1b; }\n.nb-theme-Smiley :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Smiley :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary {\n  background: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Smiley :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Smiley :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #e4e0b9; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #595858; }\n.nb-theme-Smiley :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep nb-card.select nb-option {\n  background: #1c1b1b;\n  color: #dfd689; }\n.nb-theme-Smiley :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Smiley :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Smiley :host ::ng-deep nb-card {\n  background: #1c1b1b;\n  box-shadow: 0 8px 20px 0 rgba(14, 13, 13, 0.6);\n  color: #dfd689; }\n.nb-theme-Smiley :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #3d3e3d; }\n.nb-theme-Smiley :host ::ng-deep [nbButton]:hover, .nb-theme-Smiley :host ::ng-deep [nbButton].hover {\n  background: #595858; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #403f3f;\n  text-transform: uppercase; }\n.nb-theme-Smiley :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Smiley :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #595858; }\n.nb-theme-Smiley :host ::ng-deep [nbInput] {\n  background-color: #434040; }\n.nb-theme-Smiley :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Smiley :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #403f3f; }\n.nb-theme-Smiley :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #d8b855; }\n.nb-theme-Smiley :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #d8b855; }\n.nb-theme-Smiley :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #d8b855; }\n.nb-theme-Smiley :host ::ng-deep .alert-modal-content {\n  background: #1c1b1b !important;\n  background-color: #1c1b1b !important; }\n.nb-theme-Smiley :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Smiley :host .platformHeader {\n  background: #1c1b1b;\n  z-index: 999999999999; }\n.nb-theme-Smiley :host .footer-main {\n  background: #1c1b1b;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Smiley :host .trader-text {\n  color: #d1b252; }\n.nb-theme-Smiley :host .profit-date {\n  color: #d1b252; }\n.nb-theme-Smiley :host .conversion-input, .nb-theme-Smiley :host .conversion-input2 {\n  caret-color: #1c1b1b;\n  background-color: #434040;\n  color: #fff; }\n.nb-theme-Smiley :host .conversion-input:focus {\n  background-color: #434040;\n  color: #fff; }\n.nb-theme-Smiley :host .wzrdgroup-link {\n  color: #dfd689; }\n.nb-theme-Smiley :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Smiley :host nb-tooltip.primary-tooltip {\n  background-color: #403f3f; }\n.nb-theme-Smiley :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #403f3f; }\n.nb-theme-Smiley :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Smiley :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Smiley :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Smiley :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Internal_Traces :host ::ng-deep .dark-row {\n  background-color: #477c9d; }\n.nb-theme-Internal_Traces :host ::ng-deep td {\n  border-right: 2px solid #66a9cc; }\n.nb-theme-Internal_Traces :host ::ng-deep .nb-chevron-up,\n.nb-theme-Internal_Traces :host ::ng-deep .nb-chevron-down {\n  color: #66a9cc; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #5490af; }\n.nb-theme-Internal_Traces :host ::ng-deep thead td {\n  background-color: #79c0e5 !important;\n  border-right: 2px solid #66a9cc; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Internal_Traces :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary {\n  background: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Internal_Traces :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Internal_Traces :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d8eaf4; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #8ac6e6; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card.select nb-option {\n  background: #66a9cc;\n  color: #c7ecff; }\n.nb-theme-Internal_Traces :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card {\n  background: #66a9cc;\n  box-shadow: 0 8px 20px 0 rgba(50, 82, 99, 0.6);\n  color: #c7ecff; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #5490af; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton]:hover, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].hover {\n  background: #8ac6e6; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #79c0e5;\n  text-transform: uppercase; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Internal_Traces :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #8ac6e6; }\n.nb-theme-Internal_Traces :host ::ng-deep [nbInput] {\n  background-color: #5089a7; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #5893b2; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #5893b2; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #5893b2; }\n.nb-theme-Internal_Traces :host ::ng-deep .alert-modal-content {\n  background: #66a9cc !important;\n  background-color: #66a9cc !important; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Internal_Traces :host .platformHeader {\n  background: #66a9cc;\n  z-index: 999999999999; }\n.nb-theme-Internal_Traces :host .footer-main {\n  background: #66a9cc;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Internal_Traces :host .trader-text {\n  color: #558eac; }\n.nb-theme-Internal_Traces :host .profit-date {\n  color: #558eac; }\n.nb-theme-Internal_Traces :host .conversion-input, .nb-theme-Internal_Traces :host .conversion-input2 {\n  caret-color: #66a9cc;\n  background-color: #5089a7;\n  color: #fff; }\n.nb-theme-Internal_Traces :host .conversion-input:focus {\n  background-color: #5089a7;\n  color: #fff; }\n.nb-theme-Internal_Traces :host .wzrdgroup-link {\n  color: #c7ecff; }\n.nb-theme-Internal_Traces :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Internal_Traces :host nb-tooltip.primary-tooltip {\n  background-color: #79c0e5; }\n.nb-theme-Internal_Traces :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #79c0e5; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Internal_Traces :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Internal_Traces :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Internal_Traces :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Isolated :host ::ng-deep .dark-row {\n  background-color: #071824; }\n.nb-theme-Isolated :host ::ng-deep td {\n  border-right: 2px solid #0d2639; }\n.nb-theme-Isolated :host ::ng-deep .nb-chevron-up,\n.nb-theme-Isolated :host ::ng-deep .nb-chevron-down {\n  color: #0d2639; }\n.nb-theme-Isolated :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #091e2d; }\n.nb-theme-Isolated :host ::ng-deep thead td {\n  background-color: #1a4769 !important;\n  border-right: 2px solid #0d2639; }\n.nb-theme-Isolated :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Isolated :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary {\n  background: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Isolated :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Isolated :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #91bbdc; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #395f7c; }\n.nb-theme-Isolated :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep nb-card.select nb-option {\n  background: #0d2639;\n  color: #388dce; }\n.nb-theme-Isolated :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Isolated :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Isolated :host ::ng-deep nb-card {\n  background: #0d2639;\n  box-shadow: 0 8px 20px 0 rgba(6, 19, 28, 0.6);\n  color: #388dce; }\n.nb-theme-Isolated :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #091e2d; }\n.nb-theme-Isolated :host ::ng-deep [nbButton]:hover, .nb-theme-Isolated :host ::ng-deep [nbButton].hover {\n  background: #395f7c; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #1a4769;\n  text-transform: uppercase; }\n.nb-theme-Isolated :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Isolated :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #395f7c; }\n.nb-theme-Isolated :host ::ng-deep [nbInput] {\n  background-color: #081b29; }\n.nb-theme-Isolated :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Isolated :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #1a4769; }\n.nb-theme-Isolated :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #134a74; }\n.nb-theme-Isolated :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #134a74; }\n.nb-theme-Isolated :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #134a74; }\n.nb-theme-Isolated :host ::ng-deep .alert-modal-content {\n  background: #0d2639 !important;\n  background-color: #0d2639 !important; }\n.nb-theme-Isolated :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Isolated :host .platformHeader {\n  background: #0d2639;\n  z-index: 999999999999; }\n.nb-theme-Isolated :host .footer-main {\n  background: #0d2639;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Isolated :host .trader-text {\n  color: #124870; }\n.nb-theme-Isolated :host .profit-date {\n  color: #124870; }\n.nb-theme-Isolated :host .conversion-input, .nb-theme-Isolated :host .conversion-input2 {\n  caret-color: #0d2639;\n  background-color: #081b29;\n  color: #fff; }\n.nb-theme-Isolated :host .conversion-input:focus {\n  background-color: #081b29;\n  color: #fff; }\n.nb-theme-Isolated :host .wzrdgroup-link {\n  color: #388dce; }\n.nb-theme-Isolated :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Isolated :host nb-tooltip.primary-tooltip {\n  background-color: #1a4769; }\n.nb-theme-Isolated :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #1a4769; }\n.nb-theme-Isolated :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Isolated :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Isolated :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Isolated :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Land_of_Promises :host ::ng-deep .dark-row {\n  background-color: #353740; }\n.nb-theme-Land_of_Promises :host ::ng-deep td {\n  border-right: 2px solid #505260; }\n.nb-theme-Land_of_Promises :host ::ng-deep .nb-chevron-up,\n.nb-theme-Land_of_Promises :host ::ng-deep .nb-chevron-down {\n  color: #505260; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #34353f; }\n.nb-theme-Land_of_Promises :host ::ng-deep thead td {\n  background-color: #a0a2b2 !important;\n  border-right: 2px solid #505260; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Land_of_Promises :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary {\n  background: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Land_of_Promises :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Land_of_Promises :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d6d9eb; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #abadba; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card.select nb-option {\n  background: #505260;\n  color: #c2c8ee; }\n.nb-theme-Land_of_Promises :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card {\n  background: #505260;\n  box-shadow: 0 8px 20px 0 rgba(39, 40, 47, 0.6);\n  color: #c2c8ee; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #34353f; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton]:hover, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].hover {\n  background: #abadba; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #a0a2b2;\n  text-transform: uppercase; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Land_of_Promises :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #abadba; }\n.nb-theme-Land_of_Promises :host ::ng-deep [nbInput] {\n  background-color: #3c3e48; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #7a7d93; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #7a7d93; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #7a7d93; }\n.nb-theme-Land_of_Promises :host ::ng-deep .alert-modal-content {\n  background: #505260 !important;\n  background-color: #505260 !important; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Land_of_Promises :host .platformHeader {\n  background: #505260;\n  z-index: 999999999999; }\n.nb-theme-Land_of_Promises :host .footer-main {\n  background: #505260;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Land_of_Promises :host .trader-text {\n  color: #76798e; }\n.nb-theme-Land_of_Promises :host .profit-date {\n  color: #76798e; }\n.nb-theme-Land_of_Promises :host .conversion-input, .nb-theme-Land_of_Promises :host .conversion-input2 {\n  caret-color: #505260;\n  background-color: #3c3e48;\n  color: #fff; }\n.nb-theme-Land_of_Promises :host .conversion-input:focus {\n  background-color: #3c3e48;\n  color: #fff; }\n.nb-theme-Land_of_Promises :host .wzrdgroup-link {\n  color: #c2c8ee; }\n.nb-theme-Land_of_Promises :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Land_of_Promises :host nb-tooltip.primary-tooltip {\n  background-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #a0a2b2; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Land_of_Promises :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Land_of_Promises :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Land_of_Promises :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .dark-row {\n  background-color: #2b4150; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep td {\n  border-right: 2px solid #385468; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .nb-chevron-up,\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .nb-chevron-down {\n  color: #385468; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #2c4252; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep thead td {\n  background-color: #799cb4 !important;\n  border-right: 2px solid #385468; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Towers_of_Wizardry :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary {\n  background: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Towers_of_Wizardry :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Towers_of_Wizardry :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #c0d2dd; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #8aa7bc; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card.select nb-option {\n  background: #385468;\n  color: #97bad1; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card {\n  background: #385468;\n  box-shadow: 0 8px 20px 0 rgba(27, 41, 51, 0.6);\n  color: #97bad1; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #2c4252; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton]:hover, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].hover {\n  background: #8aa7bc; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #799cb4;\n  text-transform: uppercase; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Towers_of_Wizardry :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #8aa7bc; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep [nbInput] {\n  background-color: #30495a; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #5a7282; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #5a7282; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #5a7282; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .alert-modal-content {\n  background: #385468 !important;\n  background-color: #385468 !important; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Towers_of_Wizardry :host .platformHeader {\n  background: #385468;\n  z-index: 999999999999; }\n.nb-theme-Towers_of_Wizardry :host .footer-main {\n  background: #385468;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Towers_of_Wizardry :host .trader-text {\n  color: #576e7e; }\n.nb-theme-Towers_of_Wizardry :host .profit-date {\n  color: #576e7e; }\n.nb-theme-Towers_of_Wizardry :host .conversion-input, .nb-theme-Towers_of_Wizardry :host .conversion-input2 {\n  caret-color: #385468;\n  background-color: #30495a;\n  color: #fff; }\n.nb-theme-Towers_of_Wizardry :host .conversion-input:focus {\n  background-color: #30495a;\n  color: #fff; }\n.nb-theme-Towers_of_Wizardry :host .wzrdgroup-link {\n  color: #97bad1; }\n.nb-theme-Towers_of_Wizardry :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Towers_of_Wizardry :host nb-tooltip.primary-tooltip {\n  background-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #799cb4; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Towers_of_Wizardry :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Towers_of_Wizardry :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Towers_of_Wizardry :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Planets :host ::ng-deep .dark-row {\n  background-color: #24193c; }\n.nb-theme-Planets :host ::ng-deep td {\n  border-right: 2px solid #2d204d; }\n.nb-theme-Planets :host ::ng-deep .nb-chevron-up,\n.nb-theme-Planets :host ::ng-deep .nb-chevron-down {\n  color: #2d204d; }\n.nb-theme-Planets :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #261b41; }\n.nb-theme-Planets :host ::ng-deep thead td {\n  background-color: #8872c1 !important;\n  border-right: 2px solid #2d204d; }\n.nb-theme-Planets :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Planets :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #8872c1; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-primary {\n  background: #8872c1; }\n.nb-theme-Planets :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Planets :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Planets :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #cabee9; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Planets :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Planets :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #9684c7; }\n.nb-theme-Planets :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #8872c1; }\n.nb-theme-Planets :host ::ng-deep nb-card.select nb-option {\n  background: #2d204d;\n  color: #ab93e9; }\n.nb-theme-Planets :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Planets :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Planets :host ::ng-deep nb-card {\n  background: #2d204d;\n  box-shadow: 0 8px 20px 0 rgba(22, 15, 38, 0.6);\n  color: #ab93e9; }\n.nb-theme-Planets :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #261b41; }\n.nb-theme-Planets :host ::ng-deep [nbButton]:hover, .nb-theme-Planets :host ::ng-deep [nbButton].hover {\n  background: #9684c7; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #8872c1;\n  text-transform: uppercase; }\n.nb-theme-Planets :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Planets :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #9684c7; }\n.nb-theme-Planets :host ::ng-deep [nbInput] {\n  background-color: #281c44; }\n.nb-theme-Planets :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Planets :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #8872c1; }\n.nb-theme-Planets :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #68549c; }\n.nb-theme-Planets :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #68549c; }\n.nb-theme-Planets :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #68549c; }\n.nb-theme-Planets :host ::ng-deep .alert-modal-content {\n  background: #2d204d !important;\n  background-color: #2d204d !important; }\n.nb-theme-Planets :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #8872c1; }\n.nb-theme-Planets :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #8872c1; }\n.nb-theme-Planets :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Planets :host .platformHeader {\n  background: #2d204d;\n  z-index: 999999999999; }\n.nb-theme-Planets :host .footer-main {\n  background: #2d204d;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Planets :host .trader-text {\n  color: #655197; }\n.nb-theme-Planets :host .profit-date {\n  color: #655197; }\n.nb-theme-Planets :host .conversion-input, .nb-theme-Planets :host .conversion-input2 {\n  caret-color: #2d204d;\n  background-color: #281c44;\n  color: #fff; }\n.nb-theme-Planets :host .conversion-input:focus {\n  background-color: #281c44;\n  color: #fff; }\n.nb-theme-Planets :host .wzrdgroup-link {\n  color: #ab93e9; }\n.nb-theme-Planets :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Planets :host nb-tooltip.primary-tooltip {\n  background-color: #8872c1; }\n.nb-theme-Planets :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #8872c1; }\n.nb-theme-Planets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Planets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Planets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Planets :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Bloodline :host ::ng-deep .dark-row {\n  background-color: #09192c; }\n.nb-theme-Bloodline :host ::ng-deep td {\n  border-right: 2px solid #0b2039; }\n.nb-theme-Bloodline :host ::ng-deep .nb-chevron-up,\n.nb-theme-Bloodline :host ::ng-deep .nb-chevron-down {\n  color: #0b2039; }\n.nb-theme-Bloodline :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #091a2e; }\n.nb-theme-Bloodline :host ::ng-deep thead td {\n  background-color: #3769a4 !important;\n  border-right: 2px solid #0b2039; }\n.nb-theme-Bloodline :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Bloodline :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary {\n  background: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Bloodline :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Bloodline :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #b0cceb; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #527cae; }\n.nb-theme-Bloodline :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep nb-card.select nb-option {\n  background: #0b2039;\n  color: #77aeee; }\n.nb-theme-Bloodline :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Bloodline :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Bloodline :host ::ng-deep nb-card {\n  background: #0b2039;\n  box-shadow: 0 8px 20px 0 rgba(6, 15, 28, 0.6);\n  color: #77aeee; }\n.nb-theme-Bloodline :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #091a2e; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton]:hover, .nb-theme-Bloodline :host ::ng-deep [nbButton].hover {\n  background: #527cae; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #3769a4;\n  text-transform: uppercase; }\n.nb-theme-Bloodline :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Bloodline :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #527cae; }\n.nb-theme-Bloodline :host ::ng-deep [nbInput] {\n  background-color: #0a1c31; }\n.nb-theme-Bloodline :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Bloodline :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #396291; }\n.nb-theme-Bloodline :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #396291; }\n.nb-theme-Bloodline :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #396291; }\n.nb-theme-Bloodline :host ::ng-deep .alert-modal-content {\n  background: #0b2039 !important;\n  background-color: #0b2039 !important; }\n.nb-theme-Bloodline :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Bloodline :host .platformHeader {\n  background: #0b2039;\n  z-index: 999999999999; }\n.nb-theme-Bloodline :host .footer-main {\n  background: #0b2039;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Bloodline :host .trader-text {\n  color: #375f8c; }\n.nb-theme-Bloodline :host .profit-date {\n  color: #375f8c; }\n.nb-theme-Bloodline :host .conversion-input, .nb-theme-Bloodline :host .conversion-input2 {\n  caret-color: #0b2039;\n  background-color: #0a1c31;\n  color: #fff; }\n.nb-theme-Bloodline :host .conversion-input:focus {\n  background-color: #0a1c31;\n  color: #fff; }\n.nb-theme-Bloodline :host .wzrdgroup-link {\n  color: #77aeee; }\n.nb-theme-Bloodline :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Bloodline :host nb-tooltip.primary-tooltip {\n  background-color: #3769a4; }\n.nb-theme-Bloodline :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #3769a4; }\n.nb-theme-Bloodline :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Bloodline :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Bloodline :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Bloodline :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Ghost_Town :host ::ng-deep .dark-row {\n  background-color: #171717; }\n.nb-theme-Ghost_Town :host ::ng-deep td {\n  border-right: 2px solid #202020; }\n.nb-theme-Ghost_Town :host ::ng-deep .nb-chevron-up,\n.nb-theme-Ghost_Town :host ::ng-deep .nb-chevron-down {\n  color: #202020; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #171717; }\n.nb-theme-Ghost_Town :host ::ng-deep thead td {\n  background-color: #515151 !important;\n  border-right: 2px solid #202020; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Ghost_Town :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary {\n  background: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Ghost_Town :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Ghost_Town :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #c4c2c2; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #686868; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card.select nb-option {\n  background: #202020;\n  color: #9e9b9b; }\n.nb-theme-Ghost_Town :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card {\n  background: #202020;\n  box-shadow: 0 8px 20px 0 rgba(15, 15, 15, 0.6);\n  color: #9e9b9b; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #171717; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton]:hover, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].hover {\n  background: #686868; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #515151;\n  text-transform: uppercase; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Ghost_Town :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #686868; }\n.nb-theme-Ghost_Town :host ::ng-deep [nbInput] {\n  background-color: #1a1a1a; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #4b4949; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #4b4949; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #4b4949; }\n.nb-theme-Ghost_Town :host ::ng-deep .alert-modal-content {\n  background: #202020 !important;\n  background-color: #202020 !important; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Ghost_Town :host .platformHeader {\n  background: #202020;\n  z-index: 999999999999; }\n.nb-theme-Ghost_Town :host .footer-main {\n  background: #202020;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Ghost_Town :host .trader-text {\n  color: #494747; }\n.nb-theme-Ghost_Town :host .profit-date {\n  color: #494747; }\n.nb-theme-Ghost_Town :host .conversion-input, .nb-theme-Ghost_Town :host .conversion-input2 {\n  caret-color: #202020;\n  background-color: #1a1a1a;\n  color: #fff; }\n.nb-theme-Ghost_Town :host .conversion-input:focus {\n  background-color: #1a1a1a;\n  color: #fff; }\n.nb-theme-Ghost_Town :host .wzrdgroup-link {\n  color: #9e9b9b; }\n.nb-theme-Ghost_Town :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Ghost_Town :host nb-tooltip.primary-tooltip {\n  background-color: #515151; }\n.nb-theme-Ghost_Town :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #515151; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Ghost_Town :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Ghost_Town :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Ghost_Town :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Meteor :host ::ng-deep .dark-row {\n  background-color: #050e1b; }\n.nb-theme-Meteor :host ::ng-deep td {\n  border-right: 2px solid #091b33; }\n.nb-theme-Meteor :host ::ng-deep .nb-chevron-up,\n.nb-theme-Meteor :host ::ng-deep .nb-chevron-down {\n  color: #091b33; }\n.nb-theme-Meteor :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #061325; }\n.nb-theme-Meteor :host ::ng-deep thead td {\n  background-color: #1a375d !important;\n  border-right: 2px solid #091b33; }\n.nb-theme-Meteor :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Meteor :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary {\n  background: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Meteor :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Meteor :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #92b2dc; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #395272; }\n.nb-theme-Meteor :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep nb-card.select nb-option {\n  background: #091b33;\n  color: #3a7ace; }\n.nb-theme-Meteor :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Meteor :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Meteor :host ::ng-deep nb-card {\n  background: #091b33;\n  box-shadow: 0 8px 20px 0 rgba(4, 13, 25, 0.6);\n  color: #3a7ace; }\n.nb-theme-Meteor :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #061325; }\n.nb-theme-Meteor :host ::ng-deep [nbButton]:hover, .nb-theme-Meteor :host ::ng-deep [nbButton].hover {\n  background: #395272; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #1a375d;\n  text-transform: uppercase; }\n.nb-theme-Meteor :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Meteor :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #395272; }\n.nb-theme-Meteor :host ::ng-deep [nbInput] {\n  background-color: #05101f; }\n.nb-theme-Meteor :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Meteor :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #1a375d; }\n.nb-theme-Meteor :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #2c638b; }\n.nb-theme-Meteor :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #2c638b; }\n.nb-theme-Meteor :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #2c638b; }\n.nb-theme-Meteor :host ::ng-deep .alert-modal-content {\n  background: #091b33 !important;\n  background-color: #091b33 !important; }\n.nb-theme-Meteor :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Meteor :host .platformHeader {\n  background: #091b33;\n  z-index: 999999999999; }\n.nb-theme-Meteor :host .footer-main {\n  background: #091b33;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Meteor :host .trader-text {\n  color: #2b6087; }\n.nb-theme-Meteor :host .profit-date {\n  color: #2b6087; }\n.nb-theme-Meteor :host .conversion-input, .nb-theme-Meteor :host .conversion-input2 {\n  caret-color: #091b33;\n  background-color: #05101f;\n  color: #fff; }\n.nb-theme-Meteor :host .conversion-input:focus {\n  background-color: #05101f;\n  color: #fff; }\n.nb-theme-Meteor :host .wzrdgroup-link {\n  color: #3a7ace; }\n.nb-theme-Meteor :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Meteor :host nb-tooltip.primary-tooltip {\n  background-color: #1a375d; }\n.nb-theme-Meteor :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #1a375d; }\n.nb-theme-Meteor :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Meteor :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Meteor :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Meteor :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Purging :host ::ng-deep .dark-row {\n  background-color: #18181a; }\n.nb-theme-Purging :host ::ng-deep td {\n  border-right: 2px solid #222224; }\n.nb-theme-Purging :host ::ng-deep .nb-chevron-up,\n.nb-theme-Purging :host ::ng-deep .nb-chevron-down {\n  color: #222224; }\n.nb-theme-Purging :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #1b1b1d; }\n.nb-theme-Purging :host ::ng-deep thead td {\n  background-color: #4a4a4d !important;\n  border-right: 2px solid #222224; }\n.nb-theme-Purging :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Purging :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-primary {\n  background: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Purging :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Purging :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #cbcbcd; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Purging :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Purging :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #626264; }\n.nb-theme-Purging :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep nb-card.select nb-option {\n  background: #222224;\n  color: #acacb0; }\n.nb-theme-Purging :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Purging :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Purging :host ::ng-deep nb-card {\n  background: #222224;\n  box-shadow: 0 8px 20px 0 rgba(17, 17, 17, 0.6);\n  color: #acacb0; }\n.nb-theme-Purging :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #1b1b1d; }\n.nb-theme-Purging :host ::ng-deep [nbButton]:hover, .nb-theme-Purging :host ::ng-deep [nbButton].hover {\n  background: #626264; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #4a4a4d;\n  text-transform: uppercase; }\n.nb-theme-Purging :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Purging :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #626264; }\n.nb-theme-Purging :host ::ng-deep [nbInput] {\n  background-color: #1b1b1d; }\n.nb-theme-Purging :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Purging :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #535355; }\n.nb-theme-Purging :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #535355; }\n.nb-theme-Purging :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #535355; }\n.nb-theme-Purging :host ::ng-deep .alert-modal-content {\n  background: #222224 !important;\n  background-color: #222224 !important; }\n.nb-theme-Purging :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Purging :host .platformHeader {\n  background: #222224;\n  z-index: 999999999999; }\n.nb-theme-Purging :host .footer-main {\n  background: #222224;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Purging :host .trader-text {\n  color: #505052; }\n.nb-theme-Purging :host .profit-date {\n  color: #505052; }\n.nb-theme-Purging :host .conversion-input, .nb-theme-Purging :host .conversion-input2 {\n  caret-color: #222224;\n  background-color: #1b1b1d;\n  color: #fff; }\n.nb-theme-Purging :host .conversion-input:focus {\n  background-color: #1b1b1d;\n  color: #fff; }\n.nb-theme-Purging :host .wzrdgroup-link {\n  color: #acacb0; }\n.nb-theme-Purging :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Purging :host nb-tooltip.primary-tooltip {\n  background-color: #4a4a4d; }\n.nb-theme-Purging :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #4a4a4d; }\n.nb-theme-Purging :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Purging :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Purging :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Purging :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Predator :host ::ng-deep .dark-row {\n  background-color: #2a2c2f; }\n.nb-theme-Predator :host ::ng-deep td {\n  border-right: 2px solid #3b3d42; }\n.nb-theme-Predator :host ::ng-deep .nb-chevron-up,\n.nb-theme-Predator :host ::ng-deep .nb-chevron-down {\n  color: #3b3d42; }\n.nb-theme-Predator :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #2a2b2f; }\n.nb-theme-Predator :host ::ng-deep thead td {\n  background-color: #696a6e !important;\n  border-right: 2px solid #3b3d42; }\n.nb-theme-Predator :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Predator :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #696a6e; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-primary {\n  background: #696a6e; }\n.nb-theme-Predator :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Predator :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Predator :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #c3c4c7; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Predator :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Predator :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #7c7d80; }\n.nb-theme-Predator :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #696a6e; }\n.nb-theme-Predator :host ::ng-deep nb-card.select nb-option {\n  background: #3b3d42;\n  color: #9d9fa5; }\n.nb-theme-Predator :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Predator :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Predator :host ::ng-deep nb-card {\n  background: #3b3d42;\n  box-shadow: 0 8px 20px 0 rgba(29, 30, 32, 0.6);\n  color: #9d9fa5; }\n.nb-theme-Predator :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #2a2b2f; }\n.nb-theme-Predator :host ::ng-deep [nbButton]:hover, .nb-theme-Predator :host ::ng-deep [nbButton].hover {\n  background: #7c7d80; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #696a6e;\n  text-transform: uppercase; }\n.nb-theme-Predator :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Predator :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #7c7d80; }\n.nb-theme-Predator :host ::ng-deep [nbInput] {\n  background-color: #2f3135; }\n.nb-theme-Predator :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Predator :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #696a6e; }\n.nb-theme-Predator :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #4c4d52; }\n.nb-theme-Predator :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #4c4d52; }\n.nb-theme-Predator :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #4c4d52; }\n.nb-theme-Predator :host ::ng-deep .alert-modal-content {\n  background: #3b3d42 !important;\n  background-color: #3b3d42 !important; }\n.nb-theme-Predator :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #696a6e; }\n.nb-theme-Predator :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #696a6e; }\n.nb-theme-Predator :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Predator :host .platformHeader {\n  background: #3b3d42;\n  z-index: 999999999999; }\n.nb-theme-Predator :host .footer-main {\n  background: #3b3d42;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Predator :host .trader-text {\n  color: #4a4b4f; }\n.nb-theme-Predator :host .profit-date {\n  color: #4a4b4f; }\n.nb-theme-Predator :host .conversion-input, .nb-theme-Predator :host .conversion-input2 {\n  caret-color: #3b3d42;\n  background-color: #2f3135;\n  color: #fff; }\n.nb-theme-Predator :host .conversion-input:focus {\n  background-color: #2f3135;\n  color: #fff; }\n.nb-theme-Predator :host .wzrdgroup-link {\n  color: #9d9fa5; }\n.nb-theme-Predator :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Predator :host nb-tooltip.primary-tooltip {\n  background-color: #696a6e; }\n.nb-theme-Predator :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #696a6e; }\n.nb-theme-Predator :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Predator :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Predator :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Predator :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Lava :host ::ng-deep .dark-row {\n  background-color: #211625; }\n.nb-theme-Lava :host ::ng-deep td {\n  border-right: 2px solid #2c1e32; }\n.nb-theme-Lava :host ::ng-deep .nb-chevron-up,\n.nb-theme-Lava :host ::ng-deep .nb-chevron-down {\n  color: #2c1e32; }\n.nb-theme-Lava :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #211625; }\n.nb-theme-Lava :host ::ng-deep thead td {\n  background-color: #765883 !important;\n  border-right: 2px solid #2c1e32; }\n.nb-theme-Lava :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #765883; }\n.nb-theme-Lava :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Lava :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #765883; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-primary {\n  background: #765883; }\n.nb-theme-Lava :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Lava :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Lava :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d2bcdc; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Lava :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Lava :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #876e92; }\n.nb-theme-Lava :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #765883; }\n.nb-theme-Lava :host ::ng-deep nb-card.select nb-option {\n  background: #2c1e32;\n  color: #bb8fce; }\n.nb-theme-Lava :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Lava :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Lava :host ::ng-deep nb-card {\n  background: #2c1e32;\n  box-shadow: 0 8px 20px 0 rgba(22, 15, 24, 0.6);\n  color: #bb8fce; }\n.nb-theme-Lava :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #211625; }\n.nb-theme-Lava :host ::ng-deep [nbButton]:hover, .nb-theme-Lava :host ::ng-deep [nbButton].hover {\n  background: #876e92; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #765883;\n  text-transform: uppercase; }\n.nb-theme-Lava :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Lava :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #876e92; }\n.nb-theme-Lava :host ::ng-deep [nbInput] {\n  background-color: #25192a; }\n.nb-theme-Lava :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Lava :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #765883; }\n.nb-theme-Lava :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #5f416c; }\n.nb-theme-Lava :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #5f416c; }\n.nb-theme-Lava :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #5f416c; }\n.nb-theme-Lava :host ::ng-deep .alert-modal-content {\n  background: #2c1e32 !important;\n  background-color: #2c1e32 !important; }\n.nb-theme-Lava :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #765883; }\n.nb-theme-Lava :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #765883; }\n.nb-theme-Lava :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Lava :host .platformHeader {\n  background: #2c1e32;\n  z-index: 999999999999; }\n.nb-theme-Lava :host .footer-main {\n  background: #2c1e32;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Lava :host .trader-text {\n  color: #5c3f69; }\n.nb-theme-Lava :host .profit-date {\n  color: #5c3f69; }\n.nb-theme-Lava :host .conversion-input, .nb-theme-Lava :host .conversion-input2 {\n  caret-color: #2c1e32;\n  background-color: #25192a;\n  color: #fff; }\n.nb-theme-Lava :host .conversion-input:focus {\n  background-color: #25192a;\n  color: #fff; }\n.nb-theme-Lava :host .wzrdgroup-link {\n  color: #bb8fce; }\n.nb-theme-Lava :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Lava :host nb-tooltip.primary-tooltip {\n  background-color: #765883; }\n.nb-theme-Lava :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #765883; }\n.nb-theme-Lava :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Lava :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Lava :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Lava :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Witches :host ::ng-deep .dark-row {\n  background-color: #0b223b; }\n.nb-theme-Witches :host ::ng-deep td {\n  border-right: 2px solid #0e2c4c; }\n.nb-theme-Witches :host ::ng-deep .nb-chevron-up,\n.nb-theme-Witches :host ::ng-deep .nb-chevron-down {\n  color: #0e2c4c; }\n.nb-theme-Witches :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #0a2038; }\n.nb-theme-Witches :host ::ng-deep thead td {\n  background-color: #2c65a2 !important;\n  border-right: 2px solid #0e2c4c; }\n.nb-theme-Witches :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Witches :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-primary {\n  background: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Witches :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Witches :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #b2cde9; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Witches :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Witches :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #4879ad; }\n.nb-theme-Witches :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep nb-card.select nb-option {\n  background: #0e2c4c;\n  color: #7bb0ea; }\n.nb-theme-Witches :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Witches :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Witches :host ::ng-deep nb-card {\n  background: #0e2c4c;\n  box-shadow: 0 8px 20px 0 rgba(7, 22, 37, 0.6);\n  color: #7bb0ea; }\n.nb-theme-Witches :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #0a2038; }\n.nb-theme-Witches :host ::ng-deep [nbButton]:hover, .nb-theme-Witches :host ::ng-deep [nbButton].hover {\n  background: #4879ad; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #2c65a2;\n  text-transform: uppercase; }\n.nb-theme-Witches :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Witches :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #4879ad; }\n.nb-theme-Witches :host ::ng-deep [nbInput] {\n  background-color: #0c2642; }\n.nb-theme-Witches :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Witches :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #2c65a2; }\n.nb-theme-Witches :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #29588b; }\n.nb-theme-Witches :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #29588b; }\n.nb-theme-Witches :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #29588b; }\n.nb-theme-Witches :host ::ng-deep .alert-modal-content {\n  background: #0e2c4c !important;\n  background-color: #0e2c4c !important; }\n.nb-theme-Witches :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Witches :host .platformHeader {\n  background: #0e2c4c;\n  z-index: 999999999999; }\n.nb-theme-Witches :host .footer-main {\n  background: #0e2c4c;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Witches :host .trader-text {\n  color: #285587; }\n.nb-theme-Witches :host .profit-date {\n  color: #285587; }\n.nb-theme-Witches :host .conversion-input, .nb-theme-Witches :host .conversion-input2 {\n  caret-color: #0e2c4c;\n  background-color: #0c2642;\n  color: #fff; }\n.nb-theme-Witches :host .conversion-input:focus {\n  background-color: #0c2642;\n  color: #fff; }\n.nb-theme-Witches :host .wzrdgroup-link {\n  color: #7bb0ea; }\n.nb-theme-Witches :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Witches :host nb-tooltip.primary-tooltip {\n  background-color: #2c65a2; }\n.nb-theme-Witches :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #2c65a2; }\n.nb-theme-Witches :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Witches :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Witches :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Witches :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Candy :host ::ng-deep .dark-row {\n  background-color: #6e6c7e; }\n.nb-theme-Candy :host ::ng-deep td {\n  border-right: 2px solid #8c8a9e; }\n.nb-theme-Candy :host ::ng-deep .nb-chevron-up,\n.nb-theme-Candy :host ::ng-deep .nb-chevron-down {\n  color: #8c8a9e; }\n.nb-theme-Candy :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #62606e; }\n.nb-theme-Candy :host ::ng-deep thead td {\n  background-color: #6c6984 !important;\n  border-right: 2px solid #8c8a9e; }\n.nb-theme-Candy :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Candy :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #6c6984; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-primary {\n  background: #6c6984; }\n.nb-theme-Candy :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Candy :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Candy :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #d7d5e2; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Candy :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Candy :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #7f7c93; }\n.nb-theme-Candy :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #6c6984; }\n.nb-theme-Candy :host ::ng-deep nb-card.select nb-option {\n  background: #8c8a9e;\n  color: #c4c1da; }\n.nb-theme-Candy :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Candy :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Candy :host ::ng-deep nb-card {\n  background: #8c8a9e;\n  box-shadow: 0 8px 20px 0 rgba(68, 67, 77, 0.6);\n  color: #c4c1da; }\n.nb-theme-Candy :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #62606e; }\n.nb-theme-Candy :host ::ng-deep [nbButton]:hover, .nb-theme-Candy :host ::ng-deep [nbButton].hover {\n  background: #7f7c93; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #6c6984;\n  text-transform: uppercase; }\n.nb-theme-Candy :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Candy :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #7f7c93; }\n.nb-theme-Candy :host ::ng-deep [nbInput] {\n  background-color: #7b7a8b; }\n.nb-theme-Candy :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Candy :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #6c6984; }\n.nb-theme-Candy :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #4d4964; }\n.nb-theme-Candy :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #4d4964; }\n.nb-theme-Candy :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #4d4964; }\n.nb-theme-Candy :host ::ng-deep .alert-modal-content {\n  background: #8c8a9e !important;\n  background-color: #8c8a9e !important; }\n.nb-theme-Candy :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #6c6984; }\n.nb-theme-Candy :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #6c6984; }\n.nb-theme-Candy :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Candy :host .platformHeader {\n  background: #8c8a9e;\n  z-index: 999999999999; }\n.nb-theme-Candy :host .footer-main {\n  background: #8c8a9e;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Candy :host .trader-text {\n  color: #4b4761; }\n.nb-theme-Candy :host .profit-date {\n  color: #4b4761; }\n.nb-theme-Candy :host .conversion-input, .nb-theme-Candy :host .conversion-input2 {\n  caret-color: #8c8a9e;\n  background-color: #7b7a8b;\n  color: #fff; }\n.nb-theme-Candy :host .conversion-input:focus {\n  background-color: #7b7a8b;\n  color: #fff; }\n.nb-theme-Candy :host .wzrdgroup-link {\n  color: #c4c1da; }\n.nb-theme-Candy :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Candy :host nb-tooltip.primary-tooltip {\n  background-color: #6c6984; }\n.nb-theme-Candy :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #6c6984; }\n.nb-theme-Candy :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Candy :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Candy :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Candy :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Mother_Nature :host ::ng-deep .dark-row {\n  background-color: #0c2825; }\n.nb-theme-Mother_Nature :host ::ng-deep td {\n  border-right: 2px solid #16403c; }\n.nb-theme-Mother_Nature :host ::ng-deep .nb-chevron-up,\n.nb-theme-Mother_Nature :host ::ng-deep .nb-chevron-down {\n  color: #16403c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #0f2f2c; }\n.nb-theme-Mother_Nature :host ::ng-deep thead td {\n  background-color: #2f615c !important;\n  border-right: 2px solid #16403c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Mother_Nature :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary {\n  background: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Mother_Nature :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Mother_Nature :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #96cec9; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #4b7571; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card.select nb-option {\n  background: #16403c;\n  color: #43b3a8; }\n.nb-theme-Mother_Nature :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card {\n  background: #16403c;\n  box-shadow: 0 8px 20px 0 rgba(10, 31, 29, 0.6);\n  color: #43b3a8; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #0f2f2c; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton]:hover, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].hover {\n  background: #4b7571; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #2f615c;\n  text-transform: uppercase; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Mother_Nature :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #4b7571; }\n.nb-theme-Mother_Nature :host ::ng-deep [nbInput] {\n  background-color: #0e2d2a; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #205d57; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #205d57; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #205d57; }\n.nb-theme-Mother_Nature :host ::ng-deep .alert-modal-content {\n  background: #16403c !important;\n  background-color: #16403c !important; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Mother_Nature :host .platformHeader {\n  background: #16403c;\n  z-index: 999999999999; }\n.nb-theme-Mother_Nature :host .footer-main {\n  background: #16403c;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Mother_Nature :host .trader-text {\n  color: #1f5a54; }\n.nb-theme-Mother_Nature :host .profit-date {\n  color: #1f5a54; }\n.nb-theme-Mother_Nature :host .conversion-input, .nb-theme-Mother_Nature :host .conversion-input2 {\n  caret-color: #16403c;\n  background-color: #0e2d2a;\n  color: #fff; }\n.nb-theme-Mother_Nature :host .conversion-input:focus {\n  background-color: #0e2d2a;\n  color: #fff; }\n.nb-theme-Mother_Nature :host .wzrdgroup-link {\n  color: #43b3a8; }\n.nb-theme-Mother_Nature :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Mother_Nature :host nb-tooltip.primary-tooltip {\n  background-color: #2f615c; }\n.nb-theme-Mother_Nature :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #2f615c; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Mother_Nature :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Mother_Nature :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Mother_Nature :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-Mystic :host ::ng-deep .dark-row {\n  background-color: #1c121c; }\n.nb-theme-Mystic :host ::ng-deep td {\n  border-right: 2px solid #2a1b2a; }\n.nb-theme-Mystic :host ::ng-deep .nb-chevron-up,\n.nb-theme-Mystic :host ::ng-deep .nb-chevron-down {\n  color: #2a1b2a; }\n.nb-theme-Mystic :host ::ng-deep nb-tabset .tabset {\n  border-bottom: 1px solid #1d131d; }\n.nb-theme-Mystic :host ::ng-deep thead td {\n  background-color: #5f445f !important;\n  border-right: 2px solid #2a1b2a; }\n.nb-theme-Mystic :host ::ng-deep nb-card.select.primary {\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host ::ng-deep nb-card.select.primary nb-option:hover, .nb-theme-Mystic :host ::ng-deep .nb-theme-armyCamo nb-card.select.primary nb-option.selected {\n  background-color: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary {\n  background: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep .btn-primary:not(:disabled):not(.disabled):active, .nb-theme-Mystic :host ::ng-deep .btn-primary:not(:disabled):not(.disabled).active, .nb-theme-Mystic :host ::ng-deep .show > .btn-primary.dropdown-toggle {\n  border-color: #c6a9c6; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary:active, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary.active, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-primary:active:focus {\n  background: #745d74; }\n.nb-theme-Mystic :host ::ng-deep nb-card.select.primary nb-option.selected {\n  background: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep nb-card.select nb-option {\n  background: #2a1b2a;\n  color: #a269a2; }\n.nb-theme-Mystic :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Mystic :host ::ng-deep nb-select button {\n  max-width: unset !important;\n  text-align: center; }\n.nb-theme-Mystic :host ::ng-deep nb-card {\n  background: #2a1b2a;\n  box-shadow: 0 8px 20px 0 rgba(20, 13, 20, 0.6);\n  color: #a269a2; }\n.nb-theme-Mystic :host ::ng-deep nb-card-header {\n  border-bottom: 1px solid #1d131d; }\n.nb-theme-Mystic :host ::ng-deep [nbButton]:hover, .nb-theme-Mystic :host ::ng-deep [nbButton].hover {\n  background: #745d74; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-outline.btn-primary {\n  border: 2px solid #5f445f;\n  text-transform: uppercase; }\n.nb-theme-Mystic :host ::ng-deep [nbButton].btn-outline.btn-primary:hover, .nb-theme-Mystic :host ::ng-deep [nbButton].btn-outline.btn-primary.hover {\n  background: #745d74; }\n.nb-theme-Mystic :host ::ng-deep [nbInput] {\n  background-color: #201420; }\n.nb-theme-Mystic :host ::ng-deep nb-toast.info {\n  border-color: #08f;\n  background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#08f));\n  background-image: linear-gradient(to right, #00b3ff, #08f);\n  color: #fff; }\n.nb-theme-Mystic :host ::ng-deep nb-datepicker-container {\n  border: 2px solid #5f445f; }\n.nb-theme-Mystic :host ::ng-deep nb-calendar-day-picker .day-cell.disabled {\n  background: #704270; }\n.nb-theme-Mystic :host ::ng-deep nb-calendar-year-picker .year-cell.today {\n  background: #704270; }\n.nb-theme-Mystic :host ::ng-deep nb-calendar-year-picker .year-cell.disabled {\n  background: #704270; }\n.nb-theme-Mystic :host ::ng-deep .alert-modal-content {\n  background: #2a1b2a !important;\n  background-color: #2a1b2a !important; }\n.nb-theme-Mystic :host ::ng-deep nb-tooltip.primary-tooltip {\n  background-color: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep .primary-tooltip {\n  max-width: 600px; }\n.nb-theme-Mystic :host .platformHeader {\n  background: #2a1b2a;\n  z-index: 999999999999; }\n.nb-theme-Mystic :host .footer-main {\n  background: #2a1b2a;\n  text-align: left;\n  font-weight: 500; }\n.nb-theme-Mystic :host .trader-text {\n  color: #6c406c; }\n.nb-theme-Mystic :host .profit-date {\n  color: #6c406c; }\n.nb-theme-Mystic :host .conversion-input, .nb-theme-Mystic :host .conversion-input2 {\n  caret-color: #2a1b2a;\n  background-color: #201420;\n  color: #fff; }\n.nb-theme-Mystic :host .conversion-input:focus {\n  background-color: #201420;\n  color: #fff; }\n.nb-theme-Mystic :host .wzrdgroup-link {\n  color: #a269a2; }\n.nb-theme-Mystic :host .wzrdgroup-link:hover {\n  text-decoration: none; }\n.nb-theme-Mystic :host nb-tooltip.primary-tooltip {\n  background-color: #5f445f; }\n.nb-theme-Mystic :host nb-tooltip.primary-tooltip .arrow {\n  border-bottom-color: #5f445f; }\n.nb-theme-Mystic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .front-container {\n  min-width: 100%; }\n.nb-theme-Mystic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n  padding: 11px 15px; }\n@media (min-width: 768px) {\n    .nb-theme-Mystic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container .reveal-button {\n      padding: 15px 15px; } }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .nb-theme-Mystic :host ::ng-deep nb-layout .scrollable-container .layout .layout-container nb-card nb-card-header nb-select .btn-primary {\n    font-size: 16px; } }\n.bold * {\n  font-weight: 900 !important; }\n.bold i {\n  font-size: 1.2em; }\n.f-h {\n  height: calc(100% - 1rem); }\n.demo-chart {\n  height: 120px; }\n.conversion-input, .conversion-input2 {\n  border-radius: 0 8px 8px 0;\n  padding: 0 16px;\n  text-align: right;\n  border: none; }\n.nb-arrow-right, .nb-arrow-left {\n  font-size: 1.25rem !important; }\n.nb-arrow-up, .nb-arrow-down {\n  font-size: 1.25rem; }\n.inline-img {\n  display: inline-block; }\n.back-container {\n  max-width: 100%; }\n.flipped .flipcard-body .back-container {\n  max-width: 100% !important; }\n#totalPrice {\n  text-align: right; }\ninput[type=number]::-webkit-inner-spin-button,\ninput[type=number]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0; }\n.trader-text {\n  font-weight: 700;\n  font-size: 2.3rem; }\n.barSubTitle {\n  position: absolute;\n  top: 40px; }\n.padding-graph {\n  padding-bottom: 30px; }\n.nb-arrow-dropdown {\n  color: #f00f00; }\n#table-live-trades .flex {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center; }\n#table-live-trades {\n  overflow: hidden; }\n.test-div2 {\n  margin-bottom: 18px; }\n@media (min-width: 768px) {\n    .test-div2 {\n      margin-bottom: 19px; } }\n@media (min-width: 992px) {\n    .test-div2 {\n      margin-bottom: 30px; } }\n@media (min-width: 1200px) {\n    .test-div2 {\n      margin-bottom: 30px; } }\n@media (min-width: 992px) and (max-width: 1199.98px) {\n  .row-1-c-title {\n    font-size: .9rem; } }\n.front-container {\n  min-width: 100%; }\n.button-width {\n  width: 120px; }\n@media (min-width: 576px) and (max-width: 767.98px) {\n  [nbButton] {\n    font-size: 16px; } }\n.btn-primary {\n  font-size: 12px; }\n.flex-arrow {\n  font-size: 18px; }\n@media (min-width: 768px) {\n    .flex-arrow {\n      font-size: 20px; } }\n@media (min-width: 992px) {\n    .flex-arrow {\n      font-size: 16px; } }\n@media (min-width: 992px) {\n    .flex-arrow {\n      font-size: 18px; } }\n.pibl-coin {\n  font-size: 1rem;\n  margin-top: 1px; }\n@media (min-width: 768px) {\n    .pibl-coin {\n      font-size: 1.125rem; } }\n@media (min-width: 992px) {\n    .pibl-coin {\n      font-size: 12px; } }\n@media (min-width: 1200px) {\n    .pibl-coin {\n      font-size: 14px;\n      margin-top: -3px; } }\n.pibl-title {\n  top: -10px;\n  margin: 3px 0 4px 0; }\n@media (min-width: 768px) {\n    .pibl-title {\n      margin: 2px 0 2px 0; } }\n.pibl-subtitle {\n  font-size: 1.125rem; }\n.coin-price {\n  margin-top: 15px; }\n.default-view-pie {\n  width: 50% !important;\n  left: auto !important;\n  right: 0;\n  opacity: 1;\n  position: absolute;\n  height: 100%;\n  border-top-right-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  font-size: 1.125rem; }\n.default-view-balance {\n  width: 50% !important;\n  left: 0;\n  opacity: 1;\n  position: absolute;\n  height: 100%;\n  padding-left: 5px !important; }\n@media (min-width: 768px) {\n    .default-view-balance {\n      padding-left: 5px !important; } }\n/*\n[_nghost-c18] .second-card-container[_ngcontent-c18] nb-card-back {\n\ttop: 0 !important;\n\tright: 0% !important;\n\ttransition: right 1s ease;\n}*/\n.new-pie-chart {\n  width: 50%;\n  left: 0; }\n.descriptor-pie {\n  padding: 8px 4px 8px 4px;\n  margin: 0 auto;\n  margin-left: 0;\n  margin-top: 90px; }\n@media (min-width: 768px) {\n    .descriptor-pie {\n      padding-left: 5px !important;\n      margin: 0 auto;\n      margin-top: 90px; } }\n.pie-card {\n  padding: 0 !important;\n  box-shadow: none;\n  margin-bottom: 0 !important;\n  border-radius: 0 !important; }\ni.nb-edit.edit {\n  position: absolute;\n  right: 15px; }\n.test-div .second-card-container {\n  left: auto !important;\n  right: 0; }\n.test-div2 .second-card-container {\n  width: 50% !important;\n  left: 0;\n  height: 300px;\n  top: -20px !important;\n  background: transparent; }\n@media (min-width: 768px) {\n    .test-div2 .second-card-container {\n      width: 44% !important; } }\n@media (min-width: 992px) {\n    .test-div2 .second-card-container {\n      width: 70% !important; } }\n@media (min-width: 1200px) {\n    .test-div2 .second-card-container {\n      width: 44% !important; } }\n.balance-items-container {\n  padding-left: 5px;\n  margin-top: -12px;\n  margin-bottom: 25px; }\n@media (min-width: 768px) {\n    .balance-items-container {\n      margin-top: -15px; } }\n@media (min-width: 992px) {\n    .balance-items-container {\n      margin-top: -19px; } }\n.balance-item-price {\n  font-size: 1.35rem; }\n@media (min-width: 992px) {\n    .balance-item-price {\n      font-size: 1.5vmin; } }\n@media (min-width: 1200px) {\n    .balance-item-price {\n      font-size: 1.6vmin; } }\n.balance-item-percent {\n  font-size: 16px;\n  margin-top: 5px; }\n@media (min-width: 768px) {\n    .balance-item-percent {\n      margin-top: 6px;\n      font-size: 14px; } }\n@media (min-width: 992px) {\n    .balance-item-percent {\n      margin-top: 4px;\n      font-size: 11px; } }\n.chart4selector .revealed .second-card-container {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border-top-right-radius: 0;\n  height: 100%;\n  top: 65px !important;\n  width: 100%; }\n@media (min-width: 768px) {\n    .chart4selector .revealed .second-card-container {\n      width: 50%;\n      top: 65px !important; } }\n.revealed .default-view-balance {\n  opacity: 0 !important; }\n.pibl-title {\n  font-size: 1.35rem; }\n@media (min-width: 992px) {\n    .pibl-title {\n      font-size: 1.5vmin; } }\n@media (min-width: 1200px) {\n    .pibl-title {\n      font-size: 1.6vmin; } }\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-default :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-cosmic :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n  font-size: 16px; }\n@media (min-width: 768px) {\n    .nb-theme-corporate :host ::ng-deep nb-card nb-card-header nb-select .btn-primary {\n      font-size: 1.125rem; } }\n.coinImage {\n  width: 20px; }\n.col-2 {\n  font-size: .5rem; }\n@media (min-width: 768px) {\n    .col-2 {\n      font-size: 12px; } }\n@media (min-width: 992px) {\n    .col-2 {\n      font-size: 14px; } }\n.coinImg {\n  width: 15px;\n  margin-right: 10px; }\n@media (min-width: 768px) {\n    .coinImg {\n      width: 20px; } }\n.coinImage {\n  margin-right: 10px; }\n.button-width {\n  width: 120px; }\n.flex-row {\n  -webkit-box-align: center;\n          align-items: center;\n  padding: 0 1vmin;\n  font-size: 10px; }\n@media (min-width: 768px) {\n    .flex-row {\n      padding: 0 1vmin;\n      font-size: 1rem; } }\n@media (min-width: 992px) {\n    .flex-row {\n      padding: 0 2vmin;\n      font-size: 1rem; } }\n@media (min-width: 1200px) {\n    .flex-row {\n      padding: 0 3vmin;\n      font-size: 1rem; } }\n.col-33 {\n  width: 33.33%; }\n.col-19 {\n  width: 18%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.col-18 {\n  width: 17%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.col-21 {\n  width: 20%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.col-24 {\n  width: 28%;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n          justify-content: center; }\n.row-coin {\n  line-height: 0; }\n@media (min-width: 1200px) {\n  .flex-direction-fix {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: normal !important;\n            flex-direction: column !important; } }\n@media (min-width: 1200px) {\n  .flex-direction-fix .col-xl-12 {\n    -webkit-box-flex: 0;\n            flex: 0; } }\n.traders-loading-card {\n  width: 100%;\n  height: 100%;\n  opacity: 1;\n  position: fixed;\n  z-index: 9999999;\n  top: 0; }\n.reconnecting-card {\n  width: 100%;\n  height: 100%;\n  opacity: .8;\n  position: fixed;\n  z-index: 999999;\n  top: 0; }\n.nbButtonIcon {\n  background: transparent;\n  border: none;\n  color: #d1d1ff;\n  padding: 0; }\nnb-card {\n  overflow: hidden; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/pages/trader-v/trader-v.component.ts":
/*!******************************************************!*\
  !*** ./src/app/pages/trader-v/trader-v.component.ts ***!
  \******************************************************/
/*! exports provided: TraderVComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraderVComponent", function() { return TraderVComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _VHubService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VHubService */ "./src/app/pages/trader-v/VHubService.ts");
/* harmony import */ var _ochart1new_ochart1new_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ochart1new/ochart1new.component */ "./src/app/pages/trader-v/ochart1new/ochart1new.component.ts");
/* harmony import */ var _TraderVService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraderVService */ "./src/app/pages/trader-v/TraderVService.ts");
/* harmony import */ var _flipchart2m_flipchart2m_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./flipchart2m/flipchart2m.component */ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.ts");
/* harmony import */ var _flipchart3m_flipchart3m_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./flipchart3m/flipchart3m.component */ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.ts");
/* harmony import */ var _chart1m_chart1m_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chart1m/chart1m.component */ "./src/app/pages/trader-v/chart1m/chart1m.component.ts");
/* harmony import */ var _chart2m_chart2m_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chart2m/chart2m.component */ "./src/app/pages/trader-v/chart2m/chart2m.component.ts");
/* harmony import */ var _chart3m_chart3m_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chart3m/chart3m.component */ "./src/app/pages/trader-v/chart3m/chart3m.component.ts");
/* harmony import */ var _chart4new_chart4new_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chart4new/chart4new.component */ "./src/app/pages/trader-v/chart4new/chart4new.component.ts");
/* harmony import */ var _table2_table2_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./table2/table2.component */ "./src/app/pages/trader-v/table2/table2.component.ts");
/* harmony import */ var _chart6_chart6_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./chart6/chart6.component */ "./src/app/pages/trader-v/chart6/chart6.component.ts");
/* harmony import */ var _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./chart10/chart10.component */ "./src/app/pages/trader-v/chart10/chart10.component.ts");
/* harmony import */ var _dataservice_app_constant_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../dataservice/app.constant.component */ "./src/app/pages/dataservice/app.constant.component.ts");
/* harmony import */ var _nebular_theme__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @nebular/theme */ "./node_modules/@nebular/theme/index.js");
/* harmony import */ var _dataservice_utility_dataservice_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../dataservice/utility.dataservice.component */ "./src/app/pages/dataservice/utility.dataservice.component.ts");
/* harmony import */ var _dataservice_apiservice_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../dataservice/apiservice.component */ "./src/app/pages/dataservice/apiservice.component.ts");
/* harmony import */ var _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../dataservice/streamer.utility.js */ "./src/app/pages/dataservice/streamer.utility.js");




















var TraderVComponent = /** @class */ (function () {
    function TraderVComponent(hubService, _dataservice, traderService, _passingDataservice, dialogService, _configuration, toastrService) {
        var _this = this;
        this.hubService = hubService;
        this._dataservice = _dataservice;
        this.traderService = traderService;
        this._passingDataservice = _passingDataservice;
        this.dialogService = dialogService;
        this._configuration = _configuration;
        this.toastrService = toastrService;
        this.data_mkperformance = [
        // { value: 186284553, name: 'Bitcoin', shortCoin: 'BTC', color:'green', arrow:'nb-arrow-dropup' },
        // { value: 23796204, name: 'Ethereum', shortCoin: 'ETH', color:'green', arrow:'nb-arrow-dropup' },
        // { value: 13904981, name: 'Ripple', shortCoin: 'XRP', color:'green', arrow:'nb-arrow-dropup' },
        // { value: 6144005, name: 'Litecoin', shortCoin: 'LTC' , color:'green', arrow:'nb-arrow-dropup'},
        // { value: 5648801, name: 'Bitcoin Cash', shortCoin: 'BCH', color:'green', arrow:'nb-arrow-dropup' },
        // { value: 4655438, name: 'Binance Coin', shortCoin: 'BNB', color:'green', arrow:'nb-arrow-dropup' },
        ];
        this.btcTrade = [];
        this.xrpTrade = [];
        this.ethTrade = [];
        this.ltcTrade = [];
        this.TotalMarketCap = {};
        this.TotalMarketCapArr = [];
        this.MarketDominance = {};
        this.fsym = "BTC";
        this.tsym = "USD";
        this.totalCoins = 0;
        this.totalExchanges = 0;
        this.allcoinhistory = [];
        this.loadingLiveTrade = true;
        this.reconnecting = false;
        this.initialLoading = true;
        this.loadingSocket = true;
        this.defaultData = "BTC";
        this.currentPrice = {};
        this.TotalVolume = {};
        this.firstRowActualData_1 = [];
        this.personalBalance = [];
        this.baseData = [];
        this.coinData = [{ name: 'BTC', percent: 0, data: [] }, { name: 'XRP', percent: 0, data: [] }, { name: 'ETH', percent: 0, data: [] }, { name: 'LTC', percent: 0, data: [] }];
        this.PriceMKTCap = [{ name: 'BTC', percent: 0, data_1: [], data_2: [], data_3: [] }, { name: 'XRP', percent: 0, data_1: [], data_2: [], data_3: [] }, { name: 'ETH', percent: 0, data_1: [], data_2: [], data_3: [] }, { name: 'LTC', percent: 0, data_1: [], data_2: [], data_3: [] }];
        this.totalBalance = {};
        this.TopCoinData = [];
        this.liveTrade = [];
        this.now = new Date();
        this.oneDay = 24 * 3600 * 1000;
        this.value = Math.random() * 1000;
        this.balanceHistory = [];
        this.coinHistory = [];
        this.selectionName = 'BTC';
        this.lineSelectionName = 'BTC';
        this.c4selection = "TOTAL";
        this.coinPercentage = 0;
        this.marketPerformance = {};
        this.m2Selection = "BTC";
        this.m3Selection = "BTC";
        this.c6Selection = "BTC";
        this.BTC50Data = [];
        this.XRP50Data = [];
        this.ETH50Data = [];
        this.LTC50Data = [];
        this.balance = { value: 0, percent: 0 };
        this.liveTradeLoading = false;
        this.purchaseValue = 0;
        this.traderHistory = [];
        this.coinSelected = "BTC";
        this.currencySelected = "USD";
        this.convertingValues = false;
        this.pressed = false;
        this.convertedValue = "";
        this.digitalDashMin = 0;
        this.digitalDashMax = 0;
        this.vcd_history = { MarketDominance: 0, TotalMarketCap: 0, TotalVolume: 0 };
        this.isDigitalLoading = false;
        this.convertValues = function (event) {
            // console.log(event);
            if (!_this.convertInterval) {
                _this.convertInterval = setTimeout(function () {
                    _this.makeConversionCall(event);
                }, 1000);
            }
            else {
                // console.log('inside else')
                clearInterval(_this.convertInterval);
                _this.convertingValues = null;
                _this.convertInterval = setTimeout(function () {
                    _this.makeConversionCall(event);
                }, 1000);
            }
        };
        this.changeCoin = function (event, value) {
            _this.coinSelected = event;
            if (!isNaN(value)) {
                _this.makeConversionCall(value);
            }
        };
        this.changeCurrency = function (event, value) {
            _this.currencySelected = event;
            if (!isNaN(value)) {
                _this.makeConversionCall(value);
            }
        };
        this.getCoinMinMax = function (coinName) {
            _this.isDigitalLoading = true;
            _this._dataservice
                .postCall(_this._configuration.getCoinHighLow, { coinName: coinName })
                .subscribe(function (resp) {
                _this.isDigitalLoading = false;
                if (resp.status === _this._configuration.ResponseStatusError) {
                    _this.toastrService.show(_this._configuration.ErrorFetchingContent, '', {
                        status: _this._configuration.ToasterStatusError,
                        duration: _this._configuration.ToasterDuration,
                        position: _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbGlobalLogicalPosition"].BOTTOM_END
                    });
                    return;
                }
                _this.isDigitalLoading = false;
                _this.digitalDashMax = resp.highLow.high;
                _this.digitalDashMin = resp.highLow.low;
            }, function (error) {
                // console.log(error);
                _this.toastrService.show(_this._configuration.ErrorFetchingResult, '', {
                    status: _this._configuration.ToasterStatusError,
                    duration: _this._configuration.ToasterDuration,
                    position: _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbGlobalLogicalPosition"].BOTTOM_END
                });
                _this.isDigitalLoading = false;
            }, function () {
                _this.isDigitalLoading = false;
            });
        };
        this.makeConversionCall = function (value) {
            _this.convertingValues = true;
            _this._dataservice
                .postCall(_this._configuration.convertValuesApi, { coinName: _this.coinSelected, currencyName: _this.currencySelected, amount: value })
                .subscribe(function (resp) {
                _this.convertingValues = false;
                if (resp.status === _this._configuration.ResponseStatusError) {
                    _this.toastrService.show(_this._configuration.ErrorFetchingContent, '', {
                        status: _this._configuration.ToasterStatusError,
                        duration: _this._configuration.ToasterDuration,
                        position: _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbGlobalLogicalPosition"].BOTTOM_END
                    });
                    return;
                }
                _this.convertedValue = parseFloat(resp.value).toLocaleString('en-GB');
            }, function (error) {
                // console.log(error);
                _this.toastrService.show(_this._configuration.ErrorFetchingResult, '', {
                    status: _this._configuration.ToasterStatusError,
                    duration: _this._configuration.ToasterDuration,
                    position: _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbGlobalLogicalPosition"].BOTTOM_END
                });
                _this.convertingValues = false;
            }, function () {
                _this.convertingValues = false;
            });
        };
        this.getAPIData = function () {
            _this._dataservice
                .getAll(_this._configuration.getTradersApi)
                .subscribe(function (resp) {
                if (resp.status === _this._configuration.ResponseStatusError) {
                    _this.initialLoading = false;
                    // this.toastrService.show(this._configuration.ErrorFetchingContent, '',
                    // {
                    //     status: this._configuration.ToasterStatusError,
                    //     duration: this._configuration.ToasterDuration,
                    //     position: this._configuration.ToasterPosition
                    // });
                    return;
                }
                _this.initialLoading = false;
                // console.log(resp);
                resp.portfolioCoinList.map(function (x) {
                    _this.purchaseValue += x.CoinValue;
                    _this.personalBalance.push({ name: x.CoinName, quantity: x.CoinCount, value: 0, percent: 0, purchased: x.CoinValue });
                    _this.baseData.push({ name: x.CoinName, coin: x.CoinCount, value: 0, price: 0, percent: 0, change: 0, arrow: "nb-arrow-dropup", color: "#00ff39", img: "./assets/Coins/" + x.CoinName.toLowerCase() + ".png", });
                });
                _this.traderHistory = resp.traderHistory;
                _this.digitalDashMax = resp.coinHighLow.high;
                _this.digitalDashMin = resp.coinHighLow.low;
                _this.Chart1Componentm.setProfitHistory(resp.profit);
                _this.Chart1Componentm.setChart8Data(_this.traderHistory);
                _this.Chart2Componentm.setChart9Data(resp.changeHistory);
                _this.vcd_history = resp.vcd_history;
                // this.allTimeHigh.value=resp.allTimeHighHistory?resp.allTimeHighHistory.TotalHigh:0;
                // this.allTimeHigh.date=resp.allTimeHighHistory?resp.allTimeHighHistory.forDate:0;
                // this.allTimeLow.value=resp.allTimeLowHistory?resp.allTimeLowHistory.TotalLow:0;
                // this.allTimeLow.date=resp.allTimeLowHistory?resp.allTimeLowHistory.forDate:0;
                // this.topPerformers=resp.topPerformers;
                // this.watchList=resp.watchList;
                // this.history=resp.history;
            }, function (error) {
                // console.log(error);
                _this.toastrService.show(_this._configuration.ErrorFetchingResult, '', {
                    status: _this._configuration.ToasterStatusError,
                    duration: _this._configuration.ToasterDuration,
                    position: _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbGlobalLogicalPosition"].BOTTOM_END
                });
                _this.initialLoading = false;
            }, function () {
            });
        };
        this.changec3mSelection = function (event) {
            _this.m3Selection = event;
            _this.Chart3Componentm.setClearForChart10();
        };
        this.changeLiveTrades = function (event) {
            _this.fsym = event;
            // this.liveTrade=[];
            // this.traderService.removeSubscription(this.liveSubs);
            // this.getLiveTrade();
        };
        // getLiveTrade=()=>{
        //   this.liveTradeLoading=true;
        //   this._dataservice.getAllOutside<any>(`https://min-api.cryptocompare.com/data/subs?fsym=${this.fsym}&tsyms=${this.tsym}`)
        //   .subscribe(data=>{
        //     let subs = data['USD']['TRADES'];
        //     this.liveSubs=subs;
        //     this.traderService.setSubscription(subs);
        //     this.traderService.getMessages().subscribe((message:any)=>{
        //       this.loadingLiveTrade=false;
        //       this.liveTradeLoading=false;
        //       var tradeField = message.message.substr(0, message.message.indexOf("~"));
        //       if (tradeField == CCC.STATIC.TYPE.TRADE) {
        //         this.transformData(message.message);
        //       }
        //     })
        //   })
        // }
        this.getLiveTrade = function () {
            _this.liveTradeLoading = true;
            _this._dataservice.getAllOutside("https://min-api.cryptocompare.com/data/subs?fsym=BTC&tsyms=" + _this.tsym)
                .subscribe(function (data) {
                var btcSubs = data['USD']['TRADES'];
                _this._dataservice.getAllOutside("https://min-api.cryptocompare.com/data/subs?fsym=LTC&tsyms=" + _this.tsym).subscribe(function (LTC) {
                    var ltcSubs = LTC['USD']['TRADES'];
                    _this._dataservice.getAllOutside("https://min-api.cryptocompare.com/data/subs?fsym=ETH&tsyms=" + _this.tsym).subscribe(function (ETH) {
                        var ethSubs = ETH['USD']['TRADES'];
                        _this._dataservice.getAllOutside("https://min-api.cryptocompare.com/data/subs?fsym=XRP&tsyms=" + _this.tsym).subscribe(function (XRP) {
                            var xrpSubs = XRP['USD']['TRADES'];
                            _this.liveSubs = btcSubs.concat(ltcSubs).concat(ethSubs).concat(xrpSubs);
                            _this.traderService.setSubscription(_this.liveSubs);
                            _this.traderService.getMessages().subscribe(function (message) {
                                _this.loadingLiveTrade = false;
                                _this.liveTradeLoading = false;
                                var tradeField = message.message.substr(0, message.message.indexOf("~"));
                                if (tradeField == _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].STATIC.TYPE.TRADE) {
                                    _this.transformData(message.message);
                                }
                            });
                        });
                    });
                });
            });
        };
        this.loadedFirstTime = false;
        this.getLiveData = function () {
            _this.hubService.getMessages().subscribe(function (message) {
                console.log(message);
                _this.loadingLiveTrade = false;
                _this.reconnecting = false;
                if (!_this.loadedFirstTime) {
                    _this.getAPIData();
                    _this.loadedFirstTime = true;
                }
                if (message.message && message.message.marquee && _this.loadedFirstTime) {
                    // if(message.disconnected)
                    // {
                    //   // this.loadingSocket=true;
                    //   this.reconnecting=true;
                    // }
                    if (!message.message || !message.message.marquee)
                        return;
                    if (message.message && message.message.marquee) {
                        _this.loadingSocket = false;
                        _this.reconnecting = false;
                    }
                    _this.marquee = message.message.marquee;
                    if (message.message && message.message.totalCoins) {
                        _this.totalCoins = message.message.totalCoins;
                    }
                    if (message.message && message.message.totalExchanges) {
                        _this.totalExchanges = message.message.totalExchanges;
                    }
                    if (message.message && message.message.MarketDominance) {
                        _this.MarketDominance = message.message.MarketDominance;
                        //((Closing volume - current volume) / closing volume ) * 100
                        _this.MarketDominance.percentNumber = (((_this.vcd_history.MarketDominance - _this.MarketDominance.value) / _this.vcd_history.MarketDominance) * 100).toFixed(2);
                        _this.MarketDominance.percent = _this.MarketDominance.percentNumber + "%";
                        //  console.log(this.marquee)
                    }
                    if (message.message && message.message.TotalMarketCap) {
                        _this.TotalMarketCap = message.message.TotalMarketCap;
                        // console.log(this.vcd_history)
                        _this.TotalMarketCap.percent = (((_this.vcd_history.TotalMarketCap - _this.TotalMarketCap.value) / _this.vcd_history.TotalMarketCap) * 100).toFixed(2);
                        _this.TotalMarketCapArr.push(message.message.TotalMarketCap.value);
                        _this.flipchart2mComponentm.setData(message.message.TotalMarketCap.value);
                    }
                    // console.log(this.TotalMarketCap);
                    if (message.message && message.message.TotalVolume) {
                        _this.TotalVolume = message.message.TotalVolume;
                        console.log(_this.vcd_history.TotalVolume);
                        console.log(_this.TotalVolume.value);
                        _this.TotalVolume.percentNumber = (((_this.vcd_history.TotalVolume - _this.TotalVolume.value) / _this.vcd_history.TotalVolume) * 100).toFixed(2);
                        _this.TotalVolume.percent = _this.TotalVolume.percent;
                        _this.flipchart3mComponentm.setData(_this.TotalVolume.value, _this.TotalVolume);
                        //console.log(this.TotalVolume);
                    }
                    if (_this.marquee) {
                        _this.marketPerformance = {
                            totalCoins: _this.totalExchanges,
                            totalExchanges: _this.totalExchanges,
                            BTCData: _this.marquee.filter(function (x) { return x.type === "BTC"; })
                        };
                        var bVal_1 = 0;
                        var purchasedVal_1 = 0;
                        var bPercent_1 = 0;
                        _this.personalBalance.map(function (x) {
                            // console.log(this.marquee.filter(r=>r.type.toString()==x.symbol));
                            var marq = _this.marquee.filter(function (r) { return r.type === x.name; })[0];
                            if (marq) {
                                var va = (x.quantity * marq.price);
                                x.arrow = va === x.value ? x.arrow : (va > x.value ? "nb-arrow-dropup" : "nb-arrow-dropdown");
                                x.color = va === x.value ? x.color : (va > x.value ? "green" : "red");
                                x.value = va;
                                purchasedVal_1 += x.purchased;
                                bVal_1 += x.value;
                                x.percent = parseFloat(marq.percent);
                                bPercent_1 += parseFloat(marq.percent);
                            }
                        });
                        _this.Chart1Componentm.setData((bVal_1 - purchasedVal_1).toFixed(2));
                        _this.balance.arrow = bVal_1 === _this.balance.value ? _this.balance.arrow : (bVal_1 > _this.balance.value ?
                            "nb-arrow-dropup" : "nb-arrow-dropdown");
                        //  this.balance.value>bVal?'nb-arrow-dropdown':'nb-arrow-dropup';
                        _this.balance.color = bVal_1 === _this.balance.value ? _this.balance.color : (bVal_1 > _this.balance.value ?
                            "green" : "red");
                        _this.balance.value = bVal_1.toFixed(2);
                        _this.balance.percent = bPercent_1.toFixed(2); //?bPercent/this.balance.length:0;
                        _this.ochart1newComponentnew.setData({ graph: _this.personalBalance, balance: _this.balance });
                        // console.log(message.message);
                        _this.Chart4Componentnew.totals(_this.marketPerformance);
                        _this.allcoinhistory = _this.allcoinhistory.concat(_this.marquee);
                        if (_this.allcoinhistory.length >= 1100) {
                            _this.allcoinhistory.splice(_this.allcoinhistory.length - 100, 100);
                        }
                        // this.BTC50Data = this.BTC50Data.concat(this.marquee.filter(x => x.type === "BTC").map(x => {
                        //   let now = new Date();
                        //   return {
                        //     name: now.toString(),
                        //     value: [
                        //       now.getTime() ,
                        //       x.price
                        //     ]
                        //   }
                        // }
                        // ));
                        // this.XRP50Data = this.BTC50Data.concat(this.marquee.filter(x => x.type === "BTC").map(x => x.price));
                        // this.ETH50Data = this.BTC50Data.concat(this.marquee.filter(x => x.type === "BTC").map(x => x.price));
                        // this.LTC50Data = this.BTC50Data.concat(this.marquee.filter(x => x.type === "BTC").map(x => x.price));
                        // if (this.m2Selection !== this.Chart2Componentm.getSelectedValue()) {
                        //   this.Chart2Componentm.clearData();
                        //   this.m2Selection = this.Chart2Componentm.getSelectedValue();
                        // }
                        var _selectionData = _this.marquee.filter(function (x) { return x.type === _this.m2Selection && x.price > 0; }).map(function (x) {
                            var now = new Date();
                            return {
                                name: now.toString(),
                                value: [
                                    (now.getTime() - ((now.getTime() / 1000 / 60 / 60 / 24 | 0) * 24 * 60 * 60 * 1000) / 1000),
                                    // now.toString(),
                                    //[now.getHours(), now.getMinutes(), now.getSeconds()].join(''),
                                    x.price
                                ],
                                percent: x.percent,
                                color: x.color,
                                arrow: x.arrow
                            };
                        })[0];
                        if (_selectionData) {
                            _this.Chart2Componentm.setDataForChart(_selectionData);
                        }
                        var _selection3Data = _this.marquee.filter(function (x) { return x.type === _this.m3Selection && x.price > 0; }).map(function (x) {
                            var now = new Date();
                            return {
                                time: now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds(),
                                mktCap: x.marketCap,
                                price: x.price,
                                color: x.color,
                                percent: x.percent,
                                arrow: x.arrow
                            };
                        })[0];
                        if (_selection3Data) {
                            _this.Chart3Componentm.setDataForChart(_selection3Data);
                            // this.Chart10Component.setChartData(_selection3Data.price);
                        }
                        if (_this.data_mkperformance.length == 0) {
                            var initials = [];
                            for (var i = 0; i < 6; i++)
                                initials.push(_this.marquee[i]);
                            initials.map(function (x) {
                                _this.data_mkperformance.push({ value: 186284553, name: x.type, shortCoin: x.type, color: 'green', arrow: 'nb-arrow-dropup' });
                            });
                            _this.Chart4Componentnew.setInitials(initials);
                        }
                        _this.data_mkperformance.map(function (x) {
                            var marq = _this.marquee.filter(function (r) { return (r.type === x.shortCoin); })[0];
                            if (marq) {
                                x.value = marq.marketCap,
                                    x.price = marq.price,
                                    x.percent = marq.percent;
                                x.arrow = marq.arrow;
                                x.color = marq.color;
                                x.TotalCoinSupply = marq.TotalCoinSupply;
                                x.supply = marq.supply;
                                x.volume = marq.volume;
                                x.TotalCoinSupply = marq.TotalCoinSupply;
                            }
                        });
                        if (_this.TotalVolume && _this.TotalMarketCap && _this.MarketDominance)
                            _this.Chart4Componentnew.setData(_this.data_mkperformance, message.message.totalCoins, message.message.totalExchanges, _this.TotalMarketCap, _this.TotalVolume, _this.MarketDominance);
                        // console.log(message.message);
                        _this.Table2Component.setData(_this.marquee);
                        // console.log(this.data_mkperformance);
                        //Chart3Componentm
                        // console.log(message.message)
                        // console.log(_selectionData.length>0)
                        //if(_selectionData && _selectionData.length>0)
                        var _c6selection = _this.marquee.filter(function (x) { return x.type === _this.c6Selection; })[0];
                        // .map(x=>{
                        //   x.value=x.price;
                        //   x.name=x.type;
                        // })[0];
                        // console.log(this.c6Selection);
                        // console.log(_c6selection);
                        if (_c6selection && !_this.isDigitalLoading) {
                            if (_c6selection.price < _this.digitalDashMin) {
                                _this.digitalDashMin = _c6selection.price;
                            }
                            if (_c6selection.price > _this.digitalDashMax) {
                                _this.digitalDashMax = _c6selection.price;
                            }
                            _this.Chart6Component.setData([{ name: _c6selection.type, value: _c6selection.price }], _this.digitalDashMin, _this.digitalDashMax);
                        }
                    }
                }
                else {
                    if (!_this.loadingLiveTrade) {
                        _this.reconnecting = true;
                    }
                }
            });
        };
        this.findArrow = function (oldValue, newValue, currentArrow) {
            return newValue === oldValue ? currentArrow : (newValue > oldValue ? "nb-arrow-dropup" : "nb-arrow-dropdown");
        };
        this.transformData = function (data) {
            var coinfsym = _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].STATIC.CURRENCY.getSymbol(_this.fsym);
            var cointsym = _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].STATIC.CURRENCY.getSymbol(_this.tsym);
            var incomingTrade = _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].TRADE.unpack(data);
            //console.log(data);
            var newTrade = {
                Market: incomingTrade['M'],
                Type: incomingTrade['T'],
                ID: incomingTrade['ID'],
                Price: "$" + parseFloat(incomingTrade['P']).toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 }),
                Quantity: _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].convertValueToDisplay(coinfsym, incomingTrade['Q']),
                Total: _dataservice_streamer_utility_js__WEBPACK_IMPORTED_MODULE_18__["default"].convertValueToDisplay(cointsym, incomingTrade['TOTAL']),
                Kind: incomingTrade['FSYM']
            };
            if (incomingTrade['F'] & 1) {
                newTrade['Type'] = "SELL";
            }
            else if (incomingTrade['F'] & 2) {
                newTrade['Type'] = "BUY";
            }
            else {
                newTrade['Type'] = "UNKNOWN";
            }
            _this.displayMyData(newTrade);
        };
        this.displayMyData = function (data) {
            if (data.Kind === "BTC") {
                _this.btcTrade.unshift({ Type: data.Type, Market: data.Market, Price: data.Price, Quantity: data.Quantity, Total: data.Total, Coin: data.Kind });
                if (_this.btcTrade.length >= 50)
                    _this.btcTrade.splice(_this.liveTrade.length - 1, 1);
            }
            if (data.Kind === "XRP") {
                _this.xrpTrade.unshift({ Type: data.Type, Market: data.Market, Price: data.Price, Quantity: data.Quantity, Total: data.Total, Coin: data.Kind });
                if (_this.xrpTrade.length >= 50)
                    _this.xrpTrade.splice(_this.liveTrade.length - 1, 1);
            }
            if (data.Kind === "ETH") {
                _this.ethTrade.unshift({ Type: data.Type, Market: data.Market, Price: data.Price, Quantity: data.Quantity, Total: data.Total, Coin: data.Kind });
                if (_this.ethTrade.length >= 50)
                    _this.ethTrade.splice(_this.liveTrade.length - 1, 1);
            }
            if (data.Kind === "LTC") {
                _this.ltcTrade.unshift({ Type: data.Type, Market: data.Market, Price: data.Price, Quantity: data.Quantity, Total: data.Total, Coin: data.Kind });
                if (_this.ltcTrade.length >= 50)
                    _this.ltcTrade.splice(_this.liveTrade.length - 1, 1);
            }
        };
    }
    TraderVComponent.prototype.ngOnInit = function () {
        localStorage.setItem(this._configuration.showBadge2, 'true');
        // this.personalBalance.push({ name: 'BTC', quantity: 2, value: 0, percent: 0, purchased:4565 });
        // this.personalBalance.push({ name: 'ETH', quantity: 29, value: 0, percent: 0, purchased:450 });
        this.getLiveData();
        this.getLiveTrade();
    };
    TraderVComponent.prototype.changeSelection = function (event) {
        this.m2Selection = event;
    };
    TraderVComponent.prototype.changec4Selection = function (event) {
        this.c4selection = event;
        // console.log(event  + '\n'+ "in new env")
    };
    TraderVComponent.prototype.changec6Selection = function (event) {
        this.c6Selection = event;
        //fetch minmax
        this.getCoinMinMax(event);
    };
    TraderVComponent.prototype.CommaFormatted = function (amount) {
        var delimiter = ","; // replace comma if desired
        var a = amount.split('.', 2);
        var d = a[1];
        var i = parseInt(a[0]);
        if (isNaN(i)) {
            return '';
        }
        var minus = '';
        if (i < 0) {
            minus = '-';
        }
        i = Math.abs(i);
        var n = new String(i);
        var a;
        while (n.length > 3) {
            var nn = n.substr(n.length - 3);
            a.unshift(nn);
            n = n.substr(0, n.length - 3);
        }
        if (n.length > 0) {
            a.unshift(n);
        }
        n = a.join(delimiter);
        if (d.length < 1) {
            amount = n;
        }
        else {
            amount = n + '.' + d;
        }
        amount = minus + amount;
        return amount;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_ochart1new_ochart1new_component__WEBPACK_IMPORTED_MODULE_3__["ochart1newComponentnew"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _ochart1new_ochart1new_component__WEBPACK_IMPORTED_MODULE_3__["ochart1newComponentnew"])
    ], TraderVComponent.prototype, "ochart1newComponentnew", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_flipchart2m_flipchart2m_component__WEBPACK_IMPORTED_MODULE_5__["flipchart2mComponentm"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _flipchart2m_flipchart2m_component__WEBPACK_IMPORTED_MODULE_5__["flipchart2mComponentm"])
    ], TraderVComponent.prototype, "flipchart2mComponentm", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_flipchart3m_flipchart3m_component__WEBPACK_IMPORTED_MODULE_6__["flipchart3mComponentm"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _flipchart3m_flipchart3m_component__WEBPACK_IMPORTED_MODULE_6__["flipchart3mComponentm"])
    ], TraderVComponent.prototype, "flipchart3mComponentm", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart1m_chart1m_component__WEBPACK_IMPORTED_MODULE_7__["Chart1Componentm"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart1m_chart1m_component__WEBPACK_IMPORTED_MODULE_7__["Chart1Componentm"])
    ], TraderVComponent.prototype, "Chart1Componentm", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart2m_chart2m_component__WEBPACK_IMPORTED_MODULE_8__["Chart2Componentm"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart2m_chart2m_component__WEBPACK_IMPORTED_MODULE_8__["Chart2Componentm"])
    ], TraderVComponent.prototype, "Chart2Componentm", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart3m_chart3m_component__WEBPACK_IMPORTED_MODULE_9__["Chart3Componentm"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart3m_chart3m_component__WEBPACK_IMPORTED_MODULE_9__["Chart3Componentm"])
    ], TraderVComponent.prototype, "Chart3Componentm", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart4new_chart4new_component__WEBPACK_IMPORTED_MODULE_10__["Chart4Componentnew"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart4new_chart4new_component__WEBPACK_IMPORTED_MODULE_10__["Chart4Componentnew"])
    ], TraderVComponent.prototype, "Chart4Componentnew", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_table2_table2_component__WEBPACK_IMPORTED_MODULE_11__["Table2Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _table2_table2_component__WEBPACK_IMPORTED_MODULE_11__["Table2Component"])
    ], TraderVComponent.prototype, "Table2Component", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart6_chart6_component__WEBPACK_IMPORTED_MODULE_12__["Chart6Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart6_chart6_component__WEBPACK_IMPORTED_MODULE_12__["Chart6Component"])
    ], TraderVComponent.prototype, "Chart6Component", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_chart10_chart10_component__WEBPACK_IMPORTED_MODULE_13__["Chart10Component"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_13__["Chart10Component"])
    ], TraderVComponent.prototype, "Chart10Component", void 0);
    TraderVComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-trader-v',
            template: __webpack_require__(/*! ./trader-v.component.html */ "./src/app/pages/trader-v/trader-v.component.html"),
            styles: [__webpack_require__(/*! ./trader-v.component.scss */ "./src/app/pages/trader-v/trader-v.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_VHubService__WEBPACK_IMPORTED_MODULE_2__["VHubService"], _dataservice_apiservice_component__WEBPACK_IMPORTED_MODULE_17__["ApiService"],
            _TraderVService__WEBPACK_IMPORTED_MODULE_4__["TraderVService"],
            _dataservice_utility_dataservice_component__WEBPACK_IMPORTED_MODULE_16__["DataService"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbDialogService"],
            _dataservice_app_constant_component__WEBPACK_IMPORTED_MODULE_14__["Configuration"], _nebular_theme__WEBPACK_IMPORTED_MODULE_15__["NbToastrService"]])
    ], TraderVComponent);
    return TraderVComponent;
}());



/***/ }),

/***/ "./src/app/pages/trader-v/trader-v.module.ts":
/*!***************************************************!*\
  !*** ./src/app/pages/trader-v/trader-v.module.ts ***!
  \***************************************************/
/*! exports provided: TraderVModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraderVModule", function() { return TraderVModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _trader_v_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./trader-v.component */ "./src/app/pages/trader-v/trader-v.component.ts");
/* harmony import */ var _VHubService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./VHubService */ "./src/app/pages/trader-v/VHubService.ts");
/* harmony import */ var _TraderVService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TraderVService */ "./src/app/pages/trader-v/TraderVService.ts");
/* harmony import */ var _header_header_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../header/header.module */ "./src/app/pages/header/header.module.ts");
/* harmony import */ var _ochart1new_ochart1new_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ochart1new/ochart1new.component */ "./src/app/pages/trader-v/ochart1new/ochart1new.component.ts");
/* harmony import */ var _nebular_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @nebular/theme */ "./node_modules/@nebular/theme/index.js");
/* harmony import */ var ngx_echarts__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-echarts */ "./node_modules/ngx-echarts/fesm5/ngx-echarts.js");
/* harmony import */ var _chart1_chart1_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chart1/chart1.component */ "./src/app/pages/trader-v/chart1/chart1.component.ts");
/* harmony import */ var _chart2_chart2_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./chart2/chart2.component */ "./src/app/pages/trader-v/chart2/chart2.component.ts");
/* harmony import */ var _chart3_chart3_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./chart3/chart3.component */ "./src/app/pages/trader-v/chart3/chart3.component.ts");
/* harmony import */ var _table1_table1_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./table1/table1.component */ "./src/app/pages/trader-v/table1/table1.component.ts");
/* harmony import */ var _chart4_chart4_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./chart4/chart4.component */ "./src/app/pages/trader-v/chart4/chart4.component.ts");
/* harmony import */ var _chart5_chart5_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./chart5/chart5.component */ "./src/app/pages/trader-v/chart5/chart5.component.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _chart6_chart6_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./chart6/chart6.component */ "./src/app/pages/trader-v/chart6/chart6.component.ts");
/* harmony import */ var _table2_table2_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./table2/table2.component */ "./src/app/pages/trader-v/table2/table2.component.ts");
/* harmony import */ var _chart7_chart7_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./chart7/chart7.component */ "./src/app/pages/trader-v/chart7/chart7.component.ts");
/* harmony import */ var _ochart1_ochart1_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ochart1/ochart1.component */ "./src/app/pages/trader-v/ochart1/ochart1.component.ts");
/* harmony import */ var _ochart2_ochart2_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ochart2/ochart2.component */ "./src/app/pages/trader-v/ochart2/ochart2.component.ts");
/* harmony import */ var _ochart4_ochart4_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ochart4/ochart4.component */ "./src/app/pages/trader-v/ochart4/ochart4.component.ts");
/* harmony import */ var _ochart5_ochart5_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ochart5/ochart5.component */ "./src/app/pages/trader-v/ochart5/ochart5.component.ts");
/* harmony import */ var _ochart6_ochart6_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ochart6/ochart6.component */ "./src/app/pages/trader-v/ochart6/ochart6.component.ts");
/* harmony import */ var _ochart7_ochart7_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ochart7/ochart7.component */ "./src/app/pages/trader-v/ochart7/ochart7.component.ts");
/* harmony import */ var _chart8_chart8_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./chart8/chart8.component */ "./src/app/pages/trader-v/chart8/chart8.component.ts");
/* harmony import */ var _chart9_chart9_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./chart9/chart9.component */ "./src/app/pages/trader-v/chart9/chart9.component.ts");
/* harmony import */ var _chart2m_chart2m_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./chart2m/chart2m.component */ "./src/app/pages/trader-v/chart2m/chart2m.component.ts");
/* harmony import */ var _ochart10_ochart10_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./ochart10/ochart10.component */ "./src/app/pages/trader-v/ochart10/ochart10.component.ts");
/* harmony import */ var _chart1m_chart1m_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./chart1m/chart1m.component */ "./src/app/pages/trader-v/chart1m/chart1m.component.ts");
/* harmony import */ var _chart3m_chart3m_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./chart3m/chart3m.component */ "./src/app/pages/trader-v/chart3m/chart3m.component.ts");
/* harmony import */ var _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./chart10/chart10.component */ "./src/app/pages/trader-v/chart10/chart10.component.ts");
/* harmony import */ var _flipchart2m_flipchart2m_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./flipchart2m/flipchart2m.component */ "./src/app/pages/trader-v/flipchart2m/flipchart2m.component.ts");
/* harmony import */ var _flipchart3m_flipchart3m_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./flipchart3m/flipchart3m.component */ "./src/app/pages/trader-v/flipchart3m/flipchart3m.component.ts");
/* harmony import */ var _chart4new_chart4new_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./chart4new/chart4new.component */ "./src/app/pages/trader-v/chart4new/chart4new.component.ts");
/* harmony import */ var _main_pipe_module__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../main-pipe.module */ "./src/app/main-pipe.module.ts");






































//import { AppImgFallbackDirective } from '../../app-img-fallback.directive';
var routes = [
    { path: '', component: _trader_v_component__WEBPACK_IMPORTED_MODULE_4__["TraderVComponent"] }
];
var TraderVModule = /** @class */ (function () {
    function TraderVModule() {
    }
    TraderVModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [_trader_v_component__WEBPACK_IMPORTED_MODULE_4__["TraderVComponent"], _chart1_chart1_component__WEBPACK_IMPORTED_MODULE_11__["Chart1Component"], _chart2_chart2_component__WEBPACK_IMPORTED_MODULE_12__["Chart2Component"], _chart3_chart3_component__WEBPACK_IMPORTED_MODULE_13__["Chart3Component"], _table1_table1_component__WEBPACK_IMPORTED_MODULE_14__["Table1Component"], _chart4_chart4_component__WEBPACK_IMPORTED_MODULE_15__["Chart4Component"], _chart5_chart5_component__WEBPACK_IMPORTED_MODULE_16__["Chart5Component"], _chart6_chart6_component__WEBPACK_IMPORTED_MODULE_18__["Chart6Component"], _table2_table2_component__WEBPACK_IMPORTED_MODULE_19__["Table2Component"], _chart7_chart7_component__WEBPACK_IMPORTED_MODULE_20__["Chart7Component"], _ochart1_ochart1_component__WEBPACK_IMPORTED_MODULE_21__["ochart1Component"], _ochart2_ochart2_component__WEBPACK_IMPORTED_MODULE_22__["ochart2Component"], _ochart4_ochart4_component__WEBPACK_IMPORTED_MODULE_23__["ochart4Component"], _ochart5_ochart5_component__WEBPACK_IMPORTED_MODULE_24__["ochart5Component"], _ochart6_ochart6_component__WEBPACK_IMPORTED_MODULE_25__["ochart6Component"], _ochart7_ochart7_component__WEBPACK_IMPORTED_MODULE_26__["ochart7Component"], _chart8_chart8_component__WEBPACK_IMPORTED_MODULE_27__["Chart8Component"], _chart9_chart9_component__WEBPACK_IMPORTED_MODULE_28__["Chart9Component"], _chart2m_chart2m_component__WEBPACK_IMPORTED_MODULE_29__["Chart2Componentm"], _ochart10_ochart10_component__WEBPACK_IMPORTED_MODULE_30__["ochart10Component"], _chart1m_chart1m_component__WEBPACK_IMPORTED_MODULE_31__["Chart1Componentm"], _chart3m_chart3m_component__WEBPACK_IMPORTED_MODULE_32__["Chart3Componentm"], _chart10_chart10_component__WEBPACK_IMPORTED_MODULE_33__["Chart10Component"], _flipchart2m_flipchart2m_component__WEBPACK_IMPORTED_MODULE_34__["flipchart2mComponentm"], _flipchart3m_flipchart3m_component__WEBPACK_IMPORTED_MODULE_35__["flipchart3mComponentm"], _chart4new_chart4new_component__WEBPACK_IMPORTED_MODULE_36__["Chart4Componentnew"], _ochart1new_ochart1new_component__WEBPACK_IMPORTED_MODULE_8__["ochart1newComponentnew"]],
            imports: [
                _main_pipe_module__WEBPACK_IMPORTED_MODULE_37__["MainPipe"],
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbTooltipModule"], _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbButtonModule"],
                _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"].forChild(routes),
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbLayoutModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbCardModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbActionsModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbTabsetModule"],
                ngx_echarts__WEBPACK_IMPORTED_MODULE_10__["NgxEchartsModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbSelectModule"],
                _angular_common_http__WEBPACK_IMPORTED_MODULE_17__["HttpClientModule"],
                _header_header_module__WEBPACK_IMPORTED_MODULE_7__["HeaderModule"],
                _nebular_theme__WEBPACK_IMPORTED_MODULE_9__["NbSpinnerModule"]
            ],
            providers: [_VHubService__WEBPACK_IMPORTED_MODULE_5__["VHubService"], _TraderVService__WEBPACK_IMPORTED_MODULE_6__["TraderVService"]]
        })
    ], TraderVModule);
    return TraderVModule;
}());



/***/ })

}]);
//# sourceMappingURL=pages-trader-v-trader-v-module.js.map