(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('autolinker')) :
    typeof define === 'function' && define.amd ? define('ngx-linky', ['exports', '@angular/core', 'autolinker'], factory) :
    (global = global || self, factory(global['ngx-linky'] = {}, global.ng.core, global.Autolinker));
}(this, function (exports, core, Autolinker) { 'use strict';

    Autolinker = Autolinker && Autolinker.hasOwnProperty('default') ? Autolinker['default'] : Autolinker;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LinkyPipe = /** @class */ (function () {
        function LinkyPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        LinkyPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (value, options) {
            return Autolinker.link(value, options);
        };
        LinkyPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'linky' },] }
        ];
        return LinkyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LinkyModule = /** @class */ (function () {
        function LinkyModule() {
        }
        LinkyModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [LinkyPipe],
                        exports: [LinkyPipe],
                    },] }
        ];
        return LinkyModule;
    }());

    exports.LinkyModule = LinkyModule;
    exports.LinkyPipe = LinkyPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-linky.umd.js.map
